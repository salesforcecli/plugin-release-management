[
  {
    "id": "alias:list",
    "description": "list username aliases for the Salesforce CLI",
    "strict": true,
    "usage": "alias:list [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-alias",
    "pluginAlias": "@salesforce/plugin-alias",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "tableColumns": {
      "Unset": {
        "alias": {
          "header": "Alias"
        },
        "success": {
          "header": "Success"
        }
      },
      "Set": {
        "alias": {
          "header": "Alias"
        },
        "value": {
          "header": "Value"
        }
      },
      "List": {
        "alias": {
          "header": "Alias"
        },
        "value": {
          "header": "Value"
        }
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "alias:set",
    "description": "set username aliases for the Salesforce CLI\nYou can associate an alias with only one username at a time. If you’ve set an alias multiple times, the alias points to the most recent username.",
    "strict": true,
    "usage": "alias:set name=value... [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-alias",
    "pluginAlias": "@salesforce/plugin-alias",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx alias:set YourAlias=username@example.com",
      "$ sfdx alias:set YourAlias=username@example.com YourOtherAlias=devhub@example.com"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "varargs": false,
    "tableColumns": {
      "Unset": {
        "alias": {
          "header": "Alias"
        },
        "success": {
          "header": "Success"
        }
      },
      "Set": {
        "alias": {
          "header": "Alias"
        },
        "value": {
          "header": "Value"
        }
      },
      "List": {
        "alias": {
          "header": "Alias"
        },
        "value": {
          "header": "Value"
        }
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "alias:unset",
    "description": "unsets aliases for the Salesforce CLI",
    "strict": true,
    "usage": "alias:unset [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-alias",
    "pluginAlias": "@salesforce/plugin-alias",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx alias:unset YourAlias", "$ sfdx alias:unset YourAlias YourOtherAlias"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "tableColumns": {
      "Unset": {
        "alias": {
          "header": "Alias"
        },
        "success": {
          "header": "Success"
        }
      },
      "Set": {
        "alias": {
          "header": "Alias"
        },
        "value": {
          "header": "Value"
        }
      },
      "List": {
        "alias": {
          "header": "Alias"
        },
        "value": {
          "header": "Value"
        }
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "analytics:generate:template",
    "summary": "Generate a simple Analytics template.",
    "description": "The metadata files associated with the Analytics template must be contained in a parent directory called \"waveTemplates\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a simple Analytics template file called myTemplate in the force-app/main/default/waveTemplates directory:\n<%= config.bin %> <%= command.id %> --name myTemplate --output-dir force-app/main/default/waveTemplates"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the Analytics template.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["templatename"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "apex:generate:class",
    "summary": "Generate an Apex class.",
    "description": "Generates the Apex *.cls file and associated metadata file. These files must be contained in a parent directory called \"classes\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate two metadata files associated with the MyClass Apex class (MyClass.cls and MyClass.cls-meta.xml) in the current directory:\n<%= config.bin %> <%= command.id %> --name MyClass",
      "Similar to previous example, but generates the files in the \"force-app/main/default/classes\" directory:\n<%= config.bin %> <%= command.id %> --name MyClass --output-dir force-app/main/default/classes"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Apex class.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["classname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["ApexException", "ApexUnitTest", "DefaultApexClass", "InboundEmailService"],
        "default": "DefaultApexClass",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "apex:generate:trigger",
    "summary": "Generate an Apex trigger.",
    "description": "Generates the Apex trigger *.trigger file and associated metadata file. These files must be contained in a parent directory called \"triggers\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one. \n\nIf you don't specify the --sobject flag, the .trigger file contains the generic placeholder SOBJECT; replace it with the Salesforce object you want to generate a trigger for. If you don't specify --event, \"before insert\" is used.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate two files associated with the MyTrigger Apex trigger (MyTrigger.trigger and MyTrigger.trigger-meta.xml) in the current directory:\n<%= config.bin %> <%= command.id %> --name MyTrigger",
      "Similar to the previous example, but generate the files in the \"force-app/main/default/triggers\" directory:\n<%= config.bin %> <%= command.id %> --name MyTrigger --output-dir force-app/main/default/triggers",
      "Generate files for a trigger that fires on the Account object before and after an insert:\n<%= config.bin %> <%= command.id %> --name MyTrigger --sobject Account --event \"before insert,after insert\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Apex trigger",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["triggername"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["ApexTrigger"],
        "default": "ApexTrigger",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "Salesforce object to generate a trigger on.",
        "multiple": false,
        "default": "SOBJECT",
        "deprecateAliases": true
      },
      "event": {
        "name": "event",
        "type": "option",
        "char": "e",
        "summary": "Events that fire the trigger.",
        "multiple": true,
        "options": [
          "before insert",
          "before update",
          "before delete",
          "after insert",
          "after update",
          "after delete",
          "after undelete"
        ],
        "default": ["before insert"],
        "deprecateAliases": true,
        "aliases": ["triggerevents"],
        "delimiter": ","
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "auth:accesstoken:store",
    "description": "authorize an org using an existing Salesforce access token\nBy default, the command runs interactively and asks you for the access token. If you previously authorized the org, the command prompts whether you want to overwrite the local file. Specify --noprompt to not be prompted.\nTo use the command in a CI/CD script, set the SFDX_ACCESS_TOKEN environment variable to the access token. Then run the command with the --noprompt parameter. \"<org id>!<accesstoken>\"",
    "strict": true,
    "usage": "auth:accesstoken:store -r <url> [-d] [-s] [-a <string>] [-p] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx auth:accesstoken:store --instanceurl https://mycompany.my.salesforce.com",
      "$ export SFDX_ACCESS_TOKEN=00Dxx0000000000!xxxxx",
      "$ sfdx auth:accesstoken:store --instanceurl https://dev-hub.my.salesforce.com --noprompt"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "instanceurl": {
        "name": "instanceurl",
        "type": "option",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "required": true,
        "multiple": false
      },
      "setdefaultdevhubusername": {
        "name": "setdefaultdevhubusername",
        "type": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for confirmation",
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "instanceurl": {
        "kind": "url",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setdefaultdevhubusername": {
        "kind": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "default": false,
        "allowNo": false,
        "type": "boolean"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "default": false,
        "allowNo": false,
        "type": "boolean"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for confirmation",
        "required": false,
        "default": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "auth:device:login",
    "description": "authorize an org using a device code\nYou must open a browser, navigate to the verification URL, and enter the code. Log in, if not already logged in, and you’ll be prompted to allow the device to connect to the org.",
    "strict": true,
    "usage": "auth:device:login [-i <string>] [-r <url>] [-d] [-s] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx auth:device:login -d -a TestOrg1",
      "$ sfdx auth:device:login -i <OAuth client id>",
      "$ sfdx auth:device:login -r https://MyDomainName--SandboxName.sandbox.my.salesforce.com"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "description": "OAuth client ID (sometimes called the consumer key)",
        "multiple": false
      },
      "instanceurl": {
        "name": "instanceurl",
        "type": "option",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "multiple": false
      },
      "setdefaultdevhubusername": {
        "name": "setdefaultdevhubusername",
        "type": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "multiple": false
      },
      "disablemasking": {
        "name": "disablemasking",
        "type": "boolean",
        "description": "disable masking of user input (for use with problematic terminals)",
        "hidden": true,
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "clientid": {
        "kind": "string",
        "char": "i",
        "description": "OAuth client ID (sometimes called the consumer key)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "instanceurl": {
        "kind": "url",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setdefaultdevhubusername": {
        "kind": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false,
        "type": "boolean"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false,
        "type": "boolean"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "disablemasking": {
        "kind": "boolean",
        "description": "disable masking of user input (for use with problematic terminals)",
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "auth:jwt:grant",
    "description": "authorize an org using the JWT flow\nUse a certificate associated with your private key that has been uploaded to a personal connected app.\nIf you specify an --instanceurl value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file. To specify a My Domain URL, use the format MyDomainName.my.salesforce.com (not MyDomainName.lightning.force.com). To specify a sandbox, set --instanceurl to https://MyDomainName--SandboxName.sandbox.my.salesforce.com.",
    "strict": true,
    "usage": "auth:jwt:grant -u <string> -f <filepath> -i <string> [-r <url>] [-d] [-s] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx auth:jwt:grant -u me@my.org -f <path to jwt key file> -i <OAuth client id>",
      "$ sfdx auth:jwt:grant -u me@my.org -f <path to jwt key file> -i <OAuth client id> -s -a MyDefaultOrg",
      "$ sfdx auth:jwt:grant -u me@acme.org -f <path to jwt key file> -i <OAuth client id> -r https://acme.my.salesforce.com"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "username": {
        "name": "username",
        "type": "option",
        "char": "u",
        "description": "authentication username",
        "required": true,
        "multiple": false
      },
      "jwtkeyfile": {
        "name": "jwtkeyfile",
        "type": "option",
        "char": "f",
        "description": "path to a file containing the private key",
        "required": true,
        "multiple": false
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "description": "OAuth client ID (sometimes called the consumer key)",
        "required": true,
        "multiple": false
      },
      "instanceurl": {
        "name": "instanceurl",
        "type": "option",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "multiple": false
      },
      "setdefaultdevhubusername": {
        "name": "setdefaultdevhubusername",
        "type": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for auth confirmation in demo mode",
        "hidden": true,
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "username": {
        "kind": "string",
        "char": "u",
        "description": "authentication username",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jwtkeyfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to a file containing the private key",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "clientid": {
        "kind": "string",
        "char": "i",
        "description": "OAuth client ID (sometimes called the consumer key)",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "instanceurl": {
        "kind": "url",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setdefaultdevhubusername": {
        "kind": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false,
        "type": "boolean"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false,
        "type": "boolean"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for auth confirmation in demo mode",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "auth:list",
    "description": "list auth connection information",
    "strict": true,
    "usage": "auth:list [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "flagsConfig": {},
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "auth:logout",
    "description": "log out from authorized orgs\nBy default, this command logs you out from your default scratch org.",
    "strict": true,
    "usage": "auth:logout [-a] [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx auth:logout -u me@my.org", "$ sfdx auth:logout -a", "$ sfdx auth:logout -p"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "char": "a",
        "description": "include all authenticated orgs",
        "required": false,
        "allowNo": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for confirmation",
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "supportsUsername": false,
    "flagsConfig": {
      "all": {
        "kind": "boolean",
        "char": "a",
        "description": "include all authenticated orgs",
        "longDescription": "Includes all authenticated orgs: for example, Dev Hubs, sandboxes, DE orgs, and expired, deleted, and unknown-status scratch orgs.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for confirmation",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "auth:sfdxurl:store",
    "description": "authorize an org using an SFDX auth URL stored within a file\nThe SFDX auth URL must have the format \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". NOTE: The SFDX auth URL uses the \"force\" protocol, and not \"http\" or \"https\". Also, the \"instanceUrl\" inside the SFDX auth URL doesn't include the protocol (\"https://\").\n\nYou have three options when creating the auth file. The easiest option is to redirect the output of the `sfdx force:org:display --verbose --json` command into a file. For example, using an org you have already authorized:\n\n    $ sfdx force:org:display -u <OrgUsername> --verbose --json > authFile.json\n    $ sfdx auth:sfdxurl:store -f authFile.json\n\nThe resulting JSON file contains the URL in the sfdxAuthUrl property inside of a results object. NOTE: The `force:org:display --verbose` command displays the refresh token only for orgs authorized with the web server flow, and not the JWT bearer flow. \n\nYou can also create a JSON file that has a top-level property named sfdxAuthUrl whose value is the auth URL. Finally, you can create a normal text file that includes just the URL and nothing else.",
    "strict": true,
    "usage": "auth:sfdxurl:store -f <filepath> [-d] [-s] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx auth:sfdxurl:store -f <path to sfdxAuthUrl file>",
      "$ sfdx auth:sfdxurl:store -f <path to sfdxAuthUrl file> -s -a MyDefaultOrg"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "sfdxurlfile": {
        "name": "sfdxurlfile",
        "type": "option",
        "char": "f",
        "description": "path to a file containing the sfdx url",
        "required": true,
        "multiple": false
      },
      "setdefaultdevhubusername": {
        "name": "setdefaultdevhubusername",
        "type": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for auth confirmation in demo mode",
        "hidden": true,
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "sfdxurlfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to a file containing the sfdx url",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setdefaultdevhubusername": {
        "kind": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false,
        "type": "boolean"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false,
        "type": "boolean"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for auth confirmation in demo mode",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "auth:web:login",
    "description": "authorize an org using the web login flow\nIf you specify an --instanceurl value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file. To specify a My Domain URL, use the format MyDomainName.my.salesforce.com (not MyDomainName.lightning.force.com). To log in to a sandbox, set --instanceurl to https://MyDomainName--SandboxName.sandbox.my.salesforce.com.\nTo open in a specific browser, use the --browser parameter. Supported browsers are \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens in your default browser.",
    "strict": true,
    "usage": "auth:web:login [-b chrome|edge|firefox] [-i <string>] [-r <url>] [-d] [-s] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-auth",
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx auth:web:login -a TestOrg1",
      "$ sfdx auth:web:login -i <OAuth client id>",
      "$ sfdx auth:web:login -r https://MyDomainName--SandboxName.sandbox.my.salesforce.com",
      "$ sfdx auth:web:login -a TestOrg1 -b firefox"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "browser": {
        "name": "browser",
        "type": "option",
        "char": "b",
        "description": "browser where the org opens",
        "helpValue": "(chrome|edge|firefox)",
        "multiple": false,
        "options": ["chrome", "edge", "firefox"]
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "description": "OAuth client ID (sometimes called the consumer key)",
        "multiple": false
      },
      "instanceurl": {
        "name": "instanceurl",
        "type": "option",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "multiple": false
      },
      "setdefaultdevhubusername": {
        "name": "setdefaultdevhubusername",
        "type": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "multiple": false
      },
      "disablemasking": {
        "name": "disablemasking",
        "type": "boolean",
        "description": "disable masking of user input (for use with problematic terminals)",
        "hidden": true,
        "allowNo": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for auth confirmation in demo mode",
        "hidden": true,
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "browser": {
        "kind": "enum",
        "helpValue": "(chrome|edge|firefox)",
        "char": "b",
        "description": "browser where the org opens",
        "options": ["chrome", "edge", "firefox"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "clientid": {
        "kind": "string",
        "char": "i",
        "description": "OAuth client ID (sometimes called the consumer key)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "instanceurl": {
        "kind": "url",
        "char": "r",
        "description": "the login URL of the instance the org lives on",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setdefaultdevhubusername": {
        "kind": "boolean",
        "char": "d",
        "description": "set the authenticated org as the default dev hub org for scratch org creation",
        "allowNo": false,
        "type": "boolean"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the authenticated org as the default username that all commands run against",
        "allowNo": false,
        "type": "boolean"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "set an alias for the authenticated org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "disablemasking": {
        "kind": "boolean",
        "description": "disable masking of user input (for use with problematic terminals)",
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for auth confirmation in demo mode",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "autocomplete",
    "description": "display autocomplete installation instructions",
    "strict": true,
    "pluginName": "@oclif/plugin-autocomplete",
    "pluginAlias": "@oclif/plugin-autocomplete",
    "pluginType": "link",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> autocomplete",
      "$ <%= config.bin %> autocomplete bash",
      "$ <%= config.bin %> autocomplete zsh",
      "$ <%= config.bin %> autocomplete --refresh-cache"
    ],
    "flags": {
      "refresh-cache": {
        "name": "refresh-cache",
        "type": "boolean",
        "char": "r",
        "description": "Refresh cache (ignores displaying instructions)",
        "allowNo": false
      }
    },
    "args": [
      {
        "name": "shell",
        "description": "shell type",
        "required": false
      }
    ],
    "_flags": {
      "refresh-cache": {
        "description": "Refresh cache (ignores displaying instructions)",
        "char": "r",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@1.21.0",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "automig:dump",
    "description": "Dump records in Salesforce org to CSV files for migration usage",
    "usage": "automig:dump [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "sfdx-migration-automatic",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "$ sfdx automig:dump --targetusername username@example.com --objects Opportunity,Case,Account:related,Task:related --outputdir ./dump",
      "$ sfdx automig:dump --targetusername username@example.com --config automig-dump-config.json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "config": {
        "name": "config",
        "type": "option",
        "char": "f",
        "description": "dump configuration file"
      },
      "objects": {
        "name": "objects",
        "type": "option",
        "char": "o",
        "description": "object names to dump, optionally paired with target scope (e.g. Account,Contact,User:related)"
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "output directory for dumped CSV files"
      },
      "defaultnamespace": {
        "name": "defaultnamespace",
        "type": "option",
        "char": "n",
        "description": "developer namespace prefix for managed packages"
      },
      "excludebom": {
        "name": "excludebom",
        "type": "boolean",
        "description": "do not prepend byte order mark (\\ufeff) in output files",
        "allowNo": false
      },
      "ignorefields": {
        "name": "ignorefields",
        "type": "option",
        "description": "list of object.field path to exclude from dumping (e.g. Account.OwnerId,OpportunityLineItem.TotalPrice)"
      },
      "ignoresystemdate": {
        "name": "ignoresystemdate",
        "type": "boolean",
        "description": "exclude system-defined date fields from the dump target (e.g. CreatedDate, LastModifiedDate)",
        "allowNo": false
      },
      "ignorereadonly": {
        "name": "ignorereadonly",
        "type": "boolean",
        "description": "exclude non-createable fields from the dump target",
        "allowNo": false
      },
      "idmap": {
        "name": "idmap",
        "type": "option",
        "char": "i",
        "description": "id map file"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "sfdx-migration-automatic",
    "flagsConfig": {
      "config": {
        "kind": "filepath",
        "char": "f",
        "description": "dump configuration file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "objects": {
        "kind": "array",
        "char": "o",
        "description": "object names to dump, optionally paired with target scope (e.g. Account,Contact,User:related)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputdir": {
        "kind": "directory",
        "char": "d",
        "description": "output directory for dumped CSV files",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "defaultnamespace": {
        "kind": "string",
        "char": "n",
        "description": "developer namespace prefix for managed packages",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "excludebom": {
        "kind": "boolean",
        "description": "do not prepend byte order mark (\\ufeff) in output files",
        "allowNo": false,
        "type": "boolean"
      },
      "ignorefields": {
        "kind": "array",
        "description": "list of object.field path to exclude from dumping (e.g. Account.OwnerId,OpportunityLineItem.TotalPrice)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignoresystemdate": {
        "kind": "boolean",
        "description": "exclude system-defined date fields from the dump target (e.g. CreatedDate, LastModifiedDate)",
        "allowNo": false,
        "type": "boolean"
      },
      "ignorereadonly": {
        "kind": "boolean",
        "description": "exclude non-createable fields from the dump target",
        "allowNo": false,
        "type": "boolean"
      },
      "idmap": {
        "kind": "filepath",
        "char": "i",
        "description": "id map file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresProject": false,
    "supportsUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "automig:load",
    "description": "Load records from CSV files to Salesforce org, resolving relationships between records",
    "usage": "automig:load [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "sfdx-migration-automatic",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "$ sfdx automig:load --targetusername username@example.com --inputdir ./data",
      "$ sfdx automig:load --targetusername username@example.com --inputdir ./data --mappingobjects User:Email,RecordType:DeveloperName"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "config": {
        "name": "config",
        "type": "option",
        "char": "f",
        "description": "load configuration file"
      },
      "inputdir": {
        "name": "inputdir",
        "type": "option",
        "char": "d",
        "description": "directory which includes input data files in CSV"
      },
      "targetobjects": {
        "name": "targetobjects",
        "type": "option",
        "description": "list of object names to include in loading"
      },
      "ignoreobjects": {
        "name": "ignoreobjects",
        "type": "option",
        "description": "list of object names to exclude from loading"
      },
      "mappingobjects": {
        "name": "mappingobjects",
        "type": "option",
        "char": "m",
        "description": "list of object and key field name pair to map to existing records (e.g. User:Email,RecordType:DeveloperName"
      },
      "ignorefields": {
        "name": "ignorefields",
        "type": "option",
        "description": "list of object.field path to exclude from loading (e.g. Account.OwnerId,OpportunityLineItem.TotalPrice)"
      },
      "defaultnamespace": {
        "name": "defaultnamespace",
        "type": "option",
        "char": "n",
        "description": "developer namespace prefix for managed packages"
      },
      "deletebeforeload": {
        "name": "deletebeforeload",
        "type": "boolean",
        "description": "delete all records in target objects before loading",
        "allowNo": false
      },
      "idmap": {
        "name": "idmap",
        "type": "option",
        "char": "i",
        "description": "id map file"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "sfdx-migration-automatic",
    "flagsConfig": {
      "config": {
        "kind": "filepath",
        "char": "f",
        "description": "load configuration file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "inputdir": {
        "kind": "directory",
        "char": "d",
        "description": "directory which includes input data files in CSV",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "targetobjects": {
        "kind": "array",
        "description": "list of object names to include in loading",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignoreobjects": {
        "kind": "array",
        "description": "list of object names to exclude from loading",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "mappingobjects": {
        "kind": "array",
        "char": "m",
        "description": "list of object and key field name pair to map to existing records (e.g. User:Email,RecordType:DeveloperName",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignorefields": {
        "kind": "array",
        "description": "list of object.field path to exclude from loading (e.g. Account.OwnerId,OpportunityLineItem.TotalPrice)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "defaultnamespace": {
        "kind": "string",
        "char": "n",
        "description": "developer namespace prefix for managed packages",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "deletebeforeload": {
        "kind": "boolean",
        "description": "delete all records in target objects before loading",
        "allowNo": false,
        "type": "boolean"
      },
      "idmap": {
        "kind": "filepath",
        "char": "i",
        "description": "id map file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresProject": false,
    "supportsUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "automig:package",
    "description": "Bundle record data and one-click migration script as a Salesforce Package",
    "usage": "automig:package [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "sfdx-migration-automatic",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "$ sfdx automig:package --targetusername username@example.com --inputdir ./data",
      "$ sfdx automig:package --targetusername username@example.com --inputdir ./data --mappingobjects User:Email,RecordType:DeveloperName"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "config": {
        "name": "config",
        "type": "option",
        "char": "f",
        "description": "load configuration file"
      },
      "inputdir": {
        "name": "inputdir",
        "type": "option",
        "char": "d",
        "description": "directory which includes input data files in CSV"
      },
      "targetobjects": {
        "name": "targetobjects",
        "type": "option",
        "description": "list of object names to include in loading"
      },
      "ignoreobjects": {
        "name": "ignoreobjects",
        "type": "option",
        "description": "list of object names to exclude from loading"
      },
      "mappingobjects": {
        "name": "mappingobjects",
        "type": "option",
        "char": "m",
        "description": "list of object and key field name pair to map to existing records (e.g. User:Email,RecordType:DeveloperName"
      },
      "ignorefields": {
        "name": "ignorefields",
        "type": "option",
        "description": "list of object.field path to exclude from loading (e.g. Account.OwnerId,OpportunityLineItem.TotalPrice)"
      },
      "defaultnamespace": {
        "name": "defaultnamespace",
        "type": "option",
        "char": "n",
        "description": "developer namespace prefix for managed packages"
      },
      "packagename": {
        "name": "packagename",
        "type": "option",
        "char": "p",
        "description": "package name to bundle record data and migration script"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "sfdx-migration-automatic",
    "flagsConfig": {
      "config": {
        "kind": "filepath",
        "char": "f",
        "description": "load configuration file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "inputdir": {
        "kind": "directory",
        "char": "d",
        "description": "directory which includes input data files in CSV",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "targetobjects": {
        "kind": "array",
        "description": "list of object names to include in loading",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignoreobjects": {
        "kind": "array",
        "description": "list of object names to exclude from loading",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "mappingobjects": {
        "kind": "array",
        "char": "m",
        "description": "list of object and key field name pair to map to existing records (e.g. User:Email,RecordType:DeveloperName",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignorefields": {
        "kind": "array",
        "description": "list of object.field path to exclude from loading (e.g. Account.OwnerId,OpportunityLineItem.TotalPrice)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "defaultnamespace": {
        "kind": "string",
        "char": "n",
        "description": "developer namespace prefix for managed packages",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packagename": {
        "kind": "string",
        "char": "p",
        "description": "package name to bundle record data and migration script",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresProject": false,
    "supportsUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "channel:promote",
    "summary": "promote a s3 channel",
    "description": "promote a s3 channel",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --candidate latest-rc --target latest --platform win --platform mac"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "If true, only show what would happen",
        "allowNo": false
      },
      "promote-to-channel": {
        "name": "promote-to-channel",
        "type": "option",
        "char": "t",
        "summary": "the channel name that you are promoting to",
        "required": true,
        "multiple": false,
        "default": "stable",
        "aliases": ["target"]
      },
      "promote-from-channel": {
        "name": "promote-from-channel",
        "type": "option",
        "char": "C",
        "summary": "the channel name that you want to promote",
        "multiple": false,
        "aliases": ["candidate"]
      },
      "platform": {
        "name": "platform",
        "type": "option",
        "char": "p",
        "summary": "the platform to promote",
        "multiple": true,
        "options": ["win", "macos", "deb"],
        "delimiter": ","
      },
      "cli": {
        "name": "cli",
        "type": "option",
        "char": "c",
        "summary": "the cli name to promote",
        "required": true,
        "multiple": false,
        "options": ["sf", "sfdx"]
      },
      "sha": {
        "name": "sha",
        "type": "option",
        "char": "s",
        "summary": "the short sha to promote",
        "multiple": false
      },
      "max-age": {
        "name": "max-age",
        "type": "option",
        "char": "m",
        "summary": "cache control max-age in seconds",
        "multiple": false,
        "default": 300,
        "aliases": ["maxage"]
      },
      "indexes": {
        "name": "indexes",
        "type": "boolean",
        "char": "i",
        "summary": "append the promoted urls into the index files",
        "allowNo": true
      },
      "xz": {
        "name": "xz",
        "type": "boolean",
        "char": "x",
        "summary": "also upload xz",
        "allowNo": true
      },
      "architecture-target": {
        "name": "architecture-target",
        "type": "option",
        "char": "T",
        "summary": "comma-separated targets to promote (e.g.: linux-arm,win32-x64)",
        "multiple": true,
        "options": ["linux-x64", "linux-arm", "win32-x64", "win32-x86", "darwin-x64"],
        "aliases": ["targets"],
        "delimiter": ","
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "summary": "the version of the candidate to be promoted, which must exist already in s3. Used to fetch the correct sha",
        "multiple": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:install:test",
    "summary": "install sf or sfdx",
    "description": "install sf or sfdx",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --cli sfdx --method installer",
      "<%= config.bin %> <%= command.id %> --cli sfdx --method npm",
      "<%= config.bin %> <%= command.id %> --cli sfdx --method tarball",
      "<%= config.bin %> <%= command.id %> --cli sf --method tarball",
      "<%= config.bin %> <%= command.id %> --cli sf --method tarball --channel stable-rc"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "cli": {
        "name": "cli",
        "type": "option",
        "char": "c",
        "summary": "the cli to install",
        "required": true,
        "multiple": false,
        "options": ["sf", "sfdx"]
      },
      "method": {
        "name": "method",
        "type": "option",
        "char": "m",
        "summary": "the installation method to use",
        "required": true,
        "multiple": false,
        "options": ["installer", "npm", "tarball"]
      },
      "channel": {
        "name": "channel",
        "type": "option",
        "summary": "the channel to install from",
        "multiple": false,
        "options": ["legacy", "stable", "stable-rc", "latest", "latest-rc"],
        "default": "stable"
      },
      "output-file": {
        "name": "output-file",
        "type": "option",
        "summary": "the file to write the JSON results to (must be .json)",
        "multiple": false,
        "default": "test-results.json"
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:release:build",
    "summary": "builds a new release from a designated starting point and optionally creates PR in Github",
    "description": "builds a new release from a designated starting point and optionally creates PR in Github",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %>",
      "<%= config.bin %> <%= command.id %> --patch",
      "<%= config.bin %> <%= command.id %> --start-from-npm-dist-tag latest-rc --patch",
      "<%= config.bin %> <%= command.id %> --start-from-github-ref 7.144.0",
      "<%= config.bin %> <%= command.id %> --start-from-github-ref main",
      "<%= config.bin %> <%= command.id %> --start-from-github-ref f476e8e",
      "<%= config.bin %> <%= command.id %> --start-from-github-ref main --prerelease beta",
      "<%= config.bin %> <%= command.id %> --build-only",
      "<%= config.bin %> <%= command.id %> --only @salesforce/plugin-source,@salesforce/plugin-info@1.2.3,@sf/config"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "start-from-npm-dist-tag": {
        "name": "start-from-npm-dist-tag",
        "type": "option",
        "char": "d",
        "summary": "the npm dist-tag to start the release from, examples: nightly, latest-rc",
        "multiple": false,
        "aliases": ["rctag"]
      },
      "start-from-github-ref": {
        "name": "start-from-github-ref",
        "type": "option",
        "char": "g",
        "summary": "a Github ref to start the release from, examples: main, 7.144.0, f476e8e",
        "multiple": false
      },
      "build-only": {
        "name": "build-only",
        "type": "boolean",
        "summary": "only build the release, do not git add/commit/push",
        "allowNo": false
      },
      "resolutions": {
        "name": "resolutions",
        "type": "boolean",
        "summary": "bump the versions of packages listed in the resolutions section",
        "allowNo": true
      },
      "only": {
        "name": "only",
        "type": "option",
        "summary": "only bump the version of the packages passed in, uses latest if version is not provided",
        "multiple": true,
        "delimiter": ","
      },
      "pinned-deps": {
        "name": "pinned-deps",
        "type": "boolean",
        "summary": "bump the versions of the packages listed in the pinnedDependencies section",
        "allowNo": true
      },
      "jit": {
        "name": "jit",
        "type": "boolean",
        "summary": "bump the versions of the packages listed in the jitPlugins (just-in-time) section",
        "allowNo": true
      },
      "patch": {
        "name": "patch",
        "type": "boolean",
        "summary": "bump the release as a patch of an existing version, not a new minor version",
        "allowNo": false,
        "exclusive": ["prerelease"]
      },
      "prerelease": {
        "name": "prerelease",
        "type": "option",
        "summary": "name of the prerelease to create, examples: dev, alpha",
        "multiple": false,
        "exclusive": ["patch"]
      },
      "snapshot": {
        "name": "snapshot",
        "type": "boolean",
        "summary": "update the snapshots and commit them to the PR",
        "allowNo": false
      },
      "schema": {
        "name": "schema",
        "type": "boolean",
        "summary": "update the schemas and commit them to the PR",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:releasenotes",
    "summary": "pull all relevant information for writing release notes.\n Requires the GH_TOKEN to be set in the environment.",
    "description": "pull all relevant information for writing release notes.\n Requires the GH_TOKEN to be set in the environment.",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --cli sf",
      "<%= config.bin %> <%= command.id %> --cli sfdx",
      "<%= config.bin %> <%= command.id %> --cli sf --since 1.0.0",
      "<%= config.bin %> <%= command.id %> --cli sfdx --since 7.19.0",
      "<%= config.bin %> <%= command.id %> --cli sf > changes.txt",
      "<%= config.bin %> <%= command.id %> --cli sf --markdown > changes.md"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "cli": {
        "name": "cli",
        "type": "option",
        "char": "c",
        "summary": "the cli to pull information for",
        "required": true,
        "multiple": false,
        "options": ["sf", "sfdx"]
      },
      "since": {
        "name": "since",
        "type": "option",
        "char": "s",
        "summary": "the version number of the previous release. Defaults to the latest-rc version on npm",
        "multiple": false
      },
      "markdown": {
        "name": "markdown",
        "type": "boolean",
        "char": "m",
        "summary": "format the output in markdown",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:schemas:collect",
    "summary": "collect schemas from installed plugins",
    "description": "collect schemas from installed plugins",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": ["<%= config.bin %> <%= command.id %>"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:schemas:compare",
    "summary": "compare schemas from installed plugins",
    "description": "compare schemas from installed plugins",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": ["<%= config.bin %> <%= command.id %>"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:tarballs:prepare",
    "summary": "remove unnecessary files from node_modules",
    "description": "remove unnecessary files from node_modules",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": ["<%= config.bin %> <%= command.id %>"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "only show what would be removed from node_modules",
        "allowNo": false
      },
      "types": {
        "name": "types",
        "type": "boolean",
        "char": "t",
        "summary": "remove all types (.d.ts) files from node_modules ",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "show all files paths being removed",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:tarballs:smoke",
    "summary": "smoke tests for the tarballed CLI\n Tests that the CLI and every command can be initialized.",
    "description": "smoke tests for the tarballed CLI\n Tests that the CLI and every command can be initialized.",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": ["<%= config.bin %> <%= command.id %> --cli sfdx", "<%= config.bin %> <%= command.id %> --cli sf"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "cli": {
        "name": "cli",
        "type": "option",
        "char": "c",
        "summary": "the cli to install",
        "required": true,
        "multiple": false,
        "options": ["sf", "sfdx"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "show the --help output for each command",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:tarballs:verify",
    "summary": "verify that tarballs are ready to be uploaded",
    "description": "verify that tarballs are ready to be uploaded",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %>",
      "<%= config.bin %> <%= command.id %> --cli sfdx",
      "<%= config.bin %> <%= command.id %> --cli sf"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "cli": {
        "name": "cli",
        "type": "option",
        "char": "c",
        "summary": "the cli to verify",
        "multiple": false,
        "options": ["sf", "sfdx"],
        "default": "sfdx"
      },
      "windows-username-buffer": {
        "name": "windows-username-buffer",
        "type": "option",
        "char": "w",
        "summary": "the number of characters to allow for windows usernames",
        "multiple": false,
        "default": 41
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cli:versions:inspect",
    "summary": "inspect the CLI version across all install paths",
    "description": "inspect the CLI version across all install paths",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> -l archive -c stable",
      "<%= config.bin %> <%= command.id %> -l archive -c stable-rc",
      "<%= config.bin %> <%= command.id %> -l archive npm -c stable",
      "<%= config.bin %> <%= command.id %> -l archive npm -c latest",
      "<%= config.bin %> <%= command.id %> -l archive npm -c latest latest-rc",
      "<%= config.bin %> <%= command.id %> -l archive npm -c stable stable-rc",
      "<%= config.bin %> <%= command.id %> -l npm -c latest --salesforce",
      "<%= config.bin %> <%= command.id %> -l npm -c latest -d @salesforce/core",
      "<%= config.bin %> <%= command.id %> -l npm -c latest -d @salesforce/**/ salesforce-alm",
      "<%= config.bin %> <%= command.id %> -l npm -c latest -d chalk -s"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "dependencies": {
        "name": "dependencies",
        "type": "option",
        "char": "d",
        "summary": "glob pattern of dependencies you want to see the version of",
        "multiple": true
      },
      "salesforce": {
        "name": "salesforce",
        "type": "boolean",
        "char": "s",
        "summary": "show versions of salesforce owned dependencies",
        "allowNo": false
      },
      "channels": {
        "name": "channels",
        "type": "option",
        "char": "c",
        "summary": "the channel you want to inspect (for achives, latest and latest-rc are translated to stable and stable-rc. And vice-versa for npm)",
        "required": true,
        "multiple": true,
        "options": ["legacy", "stable", "stable-rc", "latest", "latest-rc"]
      },
      "locations": {
        "name": "locations",
        "type": "option",
        "char": "l",
        "summary": "the location you want to inspect",
        "required": true,
        "multiple": true,
        "options": ["archive", "npm"]
      },
      "cli": {
        "name": "cli",
        "type": "option",
        "summary": "the CLI you want to inspect",
        "required": true,
        "multiple": false,
        "options": ["sf", "sfdx"],
        "default": "sfdx"
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "cmdt:generate:object",
    "summary": "Generate a new custom metadata type in the current project.",
    "description": "This command creates a metadata file that describes the new custom metadata type. By default, the file is created in the MyCustomType__mdt directory in the current directory, where MyCustomType is the value of the required --type-name flag. Use the --output-directory to generate the file in a package directory with other custom metadata types, such as \"force-app/main/default/objects\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a custom metadata type with developer name 'MyCustomType'; this name is also used as the label:\n<%= config.bin %> <%= command.id %> --type-name MyCustomType",
      "Generate a protected custom metadata type with a specific label:\n<%= config.bin %> <%= command.id %> --type-name MyCustomType --label \"Custom Type\" --plural-label \"Custom Types\" --visibility Protected"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "type-name": {
        "name": "type-name",
        "type": "option",
        "char": "n",
        "summary": "Unique object name for the custom metadata type.",
        "description": "The name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.",
        "required": true,
        "multiple": false,
        "aliases": ["typename"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the custom metadata type.",
        "multiple": false
      },
      "plural-label": {
        "name": "plural-label",
        "type": "option",
        "char": "p",
        "summary": "Plural version of the label value; if blank, uses label.",
        "multiple": false,
        "aliases": ["plurallabel"]
      },
      "visibility": {
        "name": "visibility",
        "type": "option",
        "char": "v",
        "summary": "Who can see the custom metadata type.",
        "description": "For more information on what each option means, see this topic in Salesforce Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui_create.htm&type=5.",
        "multiple": false,
        "options": ["PackageProtected", "Protected", "Public"],
        "default": "Public"
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store the newly-created custom metadata type files",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": "",
        "aliases": ["outputdir", "outputdirectory"]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "cmdt:generate:field",
    "summary": "Generate a field for a custom metadata type based on the provided field type.",
    "description": "Similar to a custom object, a custom metadata type has a list of custom fields that represent aspects of the metadata.\n\nThis command creates a metadata file that describes the new custom metadata type field. By default, the file is created in a \"fields\" directory in the current directory. Use the --output-directory to generate the file in the directory that contains the custom metadata type metdata files, such as \"force-app/main/default/objects/MyCmdt__mdt\" for the custom metadata type called MyCmdt.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a metadata file for a custom checkbox field and add the file to the MyCmdt__mdt/fields directory:\n<%= config.bin %> <%= command.id %> --name MyCheckboxField --type Checkbox --output-directory force-app/main/default/objects/MyCmdt__mdt",
      "Generate a metadata file for a custom picklist field and add a few values:\n<%= config.bin %> <%= command.id %> --name MyPicklistField --type Picklist --picklist-values A --picklist-values B --picklist-values C --output-directory force-app/main/default/objects/MyCmdt__mdt",
      "Generate a metadata file for a custom number field and specify 2 decimal places:\n<%= config.bin %> <%= command.id %> --name MyNumberField --type Number --decimal-places 2 --output-directory force-app/main/default/objects/MyCmdt__mdt"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Unique name for the field.",
        "required": true,
        "multiple": false,
        "aliases": ["fieldname"]
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "f",
        "summary": "Type of the field.",
        "description": "You can't use this command to create a custom metadata type field of type \"Metadata Relationship\". Use the Salesforce Setup UI instead.",
        "required": true,
        "multiple": false,
        "options": [
          "Checkbox",
          "Date",
          "DateTime",
          "Email",
          "Number",
          "Percent",
          "Phone",
          "Picklist",
          "Text",
          "TextArea",
          "LongTextArea",
          "Url"
        ],
        "aliases": ["fieldtype"]
      },
      "picklist-values": {
        "name": "picklist-values",
        "type": "option",
        "char": "p",
        "summary": "Picklist values; required for picklist fields.",
        "multiple": true,
        "aliases": ["picklistvalues"],
        "delimiter": ","
      },
      "decimal-places": {
        "name": "decimal-places",
        "type": "option",
        "char": "s",
        "summary": "Number of decimal places to use for number or percent fields.",
        "description": "The value must be greater than or equal to zero. Default value is 0.",
        "multiple": false,
        "default": 0,
        "aliases": ["decimalplaces"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the field.",
        "multiple": false
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created field definition files.",
        "description": "New files are automatically created in the \"fields\" directory. The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": "",
        "aliases": ["outputdir", "outputdirectory"]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "cmdt:generate:fromorg",
    "summary": "Generate a custom metadata type and all its records from a Salesforce object.",
    "description": "Use this command to migrate existing custom objects or custom settings in an org to custom metadata types. If a field of the Salesforce object is of an unsupported type, the field type is automatically converted to text. Run \"<%= config.bin %> cmdt generate field --help\" to see the list of supported cmdt field types, listed in the --type flag summary. Use the --ignore-unsupported to ignore these fields.\n\nThis command creates the metadata files that describe the new custom metadata type and its fields in the \"force-app/main/default/objects/TypeName__mdt\" directory by default, where \"TypeName\" is the value of the required --dev-name flag. Use --type-output-directory to create them in a different directory.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a custom metadata type from a custom object called MySourceObject__c in your default org:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c",
      "Generate a custom metadata type from a custom object in an org with alias my-scratch-org; ignore unsupported field types instead of converting them to text:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --ignore-unsupported --target-org my-scratch-org",
      "Generate a protected custom metadata type from a custom object:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --visibility Protected",
      "Generate a protected custom metadata type from a custom setting with a specific singular and plural label:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --label \"My CMDT\" --plural-label \"My CMDTs\" --sobject MySourceSetting__c --visibility Protected",
      "Generate a custom metadata type and put the resulting metadata files in the specified directory:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --type-output-directory path/to/my/cmdt/directory",
      "Generate a custom metadata type and put the resulting record metadata file(s) in the specified directory:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --records-output-dir path/to/my/cmdt/record/directory"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "dev-name": {
        "name": "dev-name",
        "type": "option",
        "char": "n",
        "summary": "Name of the custom metadata type.",
        "required": true,
        "multiple": false,
        "aliases": ["devname"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the custom metadata type.",
        "multiple": false
      },
      "plural-label": {
        "name": "plural-label",
        "type": "option",
        "char": "p",
        "summary": "Plural version of the label value; if blank, uses label.",
        "multiple": false,
        "aliases": ["plurallabel"]
      },
      "visibility": {
        "name": "visibility",
        "type": "option",
        "char": "v",
        "summary": "Who can see the custom metadata type.",
        "description": "For more information on what each option means, see this topic in Salesforce Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui_create.htm&type=5.",
        "multiple": false,
        "options": ["PackageProtected", "Protected", "Public"],
        "default": "Public"
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the source Salesforce object used to generate the custom metadata type.",
        "required": true,
        "multiple": false,
        "aliases": ["sobjectname"]
      },
      "ignore-unsupported": {
        "name": "ignore-unsupported",
        "type": "boolean",
        "char": "i",
        "summary": "Ignore unsupported field types.",
        "description": "In this context, \"ignore\" means that the fields aren't created. The default behavior is to create fields of type text and convert the field values to text.",
        "allowNo": false,
        "aliases": ["ignoreunsupported"]
      },
      "type-output-directory": {
        "name": "type-output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created custom metadata type files.",
        "multiple": false,
        "default": "force-app/main/default/objects",
        "aliases": ["typeoutputdir"]
      },
      "records-output-dir": {
        "name": "records-output-dir",
        "type": "option",
        "char": "r",
        "summary": "Directory to store newly-created custom metadata record files.",
        "multiple": false,
        "default": "force-app/main/default/customMetadata",
        "aliases": ["recordsoutputdir"]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "cmdt:generate:record",
    "summary": "Generate a new record for a given custom metadata type in the current project.",
    "description": "The custom metadata type must already exist in your project. You must specify a name for the new record. Use name=value pairs to specify the values for the fields, such as MyTextField=\"some text here\" or MyNumberField=32.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a record metadata file for custom metadata type 'MyCMT' with specified values for two custom fields:\n<%= config.bin %> <%= command.id %> --type-name MyCMT__mdt --record-name MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar",
      "Create a protected record metadata file for custom metadata type 'MyCMT' with a specific label and values specified for two custom fields:\n<%= config.bin %> <%= command.id %> --type-name MyCMT__mdt --record-name MyRecord --label \"My Record\" --protected true My_Custom_Field_1=Foo My_Custom_Field_2=Bar"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "type-name": {
        "name": "type-name",
        "type": "option",
        "char": "t",
        "summary": "API name of the custom metadata type to create a record for; must end in \"__mdt\".",
        "required": true,
        "multiple": false,
        "aliases": ["typename"]
      },
      "record-name": {
        "name": "record-name",
        "type": "option",
        "char": "n",
        "summary": "Name of the new record.",
        "required": true,
        "multiple": false,
        "aliases": ["recordname"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Label for the new record.",
        "multiple": false
      },
      "protected": {
        "name": "protected",
        "type": "option",
        "char": "p",
        "summary": "Protect the record when it's in a managed package.",
        "description": "Protected records can only be accessed by code in the same managed package namespace.",
        "multiple": false,
        "options": ["true", "false"],
        "default": "false"
      },
      "input-directory": {
        "name": "input-directory",
        "type": "option",
        "char": "i",
        "summary": "Directory from which to get the custom metadata type definition from.",
        "multiple": false,
        "default": "force-app/main/default/objects",
        "aliases": ["inputdir", "inputdirectory"]
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created custom metadata record files.",
        "multiple": false,
        "default": "force-app/main/default/customMetadata",
        "aliases": ["outputdir", "outputdirectory"]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "cmdt:generate:records",
    "summary": "Generate new custom metadata type records from a CSV file.",
    "description": "The custom metadata type must already exist in your project. By default, the Name column is used to determine the record name; use the --name-column flag to specify a different column.",
    "strict": true,
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate record metadata files from values in a CSV file for the custom metadata type MyCmdt. Use 'Name' as the column that specifies the record name:\n<%= config.bin %> <%= command.id %> --csv path/to/my.csv --type-name MyCmdt",
      "Generate record metadata files from a CSV file in the directory different from the default, and use 'PrimaryKey' as the column that specifies the record name:\n<%= config.bin %> <%= command.id %> --csv path/to/my.csv --type-name MyCmdt --input-directory path/to/my/cmdt/directory --name-column \"PrimaryKey\""
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "csv": {
        "name": "csv",
        "type": "option",
        "char": "f",
        "summary": "Pathname of the CSV file.",
        "required": true,
        "multiple": false,
        "aliases": ["filepath"]
      },
      "type-name": {
        "name": "type-name",
        "type": "option",
        "char": "t",
        "summary": "API name of the custom metadata type to create a record for.",
        "description": "The '__mdt' suffix is appended to the end of the name if it's omitted.",
        "required": true,
        "multiple": false,
        "aliases": ["typename"]
      },
      "input-directory": {
        "name": "input-directory",
        "type": "option",
        "char": "i",
        "summary": "Directory from which to get the custom metadata type definition from.",
        "multiple": false,
        "default": "force-app/main/default/objects",
        "aliases": ["inputdir", "inputdirectory"]
      },
      "output-directory": {
        "name": "output-directory",
        "type": "option",
        "char": "d",
        "summary": "Directory to store newly-created custom metadata record files.",
        "multiple": false,
        "default": "force-app/main/default/customMetadata",
        "aliases": ["outputdir", "outputdirectory"]
      },
      "name-column": {
        "name": "name-column",
        "type": "option",
        "char": "n",
        "summary": "Column used to determine the name of the record.",
        "multiple": false,
        "default": "Name",
        "aliases": ["namecolumn"]
      }
    },
    "args": {},
    "requiresProject": true,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "commands",
    "description": "list all the commands",
    "strict": true,
    "pluginName": "@oclif/plugin-commands",
    "pluginAlias": "@oclif/plugin-commands",
    "pluginType": "link",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "hidden": {
        "name": "hidden",
        "type": "boolean",
        "description": "show hidden commands",
        "allowNo": false
      },
      "tree": {
        "name": "tree",
        "type": "boolean",
        "description": "show tree of commands",
        "allowNo": false
      },
      "columns": {
        "name": "columns",
        "type": "option",
        "description": "only show provided columns (comma-separated)",
        "multiple": false,
        "exclusive": ["extended"]
      },
      "sort": {
        "name": "sort",
        "type": "option",
        "description": "property to sort by (prepend '-' for descending)",
        "multiple": false
      },
      "filter": {
        "name": "filter",
        "type": "option",
        "description": "filter property by partial string matching, ex: name=foo",
        "multiple": false
      },
      "csv": {
        "name": "csv",
        "type": "boolean",
        "description": "output is csv format [alias: --output=csv]",
        "allowNo": false,
        "exclusive": ["no-truncate"]
      },
      "output": {
        "name": "output",
        "type": "option",
        "description": "output in a more machine friendly format",
        "multiple": false,
        "options": ["csv", "json", "yaml"],
        "exclusive": ["no-truncate", "csv"]
      },
      "extended": {
        "name": "extended",
        "type": "boolean",
        "char": "x",
        "description": "show extra columns",
        "allowNo": false,
        "exclusive": ["columns"]
      },
      "no-truncate": {
        "name": "no-truncate",
        "type": "boolean",
        "description": "do not truncate output to fit screen",
        "allowNo": false,
        "exclusive": ["csv"]
      },
      "no-header": {
        "name": "no-header",
        "type": "boolean",
        "description": "hide table header from output",
        "allowNo": false,
        "exclusive": ["csv"]
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_baseFlags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean",
        "name": "json"
      }
    },
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean",
        "name": "help"
      },
      "hidden": {
        "description": "show hidden commands",
        "allowNo": false,
        "type": "boolean",
        "name": "hidden"
      },
      "tree": {
        "description": "show tree of commands",
        "allowNo": false,
        "type": "boolean",
        "name": "tree"
      },
      "columns": {
        "exclusive": ["extended"],
        "description": "only show provided columns (comma-separated)",
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "columns"
      },
      "sort": {
        "description": "property to sort by (prepend '-' for descending)",
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "sort"
      },
      "filter": {
        "description": "filter property by partial string matching, ex: name=foo",
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "filter"
      },
      "csv": {
        "exclusive": ["no-truncate"],
        "description": "output is csv format [alias: --output=csv]",
        "allowNo": false,
        "type": "boolean",
        "name": "csv"
      },
      "output": {
        "exclusive": ["no-truncate", "csv"],
        "description": "output in a more machine friendly format",
        "options": ["csv", "json", "yaml"],
        "input": [],
        "multiple": false,
        "type": "option",
        "name": "output"
      },
      "extended": {
        "exclusive": ["columns"],
        "char": "x",
        "description": "show extra columns",
        "allowNo": false,
        "type": "boolean",
        "name": "extended"
      },
      "no-truncate": {
        "exclusive": ["csv"],
        "description": "do not truncate output to fit screen",
        "allowNo": false,
        "type": "boolean",
        "name": "no-truncate"
      },
      "no-header": {
        "exclusive": ["csv"],
        "description": "hide table header from output",
        "allowNo": false,
        "type": "boolean",
        "name": "no-header"
      }
    },
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "community:create",
    "summary": "Create an Experience Cloud site using a template.",
    "description": "See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.com/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help for more information about the different template\ntypes available for Experience Cloud.\n\nWhen creating a site with the Build Your Own (LWR) template, you must also specify the AuthenticationType value using the format templateParams.AuthenticationType=value, where value is AUTHENTICATED, UNAUTHENTICATED, or AUTHENTICATED_WITH_PUBLIC_ACCESS. Name and values are case-sensitive. See 'ExperienceBundle' in the Metadata API Developer Guide for more information. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_experiencebundle.htm)\n\nWhen you execute this command, it creates the site in preview status, which means that it isn't yet live. After you finish building your site, you can make it live.\n\nIf you have an Experience Builder site, publish the site using the \"community publish\" command to make it live.\n\nIf you have a Salesforce Tabs + Visualforce site, activate the site to make it live by updating the status field of the Network type in the Metadata API. Alternatively, in Experience Workspaces, go to Administration | Settings, and click Activate.\n\nFor Experience Builder sites, activating the site just sends out a welcome email to site members.",
    "strict": true,
    "pluginName": "@salesforce/plugin-community",
    "pluginAlias": "@salesforce/plugin-community",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create an Experience Cloud site using template 'Customer Service' and URL path prefix 'customers':\n<%= config.bin %> <%= command.id %> --name 'My Customer Site' --template-name 'Customer Service' --url-path-prefix customers --description 'My customer site'",
      "Create a site using 'Partner Central' template:\n<%= config.bin %> <%= command.id %> --name partnercentral --template-name 'Partner Central' --url-path-prefix partners",
      "Create a site using the 'Build Your Own (LWR)' template with authentication type of UNAUTHENTICATED:\n<%= config.bin %> <%= command.id %> --name lwrsite --template-name 'Build Your Own (LWR)' --url-path-prefix lwrsite templateParams.AuthenticationType=UNAUTHENTICATED"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the site to create.",
        "required": true,
        "multiple": false
      },
      "template-name": {
        "name": "template-name",
        "type": "option",
        "char": "t",
        "summary": "Template to use to create a site.",
        "description": "An example of a template is Customer Service. Run the \"community template list\" command to see which templates are available in your org.",
        "required": true,
        "multiple": false,
        "aliases": ["templatename"]
      },
      "url-path-prefix": {
        "name": "url-path-prefix",
        "type": "option",
        "char": "p",
        "summary": "URL to append to the domain created when Digital Experiences was enabled for this org.",
        "description": "For example, if your domain name is https://MyDomainName.my.site.com and you create a customer site, enter 'customers' to create the unique URL https://MyDomainName.my.site.com/customers.",
        "required": true,
        "multiple": false,
        "aliases": ["urlpathprefix"]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Description of the site.",
        "description": "The description displays in Digital Experiences - All Sites in Setup and helps with site identification.",
        "multiple": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      }
    },
    "args": {},
    "validationPatterns": ["name", "urlPathPrefix", "templateName", "description", "templateParams(\\.\\w+)+"],
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "community:list:template",
    "summary": "Retrieve the list of templates available in your org.",
    "description": "See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.com/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help for more information about the different template types available for Experience Cloud.",
    "strict": true,
    "pluginName": "@salesforce/plugin-community",
    "pluginAlias": "@salesforce/plugin-community",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve the template list from an org with alias my-scratch-org:\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "community:publish",
    "summary": "Publish an Experience Builder site to make it live.",
    "description": "Each time you publish it, you update the live site with the most recent updates. When you publish an Experience Builder site for the first time, you make the site's URL live and enable login access for site members.\n\nAdditionally, to send a welcome email to all site members, you must activate the site. (Activation is also required to successfully set up SEO for Experience Builder sites.) To activate a site, update the status field of the Network type in the Metadata API. Alternatively, in Experience Workspaces, go to Administration | Settings, and click Activate.\n\nSubsequently, each time you publish the site, you update the live site with all changes made to the site since it was last published.\n\nAn email notification informs you when your changes are live.",
    "strict": true,
    "pluginName": "@salesforce/plugin-community",
    "pluginAlias": "@salesforce/plugin-community",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Publish the Experience Builder site with name \"My Customer Site':\n<%= config.bin %> <%= command.id %> --name 'My Customer Site'"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the Experience Builder site to publish.",
        "required": true,
        "multiple": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "config:get",
    "description": "get config var values for given names\nGets the Salesforce CLI configuration values for your default scratch org, your default Dev Hub org, your default instance URL, or any combination of the three. To see your default scratch org username, include 'defaultusername'.\nTo see your default Dev Hub, include 'defaultdevhubusername'.\nTo see your default instance URL, include 'instanceUrl'.\nTo see the locations where your values are set, include the --verbose flag.",
    "strict": true,
    "usage": "config:get [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-config",
    "pluginAlias": "@salesforce/plugin-config",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx config:get defaultusername",
      "$ sfdx config:get defaultusername defaultdevhubusername instanceUrl",
      "$ sfdx config:get defaultusername defaultdevhubusername --verbose"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "verbose": {
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "config:list",
    "description": "lists the config variables that the Salesforce CLI uses for various commands and tasks.",
    "strict": true,
    "usage": "config:list [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-config",
    "pluginAlias": "@salesforce/plugin-config",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "config:set",
    "description": "sets the configuration variables that the Salesforce CLI uses for various commands and tasks.\n Local variables apply only to your current project. Global variables apply in any directory.",
    "strict": true,
    "usage": "config:set name=value... [-g] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-config",
    "pluginAlias": "@salesforce/plugin-config",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx config:set defaultusername=me@my.org defaultdevhubusername=me@myhub.org",
      "$ sfdx config:set defaultdevhubusername=me@myhub.org -g"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "global": {
        "name": "global",
        "type": "boolean",
        "char": "g",
        "description": "set config var globally (to be used from any directory)",
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "varargs": false,
    "flagsConfig": {
      "global": {
        "kind": "boolean",
        "char": "g",
        "description": "set config var globally (to be used from any directory)",
        "longDescription": "Sets the configuration variables globally, so they can be used from any directory.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "config:unset",
    "description": "unsets the local and global configuration variables for the Salesforce CLI.\n Local variables apply only to your current project. Global variables apply in any directory.",
    "strict": true,
    "usage": "config:unset [-g] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-config",
    "pluginAlias": "@salesforce/plugin-config",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx config:unset defaultusername defaultdevhubusername",
      "$ sfdx config:unset defaultdevhubusername -g"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "global": {
        "name": "global",
        "type": "boolean",
        "char": "g",
        "description": "unset config var globally (to be used from any directory)",
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "global": {
        "kind": "boolean",
        "char": "g",
        "description": "unset config var globally (to be used from any directory)",
        "longDescription": "Unsets the configuration variables globally, so they can be used from any directory.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "data:create:record",
    "summary": "Create and insert a record into a Salesforce or Tooling API object.",
    "description": "You must specify a value for all required fields of the object.\n\nWhen specifying fields, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command inserts a record into Salesforce objects by default. Use the --use-tooling-api flag to insert into a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Insert a record into the Account object of your default org; only the required Name field has a value:\n<%= config.bin %> <%= command.id %> --sobject Account --values \"Name=Acme\"",
      "Insert an Account record with values for two fields, one value contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --values \"Name='Universal Containers' Website=www.example.com\" --target-org my-scratch",
      "Insert a record into the Tooling API object TraceFlag:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --values \"DebugLevelId=7dl170000008U36AAE StartDate=2022-12-15T00:26:04.000+0000 ExpirationDate=2022-12-15T00:56:04.000+0000 LogType=CLASS_TRACING TracedEntityId=01p17000000R6bLAAS\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that you're inserting a record into.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjecttype"]
      },
      "values": {
        "name": "values",
        "type": "option",
        "char": "v",
        "summary": "Values for the flags in the form <fieldName>=<value>, separate multiple pairs with spaces.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can insert a record in a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["usetoolingapi"]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:delete:bulk",
    "summary": "Bulk delete records from an org using a CSV file.",
    "description": "The CSV file must have only one column (\"Id\") and then the list of record IDs you want to delete, one ID per line.\n\nWhen you execute this command, it starts a job and one or more batches, displays their IDs, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"<%= config.bin %> data resume\" command. A single job can contain many batches, depending on the length of the CSV file.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Bulk delete Account records using the list of IDs in the \"files/delete.csv\" file:\n<%= config.bin %> <%= command.id %> --sobject Account --file files/delete.csv",
      "Bulk delete records from a custom object and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/delete.csv --wait 5"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "CSV file that contains the IDs of the records to delete.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["csvfile"]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce object, either standard or custom, that you want to delete records from.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjecttype"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:delete:record",
    "summary": "Deletes a single record from a Salesforce or Tooling API object.",
    "description": "Specify the record you want to delete with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the delete fails; the error displays how many records were found.\n\nWhen specifying field-value pairs, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command deletes a record from Salesforce objects by default. Use the --use-tooling-api flag to delete from a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a record from Account with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 00180XX",
      "Delete a record from Account whose name equals \"Acme\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name=Acme\"",
      "Delete a record from Account identified with two field values, one that contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Universal Containers' Phone='(123) 456-7890'\" --target-org myscratch",
      "Delete a record from the Tooling API object TraceFlag with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --record-id 7tf8c"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that you're deleting a record from.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjecttype"]
      },
      "record-id": {
        "name": "record-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the record you’re deleting.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjectid"]
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to delete.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can delete a record from a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["usetoolingapi"]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:export:tree",
    "summary": "Export data from an org into one or more JSON files.",
    "description": "Specify a SOQL query, either directly at the command line or read from a file, to retrieve the data you want to export. The exported data is written to JSON files in sObject tree format, which is a collection of nested, parent-child records with a single root record. Use these JSON files to import data into an org with the \"<%= config.bin %> data import tree\" command.\n\nIf your SOQL query references multiple objects, the command generates a single JSON file by default. You can specify the --plan flag to generate separate JSON files for each object and a plan definition file that aggregates them. You then specify just this plan definition file when you import the data into an org.\n\nThe SOQL query can return a maximum of 2,000 records. For more information, see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm).",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Export records retrieved with the specified SOQL query into a single JSON file in the current directory; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, (SELECT Name, Address__c FROM Properties__r) FROM Broker__c\"",
      "Export data using a SOQL query in the \"query.txt\" file and generate JSON files for each object and a plan that aggregates them:\n<%= config.bin %> <%= command.id %> --query query.txt --plan",
      "Prepend \"export-demo\" before each generated file and generate the files in the \"export-out\" directory; run the command on the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --query query.txt --plan --prefix export-demo --output-dir export-out --target-org my-scratch"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "summary": "SOQL query, or filepath of a file that contains the query, to retrieve records.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "plan": {
        "name": "plan",
        "type": "boolean",
        "char": "p",
        "summary": "Generate multiple sObject tree files and a plan definition file for aggregated import.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "prefix": {
        "name": "prefix",
        "type": "option",
        "char": "x",
        "summary": "Prefix of generated files.",
        "multiple": false,
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory in which to generate the JSON files; default is current directory.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:get:record",
    "summary": "Retrieve and display a single record of a Salesforce or Tooling API object.",
    "description": "Specify the record you want to retrieve with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the command fails; the error displays how many records were found.\n\nWhen specifying field-value pairs, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThe command displays all the record's fields and their values, one field per terminal line. Fields with no values are displayed as \"null\".\n\nThis command retrieves a record from Salesforce objects by default. Use the --use-tooling-api flag to retrieve from a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve and display a record from Account with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 00180XX",
      "Retrieve a record from Account whose name equals \"Acme\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name=Acme\"",
      "Retrieve a record from Account identified with two field values, one that contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Universal Containers' Phone='(123) 456-7890'\" --target-org myscratch",
      "Retrieve a record from the Tooling API object TraceFlag with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --record-id 7tf8c"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that you're retrieving a record from.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjecttype"]
      },
      "record-id": {
        "name": "record-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the record you’re retrieving.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjectid"]
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to display.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can retrieve a record from a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["usetoolingapi"]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:import:tree",
    "summary": "Import data from one or more JSON files into an org.",
    "description": "The JSON files that contain the data are in sObject tree format, which is a collection of nested, parent-child records with a single root record. Use the \"<%= config.bin %> data export tree\" command to generate these JSON files.\n\nIf you used the --plan flag when exporting the data to generate a plan definition file, use the --plan flag to reference the file when you import. If you're not using a plan, use the --files flag to list the files. If you specify multiple JSON files that depend on each other in a parent-child relationship, be sure you list them in the correct order.\n\nThe sObject Tree API supports requests that contain up to 200 records. For more information, see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm)",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Import the records contained in two JSON files into the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --files Contact.json,Account.json --target-org my-scratch",
      "Import records using a plan definition file into your default org:\n<%= config.bin %> <%= command.id %> --plan Account-Contact-plan.json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "files": {
        "name": "files",
        "type": "option",
        "char": "f",
        "summary": "Comma-separated and in-order JSON files that contain the records, in sObject tree format, that you want to insert.",
        "multiple": true,
        "exclusive": ["plan"],
        "deprecateAliases": true,
        "aliases": ["sobjecttreefiles"],
        "delimiter": ","
      },
      "plan": {
        "name": "plan",
        "type": "option",
        "char": "p",
        "summary": "Plan definition file to insert multiple data files.",
        "multiple": false,
        "deprecateAliases": true
      },
      "content-type": {
        "name": "content-type",
        "type": "option",
        "char": "c",
        "summary": "Content type of import files if their extention is not .json.",
        "hidden": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["contenttype"]
      },
      "config-help": {
        "name": "config-help",
        "type": "boolean",
        "summary": "Display schema information for the --plan configuration file to stdout; if you specify this flag, all other flags except --json are ignored.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["confighelp"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:query",
    "summary": "Execute a SOQL query.",
    "description": "Specify the SOQL query at the command line with the --query flag or read the query from a file with the --file flag.\n\nIf your query returns more than 10,000 records, specify the --bulk flag. The command then runs the query using Bulk API 2.0, which has higher limits than the default API used by the command.\n\nWhen using --bulk, the command waits 3 minutes by default for the query to complete. Use the --wait parameter to specify a different number of minutes to wait, or set --wait to 0 to immediately return control to the terminal. If you set --wait to 0, or you use the --async flag, or the command simply times out, the command displays an ID. Pass this ID to the the \"data query resume\" command using the --bulk-query-id flag to get the results; pass the ID to the \"data resume\" command to get the job status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Specify a SOQL query at the command line; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, Account.Name FROM Contact\"",
      "Read the SOQL query from a file called \"query.txt\"; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --file query.txt --target-org my-scratch",
      "Use Tooling API to run a query on the ApexTrigger Tooling API object:\n<%= config.bin %> <%= command.id %> --query \"SELECT Name FROM ApexTrigger\" --use-tooling-api",
      "Use Bulk API 2.0 to run a query that returns many rows, and return control to the terminal immediately:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id FROM Contact\" --bulk --wait 0"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "summary": "SOQL query to execute.",
        "multiple": false,
        "deprecateAliases": true
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "File that contains the SOQL query.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["soqlqueryfile"]
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can run queries on Tooling API objects.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["usetoolingapi"]
      },
      "bulk": {
        "name": "bulk",
        "type": "boolean",
        "char": "b",
        "summary": "Use Bulk API 2.0 to run the query.",
        "allowNo": false,
        "exclusive": ["use-tooling-api"],
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Time to wait for the command to finish, in minutes.",
        "multiple": false,
        "dependsOn": ["bulk"],
        "exclusive": ["async"],
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Use Bulk API 2.0, but don't wait for the job to complete.",
        "allowNo": false,
        "dependsOn": ["bulk"],
        "exclusive": ["wait"],
        "deprecateAliases": true
      },
      "result-format": {
        "name": "result-format",
        "type": "option",
        "char": "r",
        "summary": "Format to display the results; the --json flag overrides this flag.",
        "multiple": false,
        "options": ["human", "json", "csv"],
        "default": "human",
        "deprecateAliases": true,
        "aliases": ["resultformat"]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:query:resume",
    "summary": "View the status of a bulk query.",
    "description": "Run this command using the job ID returned from the \"<%= config.bin %> data query --bulk\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "View the status of a bulk query with the specified ID:\n<%= config.bin %> <%= command.id %> --bulk-query-id 7500x000005BdFzXXX"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "result-format": {
        "name": "result-format",
        "type": "option",
        "char": "r",
        "summary": "Format to display the results; the --json flag overrides this flag.",
        "multiple": false,
        "options": ["human", "json", "csv"],
        "default": "human",
        "deprecateAliases": true,
        "aliases": ["resultformat"]
      },
      "bulk-query-id": {
        "name": "bulk-query-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the bulk query.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["bulkqueryid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:resume",
    "summary": "View the status of a bulk data load job or batch.",
    "description": "Run this command using the job ID or batch ID returned from the \"<%= config.bin %> data delete bulk\" or \"<%= config.bin %> data upsert bulk\" commands.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "View the status of a bulk load job:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "View the status of a bulk load job and a specific batches:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA --batch-id 751xx000000005nAAA"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "batch-id": {
        "name": "batch-id",
        "type": "option",
        "char": "b",
        "summary": "ID of the batch whose status you want to view; you must also specify the job ID.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["batchid"]
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the job whose status you want to view.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["jobid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:sosl:query",
    "description": "Runs a sosl query.  SOSL Reference: https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_sosl_syntax.htm",
    "usage": "data:sosl:query -q <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/sfdx-sosl",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx force:data:sosl:query -q \"find {something}\"\n        ",
      "sfdx force:data:sosl:query -q \"find {Jack} returning User(Name), Account(Name),Contact(FirstName,LastName,Department)\" -u platformers\n// search across several objects with different results fields on a specified org\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "description": "SOSL query",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/sfdx-sosl",
    "flagsConfig": {
      "query": {
        "kind": "string",
        "char": "q",
        "description": "SOSL query",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "data:update:record",
    "summary": "Updates a single record of a Salesforce or Tooling API object.",
    "description": "Specify the record you want to update with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the delete fails; the error displays how many records were found.\n\nWhen using field-value pairs for both identifying the record and specifiyng the new field values, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command updates a record in Salesforce objects by default. Use the --use-tooling-api flag to update a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Update the Name field of an Account record with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 001D0 --values \"Name=NewAcme\"",
      "Update the Name field of an Account record whose current name is 'Old Acme':\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Old Acme'\" --values \"Name='New Acme'\"",
      "Update the Name and Website fields of an Account record with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 001D0 --values \"Name='Acme III' Website=www.example.com\"",
      "Update the ExpirationDate field of a record of the Tooling API object TraceFlag using the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> -t --sobject TraceFlag --record-id 7tf170000009cUBAAY --values \"ExpirationDate=2017-12-01T00:58:04.000+0000\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce or Tooling API object that contains the record you're updating.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjecttype"]
      },
      "record-id": {
        "name": "record-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the record you’re updating.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjectid"]
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to update.",
        "multiple": false,
        "deprecateAliases": true
      },
      "values": {
        "name": "values",
        "type": "option",
        "char": "v",
        "summary": "Fields that you're updating, in the format of <fieldName>=<value> pairs.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API so you can update a record in a Tooling API object.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["usetoolingapi"]
      },
      "perflog": {
        "name": "perflog",
        "type": "boolean",
        "summary": "Get API performance data.",
        "hidden": true,
        "allowNo": false,
        "deprecated": {
          "version": "57"
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "data:upsert:bulk",
    "summary": "Bulk upsert records to an org from a CSV file.",
    "description": "An upsert refers to inserting a record into a Salesforce object if the record doesn't already exist, or updating it if it does exist.\n\nWhen you execute this command, it starts a job and one or more batches, displays their IDs, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"<%= config.bin %> data resume\" command. A single job can contain many batches, depending on the length of the CSV file.\n\nSee \"Prepare CSV Files\" in the Bulk API Developer Guide for details on formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_csv_preparing.htm)\n\nBy default, the job runs the batches in parallel, which we recommend. You can run jobs serially by specifying the --serial flag. But don't process data in serial mode unless you know this would otherwise result in lock timeouts and you can't reorganize your batches to avoid the locks.",
    "strict": true,
    "pluginName": "@salesforce/plugin-data",
    "pluginAlias": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Bulk upsert records to the Contact object:\n<%= config.bin %> --sobject Contact --file files/contacts.csv --external-id Id",
      "Bulk upsert records to a custom object and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/file.csv --external-id MyField__c --wait 5"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "external-id": {
        "name": "external-id",
        "type": "option",
        "char": "i",
        "summary": "Name of the external ID field, or the Id field.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["externalid"]
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "summary": "CSV file that contains the records to upsert.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["csvfile"]
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the Salesforce object, either standard or custom, that you want to upsert records to.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sobjecttype"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "serial": {
        "name": "serial",
        "type": "boolean",
        "char": "r",
        "summary": "Run batches in serial mode.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "dependabot:automerge",
    "summary": "automatically merge one green, mergeable PR up to the specified maximum bump type",
    "description": "automatically merge one green, mergeable PR up to the specified maximum bump type",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --max-version-bump patch",
      "<%= config.bin %> <%= command.id %> --max-version-bump minor",
      "<%= config.bin %> <%= command.id %> --max-version-bump major"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "owner": {
        "name": "owner",
        "type": "option",
        "char": "o",
        "summary": "the organization that the repository belongs to. This defaults to the owner specified in the package.json",
        "multiple": false,
        "dependsOn": ["repo"]
      },
      "repo": {
        "name": "repo",
        "type": "option",
        "char": "r",
        "summary": "the repository you want to consolidate PRs on. This defaults to the repository specified in the package.json",
        "multiple": false,
        "dependsOn": ["owner"]
      },
      "max-version-bump": {
        "name": "max-version-bump",
        "type": "option",
        "char": "m",
        "description": "the maximum version bump you want to be included",
        "required": true,
        "multiple": false,
        "options": ["major", "minor", "patch"],
        "default": "minor"
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "only show what would happen if you consolidated dependabot PRs",
        "allowNo": false
      },
      "skip-ci": {
        "name": "skip-ci",
        "type": "boolean",
        "char": "s",
        "summary": "add [skip ci] to the merge commit title",
        "allowNo": false
      },
      "merge-method": {
        "name": "merge-method",
        "type": "option",
        "summary": "merge method to use",
        "multiple": false,
        "options": ["merge", "squash", "rebase"],
        "default": "merge"
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "dependabot:consolidate",
    "summary": "consolidate dependabot PRs into a single PR",
    "description": "consolidate dependabot PRs into a single PR",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --max-version-bump patch",
      "<%= config.bin %> <%= command.id %> --max-version-bump minor",
      "<%= config.bin %> <%= command.id %> --max-version-bump major"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "max-version-bump": {
        "name": "max-version-bump",
        "type": "option",
        "char": "m",
        "description": "the maximum version bump you want to be included",
        "required": true,
        "multiple": false,
        "options": ["major", "minor", "patch"],
        "default": "minor"
      },
      "base-branch": {
        "name": "base-branch",
        "type": "option",
        "char": "b",
        "summary": "name of the base branch for merging",
        "required": true,
        "multiple": false,
        "default": "main"
      },
      "target-branch": {
        "name": "target-branch",
        "type": "option",
        "char": "t",
        "summary": "name of the target branch for merging",
        "required": true,
        "multiple": false,
        "default": "consolidate-dependabot"
      },
      "ignore": {
        "name": "ignore",
        "type": "option",
        "summary": "ignore any PRs with titles that include this value",
        "multiple": true,
        "delimiter": ","
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "only show what would happen if you consolidated dependabot PRs",
        "allowNo": false
      },
      "no-pr": {
        "name": "no-pr",
        "type": "boolean",
        "summary": "do everything but create the PR",
        "allowNo": false
      },
      "owner": {
        "name": "owner",
        "type": "option",
        "char": "o",
        "summary": "the organization that the repository belongs to. This defaults to the owner specified in the package.json",
        "multiple": false
      },
      "repo": {
        "name": "repo",
        "type": "option",
        "char": "r",
        "summary": "the repository you want to consolidate PRs on. This defaults to the repository specified in the package.json",
        "multiple": false,
        "dependsOn": ["owner"]
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "doctor",
    "summary": "Gather CLI configuration data and run diagnostic tests to discover and report potential problems in your environment.",
    "description": "When you run the doctor command without parameters, it first displays a diagnostic overview of your environment. It then writes a detailed diagnosis to a JSON file in the current directory. Use the --outputdir to specify a different directory. To run diagnostic tests on a specific plugin, use the --plugin parameter. If the plugin isn't listening to the doctor, then you get a warning.\n\nUse the --command parameter to run a specific command in debug mode; the doctor writes both stdout and stderr to \\*.log files that you can provide to Salesforce Customer Support or attach to a GitHub issue.\n\nPlugin providers can also implement their own doctor diagnostic tests by listening to the \"sf-doctor\" event and running plugin specific tests that are then included in the doctor diagnostics log.",
    "strict": true,
    "pluginName": "@salesforce/plugin-info",
    "pluginAlias": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Run CLI doctor diagnostics:\n<%= config.bin %> doctor",
      "Run CLI doctor diagnostics and the specified command, and write the debug output to a file:\n<%= config.bin %> doctor --command \"force:org:list --all\"",
      "Run CLI doctor diagnostics for a specific plugin:\n<%= config.bin %> doctor --plugin @salesforce/plugin-source"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "command": {
        "name": "command",
        "type": "option",
        "char": "c",
        "summary": "Command to run in debug mode; results are written to a log file.",
        "multiple": false
      },
      "plugin": {
        "name": "plugin",
        "type": "option",
        "char": "p",
        "summary": "Specific plugin on which to run diagnostics.",
        "multiple": false
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory to save all created files rather than the current working directory.",
        "multiple": false,
        "aliases": ["outputdir", "o"]
      },
      "create-issue": {
        "name": "create-issue",
        "type": "boolean",
        "char": "i",
        "summary": "Create a new issue on our GitHub repo and attach all diagnostic results.",
        "allowNo": false,
        "aliases": ["createissue"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "org:create:sandbox",
    "summary": "Create a sandbox org.",
    "description": "There are two ways to create a sandbox org: specify a definition file that contains the sandbox options or use the --name and --license-type flags to specify the two required options. If you want to set an option other than name or license type, such as apexClassId, you must use a definition file.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "beta",
    "aliases": [],
    "examples": [
      "Create a sandbox org using a definition file and give it the alias \"MyDevSandbox\". The production org that contains the sandbox license has the alias \"prodOrg\".\n<%= config.bin %> <%= command.id %> -f config/dev-sandbox-def.json --alias MyDevSandbox --target-org prodOrg",
      "Create a sandbox org by directly specifying its name and type of license (Developer) instead of using a definition file. Set the sandbox org as your default.\n<%= config.bin %> <%= command.id %> --name mysandbox --license-type Developer --alias MyDevSandbox --target-org prodOrg --set-default"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a sandbox definition file.",
        "description": "The sandbox definition file is a blueprint for the sandbox. You can create different definition files for each sandbox type that you use in the development process. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_sandbox_definition.htm> for all the options you can specify in the defintion file.",
        "multiple": false,
        "exclusive": ["name", "license-type"],
        "deprecateAliases": true
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "s",
        "summary": "Set the sandbox org as your default org.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the sandbox org.",
        "description": "When you create a sandbox, the generated usernames are based on the usernames present in the production org. To ensure uniqueness, the new usernames are appended with the name of the sandbox. For example, the username \"user@example.com\" in the production org results in the username \"user@example.com.mysandbox\" in a sandbox named \"mysandbox\". When you set an alias for a sandbox org, it's assigned to the resulting username of the user running this command.",
        "multiple": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the sandbox org to be ready.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the \"<%= config.bin %> org resume sandbox\" command you run to check the status of the create. The displayed command includes the job ID for the running sandbox creation.",
        "helpValue": "<minutes>",
        "multiple": false,
        "exclusive": ["async"],
        "deprecateAliases": true
      },
      "poll-interval": {
        "name": "poll-interval",
        "type": "option",
        "char": "i",
        "summary": "Number of seconds to wait between retries.",
        "helpValue": "<seconds>",
        "multiple": false,
        "exclusive": ["async"],
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Request the sandbox creation, but don't wait for it to complete.",
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To check the status of the sandbox creation, run \"<%= config.bin %> org resume sandbox\".",
        "allowNo": false,
        "exclusive": ["wait", "poll-interval"],
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the sandbox org.",
        "description": "The name must be a unique alphanumeric string (10 or fewer characters) to identify the sandbox. You can’t reuse a name while a sandbox is in the process of being deleted.",
        "multiple": false,
        "exclusive": ["definition-file"],
        "deprecateAliases": true
      },
      "clone": {
        "name": "clone",
        "type": "option",
        "char": "c",
        "summary": "Name of the sandbox org to clone.",
        "description": "The value of clone must be an existing sandbox in the same target-org.",
        "multiple": false,
        "exclusive": ["license-type"],
        "deprecateAliases": true
      },
      "license-type": {
        "name": "license-type",
        "type": "option",
        "char": "l",
        "summary": "Type of sandbox license.",
        "multiple": false,
        "options": ["Developer", "Developer_Pro", "Partial", "Full"],
        "exclusive": ["definition-file", "clone"],
        "default": "Developer",
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "description": "When it creates the sandbox org, Salesforce copies the metadata, and optionally data, from your production org to the new sandbox org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "summary": "Don't prompt for confirmation about the sandbox configuration.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "no-track-source": {
        "name": "no-track-source",
        "type": "boolean",
        "summary": "Do not use source tracking for this sandbox.",
        "description": "We recommend you enable source tracking in Developer and Developer Pro sandbox, which is why it's the default behavior. Source tracking allows you to track the changes you make to your metadata, both in your local project and in the sandbox, and to detect any conflicts between the two.\n\nTo disable source tracking in the new sandbox, specify the --no-track-source flag. The main reason to disable source tracking is for performance. For example, while you probably want to deploy metadata and run Apex tests in your CI/CD jobs, you probably don't want to incur the costs of source tracking (checking for conflicts, polling the SourceMember object, various file system operations.) This is a good use case for disabling source tracking in the sandbox.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:create:scratch",
    "summary": "Create a scratch org.",
    "description": "There are two ways to create a scratch org: specify a definition file that contains the options or use the --edition flag to specify the one required option. If you want to set options other than the edition, such as org features or settings, you must use a definition file.\n\nYou must specify a Dev Hub to create a scratch org, either with the --target-dev-hub flag or by setting your default Dev Hub with the target-dev-hub configuration variable.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "beta",
    "aliases": [],
    "examples": [
      "Create a Developer edition scratch org using your default Dev Hub and give the scratch org an alias:\n<%= config.bin %> <%= command.id %> --edition=developer --alias my-scratch-org",
      "Specify the Dev Hub using its alias and a scratch org definition file. Set the scratch org as your default and specify that it expires in 3 days:\n<%= config.bin %> <%= command.id %> --target-dev-hub=MyHub --definition-file config/project-scratch-def.json --set-default --duration-days 3"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the scratch org.",
        "description": "New scratch orgs include one administrator by default. The admin user's username is auto-generated and looks something like test-wvkpnfm5z113@example.com. When you set an alias for a new scratch org, it's assigned this username.",
        "multiple": false,
        "deprecateAliases": true
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "summary": "Request the org, but don't wait for it to complete.",
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To resume the scratch org creation, run \"<%= config.bin %> org resume scratch\".",
        "allowNo": false,
        "deprecateAliases": true
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "d",
        "summary": "Set the scratch org as your default org",
        "allowNo": false,
        "deprecateAliases": true
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a scratch org definition file.",
        "description": "The scratch org definition file is a blueprint for the scratch org. It mimics the shape of an org that you use in the development life cycle, such as acceptance testing, packaging, or production. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file.htm> for all the option you can specify in the definition file.",
        "multiple": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "description": "Overrides the value of the target-dev-hub configuration variable, if set.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-ancestors": {
        "name": "no-ancestors",
        "type": "boolean",
        "char": "c",
        "summary": "Don't include second-generation managed package (2GP) ancestors in the scratch org.",
        "helpGroup": "Packaging",
        "allowNo": false,
        "deprecateAliases": true
      },
      "edition": {
        "name": "edition",
        "type": "option",
        "char": "e",
        "summary": "Salesforce edition of the scratch org.",
        "description": "The editions that begin with \"partner-\" are available only if the Dev Hub org is a Partner Business Org.",
        "multiple": false,
        "options": [
          "developer",
          "enterprise",
          "group",
          "professional",
          "partner-developer",
          "partner-enterprise",
          "partner-group",
          "partner-professional"
        ],
        "deprecateAliases": true
      },
      "no-namespace": {
        "name": "no-namespace",
        "type": "boolean",
        "char": "m",
        "summary": "Create the scratch org with no namespace, even if the Dev Hub has a namespace.",
        "helpGroup": "Packaging",
        "allowNo": false,
        "deprecateAliases": true
      },
      "duration-days": {
        "name": "duration-days",
        "type": "option",
        "char": "y",
        "summary": "Number of days before the org expires.",
        "helpValue": "<days>",
        "multiple": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the scratch org to be ready.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the job ID. To resume the scratch org creation, run the org resume scratch command and pass it the job ID.",
        "helpValue": "<minutes>",
        "multiple": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true
      },
      "client-id": {
        "name": "client-id",
        "type": "option",
        "char": "i",
        "summary": "Consumer key of the Dev Hub connected app.",
        "multiple": false,
        "deprecateAliases": true
      },
      "track-source": {
        "name": "track-source",
        "type": "boolean",
        "char": "t",
        "summary": "Use source tracking for this scratch org. Set --no-track-source to disable source tracking.",
        "description": "We recommend you enable source tracking in scratch orgs, which is why it's the default behavior. Source tracking allows you to track the changes you make to your metadata, both in your local project and in the scratch org, and to detect any conflicts between the two.\n\nTo disable source tracking in the new scratch org, specify the --no-track-source flag. The main reason to disable source tracking is for performance. For example, while you probably want to deploy metadata and run Apex tests in your CI/CD jobs, you probably don't want to incur the costs of source tracking (checking for conflicts, polling the SourceMember object, various file system operations.) This is a good use case for disabling source tracking in the scratch org.",
        "allowNo": true,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:delete:sandbox",
    "summary": "Delete a sandbox.",
    "description": "Salesforce CLI marks the org for deletion in the production org that contains the sandbox licenses and then deletes all local references to the org from your computer.\nSpecify a sandbox with either the username you used when you logged into it, or the alias you gave the sandbox when you created it. Run \"<%= config.bin %> org list\" to view all your orgs, including sandboxes, and their aliases.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "beta",
    "aliases": [],
    "examples": [
      "Delete a sandbox with alias my-sandbox:\n<%= config.bin %> <%= command.id %> --target-org=my-sandbox",
      "Specify a username instead of an alias:\n<%= config.bin %> <%= command.id %> --target-org=myusername@example.com.qa",
      "Delete the sandbox without prompting to confirm :\n<%= config.bin %> <%= command.id %> --target-org=my-sandbox --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Sandbox alias or login user.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:delete:scratch",
    "summary": "Delete a scratch org.",
    "description": "Salesforce CLI marks the org for deletion in the Dev Hub org and then deletes all local references to the org from your computer.\nSpecify a scratch org with either the username or the alias you gave the scratch org when you created it. Run \"<%= config.bin %> org list\" to view all your orgs, including scratch orgs, and their aliases.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "beta",
    "aliases": [],
    "examples": [
      "Delete a scratch org with alias my-scratch-org:\n<%= config.bin %> <%= command.id %> --target-org=my-scratch-org",
      "Specify a username instead of an alias:\n<%= config.bin %> <%= command.id %> --target-org=test-123456-abcdefg@example.com",
      "Delete the scratch org without prompting to confirm :\n<%= config.bin %> <%= command.id %> --target-org=my-scratch-org --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:resume:sandbox",
    "summary": "Check the status of a sandbox creation, and log in to it if it's ready.",
    "description": "Sandbox creation can take a long time. If the original \"<%= config.bin %> org create sandbox\" command either times out, or you specified the --async flag, the command displays a job ID. Use this job ID to check whether the sandbox creation is complete, and if it is, the command then logs into it.\n\nYou can also use the sandbox name to check the status or the --use-most-recent flag to use the job ID of the most recent sandbox creation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "beta",
    "aliases": [],
    "examples": [
      "Check the status of a sandbox creation using its name and specify a production org with alias \"prodOrg\":\n<%= config.bin %> <%= command.id %> --name mysandbox --target-org prodOrg",
      "Check the status using the job ID:\n<%= config.bin %> <%= command.id %> --job-id 0GRxxxxxxxx",
      "Check the status of the most recent sandbox create request:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the sandbox org to be ready.",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume checking the sandbox creation, rerun this command.",
        "helpValue": "<minutes>",
        "multiple": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the sandbox org.",
        "multiple": false,
        "exclusive": ["job-id"],
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the incomplete sandbox creation that you want to check the status of.",
        "description": "The job ID is valid for 24 hours after you start the sandbox creation.",
        "multiple": false,
        "exclusive": ["name"],
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "l",
        "summary": "Use the most recent sandbox create request.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "description": "When it creates the sandbox org, Salesforce copies the metadata, and optionally data, from your production org to the new sandbox org.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:resume:scratch",
    "summary": "Resume the creation of an incomplete scratch org.",
    "description": "When the original \"<%= config.bin %> org create scratch\" command either times out or is run with the --async flag, it displays a job ID.\n\nRun this command by either passing it a job ID or using the --use-most-recent flag to specify the most recent incomplete scratch org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Resume a scratch org create with a job ID:\n<%= config.bin %> <%= command.id %> --job-id 2SR3u0000008fBDGAY",
      "Resume your most recent incomplete scratch org:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "job-id": {
        "name": "job-id",
        "type": "option",
        "char": "i",
        "summary": "Job ID of the incomplete scratch org create that you want to resume.",
        "description": "The job ID is the same as the record ID of the incomplete scratch org in the ScratchOrgInfo object of the Dev Hub.\n\nThe job ID is valid for 24 hours after you start the scratch org creation.",
        "multiple": false,
        "deprecateAliases": true
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "type": "boolean",
        "char": "r",
        "summary": "Use the job ID of the most recent incomplete scratch org.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "force:apex:execute",
    "description": "executes anonymous Apex code\nExecutes one or more lines of anonymous Apex code entered on the command line, or executes the code in a local file.\nIf you don’t run this command from within a Salesforce DX project, —-targetusername is required.\nTo execute your code interactively, run this command with no parameters. At the prompt, enter all your Apex code; press CTRL-D when you're finished. Your code is then executed in a single execute anonymous request.\nFor more information, see \"Anonymous Blocks\" in the Apex Developer Guide.\n\n",
    "strict": true,
    "usage": "force:apex:execute [-f <filepath>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:apex:execute -u testusername@salesforce.org -f ~/test.apex",
      "$ sfdx force:apex:execute -f ~/test.apex",
      "$ sfdx force:apex:execute \nStart typing Apex code. Press the Enter key after each line, then press CTRL+D when finished."
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "apexcodefile": {
        "name": "apexcodefile",
        "type": "option",
        "char": "f",
        "description": "path to a local file that contains Apex code",
        "multiple": false
      }
    },
    "args": {},
    "longDescription": "Executes one or more lines of anonymous Apex code entered on the command line, or executes the code in a local file.\nIf you don’t run this command from within a Salesforce DX project, —-targetusername is required.\nTo execute your code interactively, run this command with no parameters. At the prompt, enter all your Apex code; press CTRL-D when you're finished. Your code is then executed in a single execute anonymous request.\nFor more information, see \"Anonymous Blocks\" in the Apex Developer Guide.\n\n",
    "requiresUsername": false,
    "flagsConfig": {
      "apexcodefile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to a local file that contains Apex code",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "kind": "enum",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "description": "logging level for this command invocation",
        "longDescription": "The logging level for this command invocation. Logs are stored in $HOME/.sfdx/sfdx.log.",
        "default": "warn",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:apex:log:get",
    "description": "fetch debug logs\nFetches the specified log or given number of most recent logs from the scratch org. \nTo get the IDs for your debug logs, run \"sfdx force:apex:log:list\". \nUse the --logid parameter to return a specific log. \nUse the --number parameter to return the specified number of recent logs.\nUse the --outputdir parameter to specify the directory to store the logs in.\nExecuting this command without parameters returns the most recent log.",
    "strict": true,
    "usage": "force:apex:log:get [-i <id>] [-n <number>] [-d <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:apex:log:get -i <log id>",
      "$ sfdx force:apex:log:get -i <log id> -u me@my.org",
      "$ sfdx force:apex:log:get -n 2 -c",
      "$ sfdx force:apex:log:get -d Users/Desktop/logs -n 2"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as JSON",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "logid": {
        "name": "logid",
        "type": "option",
        "char": "i",
        "description": "id of the log to display",
        "multiple": false
      },
      "number": {
        "name": "number",
        "type": "option",
        "char": "n",
        "description": "number of most recent logs to display",
        "multiple": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "directory for saving the log files",
        "multiple": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "longDescription": "Fetches the specified log or given number of most recent logs from the scratch org. \nTo get the IDs for your debug logs, run \"sfdx force:apex:log:list\". \nUse the --logid parameter to return a specific log. \nUse the --number parameter to return the specified number of recent logs.\nUse the --outputdir parameter to specify the directory to store the logs in.\nExecuting this command without parameters returns the most recent log.",
    "flagsConfig": {
      "json": {
        "kind": "boolean",
        "description": "format output as JSON",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "kind": "enum",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "description": "logging level for this command invocation",
        "longDescription": "The logging level for this command invocation. Logs are stored in $HOME/.sfdx/sfdx.log.",
        "default": "warn",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "type": "builtin"
      },
      "logid": {
        "kind": "id",
        "char": "i",
        "description": "id of the log to display",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "number": {
        "kind": "number",
        "char": "n",
        "min": 1,
        "max": 25,
        "description": "number of most recent logs to display",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputdir": {
        "kind": "string",
        "char": "d",
        "description": "directory for saving the log files",
        "longDescription": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:apex:log:list",
    "description": "display a list of IDs and general information about debug logs\nRun this command in a project to list the IDs and general information for all debug logs in your default org.\nTo fetch a specific log from your org, obtain the ID from this command's output, then run the “sfdx force:apex:log:get” command.",
    "strict": true,
    "usage": "force:apex:log:list [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx force:apex:log:list", "$ sfdx force:apex:log:list -u me@my.org"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as JSON",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "longDescription": "Run this command in a project to list the IDs and general information for all debug logs in your default org.\nTo fetch a specific log from your org, obtain the ID from this command's output, then run the “sfdx force:apex:log:get” command.",
    "flagsConfig": {
      "json": {
        "kind": "boolean",
        "description": "format output as JSON",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "kind": "enum",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "description": "logging level for this command invocation",
        "longDescription": "The logging level for this command invocation. Logs are stored in $HOME/.sfdx/sfdx.log.",
        "default": "warn",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:apex:log:tail",
    "description": "Follows active log\nActivates debug logging and displays logs in the terminal. You can also pipe the logs to a file.",
    "strict": true,
    "usage": "force:apex:log:tail [-c] [-d <string>] [-s] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:apex:log:tail",
      "$ sfdx force:apex:log:tail --debuglevel MyDebugLevel",
      "$ sfdx force:apex:log:tail -c -s"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as JSON.",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "Logging level for this command invocation",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "color": {
        "name": "color",
        "type": "boolean",
        "char": "c",
        "description": "Applies default colors to noteworthy log lines.",
        "allowNo": false
      },
      "debuglevel": {
        "name": "debuglevel",
        "type": "option",
        "char": "d",
        "description": "Debug level to set on the DEVELOPER_LOG trace flag for your user.",
        "multiple": false
      },
      "skiptraceflag": {
        "name": "skiptraceflag",
        "type": "boolean",
        "char": "s",
        "description": "Skips trace flag setup. Assumes that a trace flag and debug level are fully set up.",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "longDescription": "Activates debug logging and displays logs in the terminal. You can also pipe the logs to a file.",
    "flagsConfig": {
      "json": {
        "kind": "boolean",
        "description": "Format output as JSON.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "kind": "enum",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "description": "Logging level for this command invocation",
        "longDescription": "The logging level for this command invocation. Logs are stored in $HOME/.sfdx/sfdx.log.",
        "default": "warn",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "type": "builtin"
      },
      "color": {
        "kind": "boolean",
        "char": "c",
        "description": "Applies default colors to noteworthy log lines.",
        "allowNo": false,
        "type": "boolean"
      },
      "debuglevel": {
        "kind": "string",
        "char": "d",
        "description": "Debug level to set on the DEVELOPER_LOG trace flag for your user.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "skiptraceflag": {
        "kind": "boolean",
        "char": "s",
        "description": "Skips trace flag setup. Assumes that a trace flag and debug level are fully set up.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:apex:test:report",
    "description": "display test results for a specific asynchronous test run\nProvide a test run ID to display test results for an enqueued or completed asynchronous test run. The test run ID is displayed after running the \"sfdx force:apex:test:run\" command.",
    "strict": true,
    "usage": "force:apex:test:report -i <string> [-c] [-d <string>] [-r human|tap|junit|json] [-w <string>] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:apex:test:report -i <test run id>",
      "$ sfdx force:apex:test:report -i <test run id> -r junit",
      "$ sfdx force:apex:test:report -i <test run id> -c --json",
      "$ sfdx force:apex:test:report -i <test run id> -c -d <path to outputdir> -u me@myorg"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as JSON",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "[default: warn] logging level for this command invocation; logs are stored in $HOME/.sfdx/sfdx.log",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "testrunid": {
        "name": "testrunid",
        "type": "option",
        "char": "i",
        "description": "the ID of the test run",
        "required": true,
        "multiple": false
      },
      "codecoverage": {
        "name": "codecoverage",
        "type": "boolean",
        "char": "c",
        "description": "retrieves code coverage results",
        "allowNo": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "directory to store test result files",
        "multiple": false
      },
      "resultformat": {
        "name": "resultformat",
        "type": "option",
        "char": "r",
        "description": "Permissible values are: human, tap, junit, json",
        "helpValue": "(human|tap|junit|json)",
        "multiple": false,
        "options": ["human", "tap", "junit", "json"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "sets the streaming client socket timeout in minutes; specify a longer wait time if timeouts occur frequently",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "display Apex test processing details; if JSON is specified, processing details aren't displayed",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "longDescription": "Provide a test run ID to display test results for an enqueued or completed asynchronous test run. The test run ID is displayed after running the \"sfdx force:apex:test:run\" command.",
    "flagsConfig": {
      "testrunid": {
        "kind": "string",
        "char": "i",
        "description": "the ID of the test run",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "json": {
        "kind": "boolean",
        "description": "format output as JSON",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "kind": "enum",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "description": "[default: warn] logging level for this command invocation; logs are stored in $HOME/.sfdx/sfdx.log",
        "longDescription": "Permissible values are: trace, debug, info, warn, error, fatal, TRACE, DEBUG, INFO, WARN, ERROR, FATAL",
        "default": "warn",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "type": "builtin"
      },
      "codecoverage": {
        "kind": "boolean",
        "char": "c",
        "description": "retrieves code coverage results",
        "allowNo": false,
        "type": "boolean"
      },
      "outputdir": {
        "kind": "string",
        "char": "d",
        "description": "directory to store test result files",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "resultformat": {
        "kind": "enum",
        "helpValue": "(human|tap|junit|json)",
        "char": "r",
        "description": "Permissible values are: human, tap, junit, json",
        "options": ["human", "tap", "junit", "json"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "string",
        "char": "w",
        "description": "sets the streaming client socket timeout in minutes; specify a longer wait time if timeouts occur frequently",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "display Apex test processing details; if JSON is specified, processing details aren't displayed",
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:apex:test:run",
    "description": "invoke Apex tests\nSpecify which tests to run by using the --classnames, --suites, or --tests parameters. Alternatively, use the --testlevel parameter to run all the tests in your org, local tests, or specified tests.\nTo see code coverage results, use the --codecoverage parameter with --resultformat. The output displays a high-level summary of the test run and the code coverage values for classes in your org. If you specify human-readable result format, use the --detailedcoverage parameter to see detailed coverage results for each test method run.\n\nNOTE: The testRunCoverage value (JSON and JUnit result formats) is a percentage of the covered lines and total lines from all the Apex classes evaluated by the tests in this run.",
    "strict": true,
    "usage": "force:apex:test:run [-d <string>] [-l RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests] [-n <string>] [-r human|tap|junit|json] [-s <string>] [-t <string>] [-w <string>] [-y] [-v -c] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-apex",
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:apex:test:run",
      "$ sfdx force:apex:test:run -n \"MyClassTest,MyOtherClassTest\" -r human",
      "$ sfdx force:apex:test:run -s \"MySuite,MyOtherSuite\" -c -v --json",
      "$ sfdx force:apex:test:run -t \"MyClassTest.testCoolFeature,MyClassTest.testAwesomeFeature,AnotherClassTest,namespace.TheirClassTest.testThis\" -r human",
      "$ sfdx force:apex:test:run -l RunLocalTests -d <path to outputdir> -u me@my.org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as JSON",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "[default: warn] logging level for this command invocation; logs are stored in $HOME/.sfdx/sfdx.log",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "codecoverage": {
        "name": "codecoverage",
        "type": "boolean",
        "char": "c",
        "description": "retrieves code coverage results",
        "allowNo": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "directory to store test run files",
        "multiple": false
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "description": "specifies which tests to run, using one of these TestLevel enum values:\nRunSpecifiedTests—Only the tests that you specify are run.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed packages.\nRunAllTestsInOrg—All tests are in your org and in installed managed packages are run",
        "helpValue": "(RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests)",
        "multiple": false,
        "options": ["RunLocalTests", "RunAllTestsInOrg", "RunSpecifiedTests"]
      },
      "classnames": {
        "name": "classnames",
        "type": "option",
        "char": "n",
        "description": "comma-separated list of Apex test class names to run; if you select --classnames, you can't specify --suitenames or --tests",
        "multiple": false
      },
      "resultformat": {
        "name": "resultformat",
        "type": "option",
        "char": "r",
        "description": "Permissible values are: human, tap, junit, json",
        "helpValue": "(human|tap|junit|json)",
        "multiple": false,
        "options": ["human", "tap", "junit", "json"]
      },
      "suitenames": {
        "name": "suitenames",
        "type": "option",
        "char": "s",
        "description": "comma-separated list of Apex test suite names to run; if you select --suitenames, you can't specify --classnames or --tests",
        "multiple": false
      },
      "tests": {
        "name": "tests",
        "type": "option",
        "char": "t",
        "description": "comma-separated list of Apex test class names or IDs and, if applicable, test methods to run; if you specify --tests, you can't specify --classnames or --suitenames",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "sets the streaming client socket timeout in minutes; specify a longer wait time if timeouts occur frequently",
        "multiple": false
      },
      "synchronous": {
        "name": "synchronous",
        "type": "boolean",
        "char": "y",
        "description": "runs test methods from a single Apex class synchronously; if not specified, tests are run ansynchronously",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "display Apex test processing details; if JSON is specified, processing details aren't displayed",
        "allowNo": false
      },
      "detailedcoverage": {
        "name": "detailedcoverage",
        "type": "boolean",
        "char": "v",
        "description": "display detailed code coverage per test",
        "allowNo": false,
        "dependsOn": ["codecoverage"]
      }
    },
    "args": {},
    "requiresUsername": false,
    "longDescription": "Specify which tests to run by using the --classnames, --suites, or --tests parameters. Alternatively, use the --testlevel parameter to run all the tests in your org, local tests, or specified tests.\nTo see code coverage results, use the --codecoverage parameter with --resultformat. The output displays a high-level summary of the test run and the code coverage values for classes in your org. If you specify human-readable result format, use the --detailedcoverage parameter to see detailed coverage results for each test method run.\n\nNOTE: The testRunCoverage value (JSON and JUnit result formats) is a percentage of the covered lines and total lines from all the Apex classes evaluated by the tests in this run.",
    "flagsConfig": {
      "json": {
        "kind": "boolean",
        "description": "format output as JSON",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "kind": "enum",
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "description": "[default: warn] logging level for this command invocation; logs are stored in $HOME/.sfdx/sfdx.log",
        "longDescription": "Permissible values are: trace, debug, info, warn, error, fatal, TRACE, DEBUG, INFO, WARN, ERROR, FATAL",
        "default": "warn",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "type": "builtin"
      },
      "codecoverage": {
        "kind": "boolean",
        "char": "c",
        "description": "retrieves code coverage results",
        "allowNo": false,
        "type": "boolean"
      },
      "outputdir": {
        "kind": "string",
        "char": "d",
        "description": "directory to store test run files",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "testlevel": {
        "kind": "enum",
        "helpValue": "(RunLocalTests|RunAllTestsInOrg|RunSpecifiedTests)",
        "char": "l",
        "description": "specifies which tests to run, using one of these TestLevel enum values:\nRunSpecifiedTests—Only the tests that you specify are run.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed packages.\nRunAllTestsInOrg—All tests are in your org and in installed managed packages are run",
        "options": ["RunLocalTests", "RunAllTestsInOrg", "RunSpecifiedTests"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "classnames": {
        "kind": "string",
        "char": "n",
        "description": "comma-separated list of Apex test class names to run; if you select --classnames, you can't specify --suitenames or --tests",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "resultformat": {
        "kind": "enum",
        "helpValue": "(human|tap|junit|json)",
        "char": "r",
        "description": "Permissible values are: human, tap, junit, json",
        "options": ["human", "tap", "junit", "json"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "suitenames": {
        "kind": "string",
        "char": "s",
        "description": "comma-separated list of Apex test suite names to run; if you select --suitenames, you can't specify --classnames or --tests",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tests": {
        "kind": "string",
        "char": "t",
        "description": "comma-separated list of Apex test class names or IDs and, if applicable, test methods to run; if you specify --tests, you can't specify --classnames or --suitenames",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "string",
        "char": "w",
        "description": "sets the streaming client socket timeout in minutes; specify a longer wait time if timeouts occur frequently",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "synchronous": {
        "kind": "boolean",
        "char": "y",
        "description": "runs test methods from a single Apex class synchronously; if not specified, tests are run ansynchronously",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "description": "display Apex test processing details; if JSON is specified, processing details aren't displayed",
        "type": "builtin"
      },
      "detailedcoverage": {
        "kind": "boolean",
        "char": "v",
        "description": "display detailed code coverage per test",
        "dependsOn": ["codecoverage"],
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "lightning:generate:app",
    "summary": "Generate a Lightning App.",
    "description": "Generates a Lightning App bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Lightning app bundle called \"myapp\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myapp",
      "Similar to the previous example, but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myapp --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning App.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["appname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["DefaultLightningApp"],
        "default": "DefaultLightningApp",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "lightning:generate:component",
    "summary": "Generate a bundle for an Aura component or a Lightning web component.",
    "description": "Generates the bundle in the specified directory or the current working directory. The bundle consists of multiple files in a directory with the designated name.  Lightning web components are contained in the directory with name \"lwc\", Aura components in \"aura\".\n\nTo generate a Lightning web component, pass \"--type lwc\" to the command. If you don’t specify --type, Salesforce CLI generates an Aura component by default.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for an Aura component bundle in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent",
      "Generate a Lightning web component bundle in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --type lwc",
      "Generate an Aura component bundle in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --output-dir force-app/main/default/aura",
      "Generate a Lightning web component bundle in the \"force-app/main/default/lwc\" directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --type lwc --output-dir force-app/main/default/lwc"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Component.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["componentname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["default", "analyticsDashboard", "analyticsDashboardWithStep"],
        "default": "default",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "type": {
        "name": "type",
        "type": "option",
        "summary": "Type of the component bundle.",
        "multiple": false,
        "options": ["aura", "lwc"],
        "default": "aura",
        "deprecateAliases": true
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "lightning:generate:event",
    "summary": "Generate a Lightning Event.",
    "description": "Generates a Lightning Event bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Lightning event bundle called \"myevent\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myevent",
      "Similar to previous example, but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myevent --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Event.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["eventname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["DefaultLightningEvt"],
        "default": "DefaultLightningEvt",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "lightning:generate:interface",
    "summary": "Generate a Lightning Interface.",
    "description": "Generates a Lightning Interface bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Lightning interface bundle called \"myinterface\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myinterface",
      "Similar to the previous example but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myinterface --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Interface.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["interfacename"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["DefaultLightningIntf"],
        "default": "DefaultLightningIntf",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "force:lightning:lwc:test:create",
    "description": "creates a Lightning web component test file with boilerplate code inside a __tests__ directory.",
    "strict": true,
    "usage": "force:lightning:lwc:test:create -f <string> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "@salesforce/sfdx-plugin-lwc-test",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx force:lightning:lwc:test:create -f force-app/main/default/lwc/myButton/myButton.js"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "filepath": {
        "name": "filepath",
        "type": "option",
        "char": "f",
        "description": "path to Lightning web component .js file to create a test for",
        "required": true,
        "multiple": false
      }
    },
    "args": [],
    "longDescription": "Creates a __tests__ directory in the specified directory. Creates a yourComponentName.test.js file with boilerplate code in the __tests__ directory.",
    "requiresProject": false,
    "flagsConfig": {
      "filepath": {
        "kind": "string",
        "char": "f",
        "description": "path to Lightning web component .js file to create a test for",
        "longDescription": "Path to Lightning web component .js file to create a test for.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:lightning:lwc:test:run",
    "description": "invokes Lightning Web Components Jest unit tests.",
    "strict": true,
    "usage": "force:lightning:lwc:test:run [-d | --watch] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "@salesforce/sfdx-plugin-lwc-test",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx force:lightning:lwc:test:run", "$ sfdx force:lightning:lwc:test:run -w"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "debug": {
        "name": "debug",
        "type": "boolean",
        "char": "d",
        "description": "run tests in debug mode",
        "allowNo": false,
        "exclusive": ["watch"]
      },
      "watch": {
        "name": "watch",
        "type": "boolean",
        "description": "run tests in watch mode",
        "allowNo": false,
        "exclusive": ["debug"]
      }
    },
    "args": [
      {
        "name": "passthrough"
      }
    ],
    "longDescription": "Invokes Lightning Web Components Jest unit tests.",
    "requiresProject": false,
    "flagsConfig": {
      "debug": {
        "kind": "boolean",
        "char": "d",
        "description": "run tests in debug mode",
        "longDescription": "Runs tests in a Node process that an external debugger can connect to. The run pauses until the debugger is connected. For more information, see: https://jestjs.io/docs/en/troubleshooting",
        "exclusive": ["watch"],
        "allowNo": false,
        "type": "boolean"
      },
      "watch": {
        "kind": "boolean",
        "description": "run tests in watch mode",
        "longDescription": "Runs tests when a watched file changes. Watched files include the component under test and any files it references.",
        "exclusive": ["debug"],
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:lightning:lwc:test:setup",
    "description": "install Jest unit testing tools for Lightning Web Components.",
    "strict": true,
    "usage": "force:lightning:lwc:test:setup [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "@salesforce/sfdx-plugin-lwc-test",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx force:lightning:lwc:test:setup"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": [],
    "longDescription": "Installs Jest unit testing tools for Lightning Web Components. For more information, see the Lightning Web Components Dev Guide: https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.testing",
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "lightning:generate:test",
    "summary": "Generate a Lightning test.",
    "description": "Generates the test in the specified directory or the current working directory. The .resource file and associated metadata file are generated.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for the Lightning test called MyLightningTest in the current directory:\n<%= config.bin %> <%= command.id %> --name MyLightningTest",
      "Similar to the previous example but generate the files in the \"force-app/main/default/lightningTests\" directory:\n<%= config.bin %> <%= command.id %> --name MyLightningTest --output-dir force-app/main/default/lightningTests"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Lightning Test.",
        "description": "Name of the new Lightning test; can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["testname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["DefaultLightningTest"],
        "default": "DefaultLightningTest",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "internal": {
        "name": "internal",
        "type": "boolean",
        "char": "i",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "limits:api:display",
    "summary": "Display information about limits in your org.",
    "description": "For each limit, this command returns the maximum allocation and the remaining allocation based on usage. See this topic for a description of each limit: https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm.",
    "strict": true,
    "pluginName": "@salesforce/plugin-limits",
    "pluginAlias": "@salesforce/plugin-limits",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display limits in your default org:\n<%= config.bin %> <%= command.id %>",
      "Display limits in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "limits:recordcounts:display",
    "summary": "Display record counts for the specified standard or custom objects.",
    "description": "Use this command to get an approximate count of the records in standard or custom objects in your org. These record counts are the same as the counts listed in the Storage Usage page in the Setup UI. The record counts are approximate because they're calculated asynchronously and your org's storage usage isn't updated immediately. To display all available record counts, run the command without the --sobject flag.",
    "strict": true,
    "pluginName": "@salesforce/plugin-limits",
    "pluginAlias": "@salesforce/plugin-limits",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display all available record counts in your default org:\n<%= config.bin %> <%= command.id %>",
      "Display record counts for the Account, Contact, Lead, and Opportunity objects in your default org:\n<%= config.bin %> <%= command.id %> --sobject Account --sobject Contact --sobject Lead --sobject Opportunity",
      "Display record counts for the Account and Lead objects for the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject Account --sobject Lead --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the standard or custom object for which to display record counts.",
        "multiple": true,
        "default": [],
        "aliases": ["sobjecttype"],
        "delimiter": ","
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:mdapi:convert",
    "description": "convert metadata from the Metadata API format into the source format\nConverts metadata retrieved via Metadata API into the source format used in Salesforce DX projects.\n\nTo use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using \"sfdx force:mdapi:convert\".\n\nTo convert files from the source format back to the metadata format, so that you can deploy them using \"sfdx force:mdapi:deploy\", run \"sfdx force:source:convert\".",
    "strict": true,
    "usage": "force:mdapi:beta:convert -r <directory> [-d <directory>] [-p <array> | -x <string> | -m <array>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:mdapi:convert -r path/to/metadata",
      "$ sfdx force:mdapi:convert -r path/to/metadata -d path/to/outputdir"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "rootdir": {
        "name": "rootdir",
        "type": "option",
        "char": "r",
        "description": "the root directory containing the Metadata API–formatted metadata",
        "required": true,
        "multiple": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "the output directory to store the source–formatted files",
        "multiple": false
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "description": "file path to manifest (package.xml) of metadata types to convert.",
        "multiple": false
      },
      "metadatapath": {
        "name": "metadatapath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of metadata file paths to convert",
        "multiple": false,
        "exclusive": ["manifest", "metadata"]
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of metadata component names to convert",
        "multiple": false,
        "exclusive": ["manifest", "metadatapath"]
      }
    },
    "args": {},
    "requiresProject": false,
    "flagsConfig": {
      "rootdir": {
        "kind": "directory",
        "char": "r",
        "description": "the root directory containing the Metadata API–formatted metadata",
        "longDescription": "The root directory that contains the metadata you retrieved using Metadata API.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputdir": {
        "kind": "directory",
        "char": "d",
        "description": "the output directory to store the source–formatted files",
        "longDescription": "The directory to store your files in after they’re converted to the source format. Can be an absolute or relative path.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "kind": "string",
        "char": "x",
        "description": "file path to manifest (package.xml) of metadata types to convert.",
        "longDescription": "The complete path to the manifest (package.xml) file that specifies the metadata types to convert.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadatapath": {
        "kind": "array",
        "char": "p",
        "description": "comma-separated list of metadata file paths to convert",
        "longDescription": "A comma-separated list of paths to the local metadata files to convert. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata. If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes.",
        "exclusive": ["manifest", "metadata"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of metadata component names to convert",
        "longDescription": "A comma-separated list of metadata component names to convert.",
        "exclusive": ["manifest", "metadatapath"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:deploy",
    "description": "deploy metadata to an org using Metadata API",
    "strict": true,
    "usage": "force:mdapi:beta:deploy [-d <directory>] [-w <minutes>] [-o] [-g] [-q <id> | -l NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg | -r <array> | -c] [-f <filepath>] [-s] [--soapdeploy] [--purgeondelete] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--concise] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Return a job ID you can use to check the deploy status:",
      "$ sfdx force:mdapi:deploy -d some/path",
      "Deploy and poll for 1000 minutes:",
      "$ sfdx force:mdapi:deploy -d some/path -w 1000",
      "Deploy a ZIP file:",
      "$ sfdx force:mdapi:deploy -f stuff.zip",
      "Validate a deployment so the ID can be used for a quick deploy:",
      "$ sfdx force:mdapi:deploy -d some/path -w 1000 -c --testlevel RunAllTestsInOrg",
      "Quick deploy using a previously validated deployment:",
      "$ sfdx force:mdapi:deploy -q MyValidatedId"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "checkonly": {
        "name": "checkonly",
        "type": "boolean",
        "char": "c",
        "description": "validate deploy but don’t save to the org",
        "allowNo": false
      },
      "deploydir": {
        "name": "deploydir",
        "type": "option",
        "char": "d",
        "description": "root of directory tree of files to deploy",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes. Use -1 to wait indefinitely 0",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "description": "deployment testing level",
        "helpValue": "(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)",
        "multiple": false,
        "options": ["NoTestRun", "RunSpecifiedTests", "RunLocalTests", "RunAllTestsInOrg"]
      },
      "runtests": {
        "name": "runtests",
        "type": "option",
        "char": "r",
        "description": "tests to run if --testlevel RunSpecifiedTests",
        "multiple": false
      },
      "ignoreerrors": {
        "name": "ignoreerrors",
        "type": "boolean",
        "char": "o",
        "description": "ignore any errors and do not roll back deployment",
        "allowNo": false
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "description": "whether a warning will allow a deployment to complete successfully",
        "allowNo": false
      },
      "validateddeployrequestid": {
        "name": "validateddeployrequestid",
        "type": "option",
        "char": "q",
        "description": "request ID of the validated deployment to run a Quick Deploy",
        "multiple": false,
        "exclusive": ["testlevel", "runtests", "checkonly"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of deploy results",
        "allowNo": false
      },
      "zipfile": {
        "name": "zipfile",
        "type": "option",
        "char": "f",
        "description": "path to .zip file of metadata to deploy",
        "multiple": false
      },
      "singlepackage": {
        "name": "singlepackage",
        "type": "boolean",
        "char": "s",
        "description": "Indicates that the zip file points to a directory structure for a single package",
        "allowNo": false
      },
      "soapdeploy": {
        "name": "soapdeploy",
        "type": "boolean",
        "description": "deploy metadata with SOAP API instead of REST API",
        "allowNo": false
      },
      "purgeondelete": {
        "name": "purgeondelete",
        "type": "boolean",
        "description": "specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin",
        "allowNo": false
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "description": "omit success messages for smaller JSON output",
        "allowNo": false
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": false
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "description": "output JUnit test results",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "checkonly": {
        "kind": "boolean",
        "char": "c",
        "description": "validate deploy but don’t save to the org",
        "longDescription": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nValidates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
        "allowNo": false,
        "type": "boolean"
      },
      "deploydir": {
        "kind": "directory",
        "char": "d",
        "description": "root of directory tree of files to deploy",
        "longDescription": "The root of the directory tree that contains the files to deploy. The root must contain a valid package.xml file describing the entities in the directory structure. Required to initiate a deployment if you don’t use --zipfile. If you specify both --zipfile and --deploydir, a zip file of the contents of the --deploydir directory is written to the location specified by --zipfile.",
        "exactlyOne": ["zipfile", "validateddeployrequestid", "deploydir"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes. Use -1 to wait indefinitely 0",
        "longDescription": "The number of minutes to wait for the command to complete. The default is 0 (returns immediately). 0",
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "min": -1,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "testlevel": {
        "kind": "enum",
        "helpValue": "(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)",
        "char": "l",
        "description": "deployment testing level",
        "longDescription": "Specifies which level of deployment tests to run. Valid values are:\nNoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\nRunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\nRunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "options": ["NoTestRun", "RunSpecifiedTests", "RunLocalTests", "RunAllTestsInOrg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "runtests": {
        "kind": "array",
        "char": "r",
        "description": "tests to run if --testlevel RunSpecifiedTests",
        "longDescription": "Lists the Apex classes containing the deployment tests to run. Use this parameter when you set --testlevel to RunSpecifiedTests.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignoreerrors": {
        "kind": "boolean",
        "char": "o",
        "description": "ignore any errors and do not roll back deployment",
        "longDescription": "Ignores the deploy errors, and continues with the deploy operation. The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
        "allowNo": false,
        "type": "boolean"
      },
      "ignorewarnings": {
        "kind": "boolean",
        "char": "g",
        "description": "whether a warning will allow a deployment to complete successfully",
        "longDescription": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.\nThis field is available in API version 18.0 and later. Prior to version 18.0, there was no distinction between warnings and errors. All problems were treated as errors and prevented a successful deployment.",
        "allowNo": false,
        "type": "boolean"
      },
      "validateddeployrequestid": {
        "kind": "id",
        "char": "q",
        "description": "request ID of the validated deployment to run a Quick Deploy",
        "longDescription": "Specifies the ID of a package with recently validated components to run a Quick Deploy. Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run 'sfdx force:mdapi:deploy'. This flag sets the checkOnly='true' parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n1. The components have been validated successfully for the target environment within the last 10 days.\n2. As part of the validation, Apex tests in the target org have passed.\n3. Code coverage requirements are met.\n     - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n     - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
        "exactlyOne": ["zipfile", "validateddeployrequestid", "deploydir"],
        "exclusive": ["testlevel", "runtests", "checkonly"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of deploy results",
        "longDescription": "Indicates that you want verbose output from the deploy operation.",
        "type": "builtin"
      },
      "zipfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to .zip file of metadata to deploy",
        "longDescription": "The path to the .zip file of metadata files to deploy. You must indicate this option or --deploydir.If you specify both --zipfile and --deploydir, a .zip file of the contents of the deploy directory is created at the path specified for the .zip file.",
        "exactlyOne": ["zipfile", "validateddeployrequestid", "deploydir"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "singlepackage": {
        "kind": "boolean",
        "char": "s",
        "description": "Indicates that the zip file points to a directory structure for a single package",
        "longDescription": "Indicates that the specified .zip file points to a directory structure for a single package. By default, the CLI assumes the directory is structured for a set of packages.",
        "allowNo": false,
        "type": "boolean"
      },
      "soapdeploy": {
        "kind": "boolean",
        "description": "deploy metadata with SOAP API instead of REST API",
        "longDescription": "Deploy metadata with SOAP API instead of the default REST API. Because SOAP API has a lower .ZIP file size limit (400 MB uncompressed, 39 MB compressed), Salesforce recommends REST API deployment. This flag provides backwards compatibility with API version 50.0 and earlier when deploy used SOAP API by default.",
        "allowNo": false,
        "type": "boolean"
      },
      "purgeondelete": {
        "kind": "boolean",
        "description": "specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "description": "omit success messages for smaller JSON output",
        "type": "builtin"
      },
      "resultsdir": {
        "kind": "directory",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "coverageformatters": {
        "kind": "array",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "junit": {
        "kind": "boolean",
        "description": "output JUnit test results",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:deploy:report",
    "description": "check the status of a metadata deployment",
    "strict": true,
    "usage": "force:mdapi:beta:deploy:report [-w <minutes>] [-i <id>] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--concise] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Check the status of the most recent deployment",
      "$ sfdx force:mdapi:deploy:report",
      "Check the status of a deploy with job ID 1234 and wait for 10 minutes for the result:",
      "$ sfdx force:mdapi:deploy:report -i 1234 -w 10"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes.  Use -1 to poll indefinitely",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; if not specified, defaults to your most recent CLI deployment",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of deploy results",
        "allowNo": false
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "description": "omit success messages for smaller JSON output",
        "allowNo": false
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": false
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "description": "output JUnit test results",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "min": {
          "quantity": -1,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes.  Use -1 to poll indefinitely",
        "longDescription": "The number of minutes to wait for the command to complete. The default is –1 (no limit).",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; if not specified, defaults to your most recent CLI deployment",
        "longDescription": "The job ID (id field value for AsyncResult) of the deployment you want to check. The job ID is required if you haven’t previously deployed using Salesforce CLI. If you deploy using Salesforce CLI and don’t specify a job ID, we use the ID of the most recent metadata deployment.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of deploy results",
        "longDescription": "Indicates that you want verbose output for deploy results.",
        "type": "builtin"
      },
      "concise": {
        "description": "omit success messages for smaller JSON output",
        "type": "builtin"
      },
      "resultsdir": {
        "kind": "directory",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "coverageformatters": {
        "kind": "array",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "junit": {
        "kind": "boolean",
        "description": "output JUnit test results",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:retrieve",
    "description": "retrieve metadata from an org using Metadata API\nUses Metadata API to retrieve a .zip of XML files that represent metadata from the targeted org. The default target username is the admin user for the default scratch org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.",
    "strict": true,
    "usage": "force:mdapi:beta:retrieve -r <directory> [-k <filepath> | -d <directory> | -p <array>] [-s] [-n <string>] [-z] [-w <minutes>] [-u <string>] [-a <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve metadata in the default project directory into the target directory:",
      "$ sfdx force:mdapi:retrieve -r path/to/retrieve/dir",
      "Retrieve metadata defined in the specified manifest into the target directory:",
      "$ sfdx force:mdapi:retrieve -r path/to/retrieve/dir -k package.xml",
      "Retrieve metadata defined by the specified directory, name the retrieved zipfile and extract all contents",
      "$ sfdx force:mdapi:retrieve -d path/to/apexClasses -r path/to/retrieve/dir --unzip --zipfilename apexClasses.zip",
      "Enqueue a retrieve request but do not wait for the metadata to be retrieved:",
      "$ sfdx force:mdapi:retrieve -r path/to/retrieve/dir --wait 0"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "description": "target API version for the retrieve",
        "multiple": false
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "description": "directory root for the retrieved files",
        "required": true,
        "multiple": false
      },
      "unpackaged": {
        "name": "unpackaged",
        "type": "option",
        "char": "k",
        "description": "file path of manifest of components to retrieve",
        "multiple": false,
        "exclusive": ["sourcedir", "packagenames"]
      },
      "sourcedir": {
        "name": "sourcedir",
        "type": "option",
        "char": "d",
        "description": "source dir to use instead of the default package dir in sfdx-project.json",
        "multiple": false,
        "exclusive": ["unpackaged", "packagenames"]
      },
      "packagenames": {
        "name": "packagenames",
        "type": "option",
        "char": "p",
        "description": "a comma-separated list of packages to retrieve",
        "multiple": false,
        "exclusive": ["sourcedir", "unpackaged"]
      },
      "singlepackage": {
        "name": "singlepackage",
        "type": "boolean",
        "char": "s",
        "description": "indicates that the zip file points to a directory structure for a single package",
        "allowNo": false
      },
      "zipfilename": {
        "name": "zipfilename",
        "type": "option",
        "char": "n",
        "description": "file name to use for the retrieved zip file",
        "multiple": false
      },
      "unzip": {
        "name": "unzip",
        "type": "boolean",
        "char": "z",
        "description": "extract all files from the retrieved zip file",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 1440,
          "unit": 0
        }
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of retrieve result",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "retrievetargetdir": {
        "kind": "directory",
        "char": "r",
        "description": "directory root for the retrieved files",
        "longDescription": "The root of the directory structure where the retrieved .zip or metadata files are put.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "unpackaged": {
        "kind": "filepath",
        "char": "k",
        "description": "file path of manifest of components to retrieve",
        "longDescription": "The complete path for the manifest file that specifies the components to retrieve.",
        "exclusive": ["sourcedir", "packagenames"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "sourcedir": {
        "kind": "directory",
        "char": "d",
        "description": "source dir to use instead of the default package dir in sfdx-project.json",
        "longDescription": "The source directory to use instead of the default package directory specified in sfdx-project.json",
        "exclusive": ["unpackaged", "packagenames"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packagenames": {
        "kind": "array",
        "char": "p",
        "description": "a comma-separated list of packages to retrieve",
        "longDescription": "A comma-separated list of package names to retrieve.",
        "exclusive": ["sourcedir", "unpackaged"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "singlepackage": {
        "kind": "boolean",
        "char": "s",
        "description": "indicates that the zip file points to a directory structure for a single package",
        "longDescription": "Indicates that the specified .zip file points to a directory structure for a single package. By default, the CLI assumes the directory is structured for a set of packages.",
        "allowNo": false,
        "type": "boolean"
      },
      "zipfilename": {
        "kind": "string",
        "char": "n",
        "description": "file name to use for the retrieved zip file",
        "longDescription": "The file name to use for the retrieved zip file.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "unzip": {
        "kind": "boolean",
        "char": "z",
        "description": "extract all files from the retrieved zip file",
        "longDescription": "Extract all files from the retrieved zip file.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "longDescription": "The number of minutes to wait for the command to complete.",
        "default": {
          "quantity": 1440,
          "unit": 0
        },
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "char": "a",
        "description": "target API version for the retrieve",
        "longDescription": "Use to override the default, which is the latest version supported by your CLI plug-in, with the version in your package.xml file.",
        "type": "builtin"
      },
      "verbose": {
        "description": "verbose output of retrieve result",
        "longDescription": "Indicates that you want verbose output from the retrieve operation.",
        "type": "builtin"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:retrieve:report",
    "description": "check the status of a metadata retrieval\nSpecify the job ID and a target directory for the retrieve you want to check. You can also specify a wait time (minutes) to check for updates to the retrieve status. If the retrieve was successful, the resulting zip file will be saved to the location passed in with the retrieve target parameter.",
    "strict": true,
    "usage": "force:mdapi:beta:retrieve:report [-r <directory>] [-i <id>] [-n <string>] [-z] [-w <minutes>] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Poll until the metadata is retrieved (or timeout is reached) using data from the last force:mdapi:retrieve command:",
      "  sfdx force:mdapi:retrieve:report",
      "Report the current status of the last retrieve command. If the retrieve is complete the zip file of metadata is written to the target directoy:",
      "  sfdx force:mdapi:retrieve:report -r path/to/retrieve/dir -w 0",
      "Poll until the metadata is retrieved (or timeout is reached) using the provided RetrieveID, naming the zip file and extracting all contents:",
      "  sfdx force:mdapi:retrieve:report -i retrieveId -r path/to/retrieve/dir --unzip --zipfilename apexClasses.zip"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "description": "directory root for the retrieved files",
        "multiple": false
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the retrieve you want to check; defaults to your most recent CLI retrieval if not specified",
        "multiple": false
      },
      "zipfilename": {
        "name": "zipfilename",
        "type": "option",
        "char": "n",
        "description": "file name to use for the retrieved zip file",
        "multiple": false
      },
      "unzip": {
        "name": "unzip",
        "type": "boolean",
        "char": "z",
        "description": "extract all files from the retrieved zip file",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 1440,
          "unit": 0
        }
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of retrieve result",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "retrievetargetdir": {
        "kind": "directory",
        "char": "r",
        "description": "directory root for the retrieved files",
        "longDescription": "The root of the directory structure where the retrieved .zip or metadata files are put.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the retrieve you want to check; defaults to your most recent CLI retrieval if not specified",
        "longDescription": "The job ID (asyncId) of the retrieve you want to check. If not specified, the default value is the ID of the most recent metadata retrieval you ran using Salesforce CLI. You must specify a --retrievetargetdir. Use with --wait to resume waiting.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "zipfilename": {
        "kind": "string",
        "char": "n",
        "description": "file name to use for the retrieved zip file",
        "longDescription": "The file name to use for the retrieved zip file.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "unzip": {
        "kind": "boolean",
        "char": "z",
        "description": "extract all files from the retrieved zip file",
        "longDescription": "Extract all files from the retrieved zip file.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "longDescription": "The number of minutes to wait for the command to complete.",
        "min": -1,
        "default": {
          "quantity": 1440,
          "unit": 0
        },
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of retrieve result",
        "longDescription": "Indicates that you want verbose output from the retrieve operation.",
        "type": "builtin"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:deploy:cancel",
    "description": "cancel a metadata deployment \n Use this command to cancel a specified asynchronous metadata deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.",
    "strict": true,
    "usage": "force:mdapi:deploy:cancel [-w <minutes>] [-i <id>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Deploy a directory of files to the org",
      "  $ sfdx force:mdapi:deploy -d <directory>",
      "Now cancel this deployment and wait two minutes",
      "  $ sfdx force:mdapi:deploy:cancel -w 2",
      "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID",
      "  $ sfdx force:mdapi:deploy:cancel -i <jobid>",
      "Check the status of the cancel job",
      "  $ sfdx force:mdapi:deploy:report"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified",
        "multiple": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:describemetadata",
    "description": "display details about the metadata types enabled for your org\nUse this information to identify the syntax needed for a <name> element in package.xml. The most recent API version is the default, or you can specify an older version.\n\nThe default target username is the admin user for the default scratch org. The username must have the Modify All Data permission or the Modify Metadata permission (Beta). For more information about permissions, see Salesforce Help.",
    "strict": true,
    "usage": "force:mdapi:describemetadata [-f <filepath>] [-u <string>] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:mdapi:describemetadata -a 43.0",
      "$ sfdx force:mdapi:describemetadata -u me@example.com",
      "$ sfdx force:mdapi:describemetadata -f /path/to/outputfilename.txt",
      "$ sfdx force:mdapi:describemetadata -u me@example.com -f /path/to/outputfilename.txt"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "description": "API version to use",
        "multiple": false
      },
      "resultfile": {
        "name": "resultfile",
        "type": "option",
        "char": "f",
        "description": "path to the file where results are stored",
        "multiple": false
      },
      "filterknown": {
        "name": "filterknown",
        "type": "boolean",
        "char": "k",
        "description": "filter metadata known by the CLI",
        "hidden": true,
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "apiversion": {
        "char": "a",
        "description": "API version to use",
        "longDescription": "The API version to use. The default is the latest API version",
        "type": "builtin"
      },
      "resultfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to the file where results are stored",
        "longDescription": "The path to the file where the results of the command are stored. Directing the output to a file makes it easier to extract relevant information for your package.xml manifest file. The default output destination is the console.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "filterknown": {
        "kind": "boolean",
        "char": "k",
        "description": "filter metadata known by the CLI",
        "longDescription": "Filters all the known metadata from the result such that all that is left are the types not yet fully supported by the CLI.",
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:legacy:convert",
    "description": "(deprecated) convert metadata from the Metadata API format into the source format\n\nWARNING: The command \"force:mdapi:legacy:convert\" has been deprecated and will be removed in v56.0 or later. Use \"force:mdapi:convert\" instead.\n\nNOTE: This command must be run from within a project.\n\nTo use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using \"sfdx force:mdapi:legacy:convert\".\n\nTo convert files from the source format back to the metadata format, so that you can deploy them using \"sfdx force:mdapi:legacy:deploy\", run \"sfdx force:source:convert\".\n\nExamples:\n   $ sfdx force:mdapi:legacy:convert -r path/to/metadata\n   $ sfdx force:mdapi:legacy:convert -r path/to/metadata -d path/to/outputdir",
    "strict": true,
    "usage": "force:mdapi:legacy:convert -r <directory> [-d <directory>] [-m <array> | -x <string> | -p <array>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "rootdir": {
        "name": "rootdir",
        "type": "option",
        "char": "r",
        "description": "the root directory containing the Metadata API–formatted metadata",
        "required": true,
        "multiple": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "the output directory to store the source–formatted files",
        "required": false,
        "multiple": false
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "description": "file path to manifest (package.xml) of metadata types to convert.",
        "required": false,
        "multiple": false
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of metadata component names to convert",
        "required": false,
        "multiple": false,
        "exclusive": ["manifest", "metadatapath"]
      },
      "metadatapath": {
        "name": "metadatapath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of paths to the local source files to convert",
        "hidden": false,
        "required": false,
        "multiple": false,
        "exclusive": ["manifest", "metadata"]
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:mdapi:convert"
    },
    "theDescription": "convert metadata from the Metadata API format into the source format",
    "longDescription": "Converts metadata retrieved via Metadata API into the source format used in Salesforce DX projects.",
    "help": "To use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using \"sfdx force:mdapi:legacy:convert\".\n\nTo convert files from the source format back to the metadata format, so that you can deploy them using \"sfdx force:mdapi:legacy:deploy\", run \"sfdx force:source:convert\".\n\nExamples:\n   $ sfdx force:mdapi:legacy:convert -r path/to/metadata\n   $ sfdx force:mdapi:legacy:convert -r path/to/metadata -d path/to/outputdir",
    "initializeMetadataRegistry": true,
    "showProgress": true,
    "requiresUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "rootdir": {
        "kind": "directory",
        "char": "r",
        "description": "the root directory containing the Metadata API–formatted metadata",
        "longDescription": "The root directory that contains the metadata you retrieved using Metadata API.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputdir": {
        "kind": "directory",
        "char": "d",
        "description": "the output directory to store the source–formatted files",
        "longDescription": "The directory to store your files in after they’re converted to the source format. Can be an absolute or relative path.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "kind": "string",
        "char": "x",
        "description": "file path to manifest (package.xml) of metadata types to convert.",
        "longDescription": "The complete path to the manifest (package.xml) file that specifies the metadata types to convert.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of metadata component names to convert",
        "longDescription": "A comma-separated list of metadata component names to convert.",
        "required": false,
        "exclusive": ["manifest", "metadatapath"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadatapath": {
        "kind": "array",
        "char": "p",
        "required": false,
        "hidden": false,
        "description": "comma-separated list of paths to the local source files to convert",
        "longDescription": "A comma-separated list of paths to the local source files to convert. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes.",
        "exclusive": ["manifest", "metadata"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:legacy:deploy",
    "description": "(deprecated) deploy metadata to an org using Metadata API\n\nWARNING: The command \"force:mdapi:legacy:deploy\" has been deprecated and will be removed in v56.0 or later. Use \"force:mdapi:deploy\" instead.\n\nIMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nSpecify the location of the files to deploy as a .zip file or by the root of the directory tree containing the files. To check the status of a deployment, specify its job ID. To run quick deploy of a recently validated package, use --validateddeployrequestid with the validated ID.\n\nTo wait for the command to finish running no matter how long the deployment takes, set --wait to -1: \"sfdx force mdapi:deploy -w -1 ...\".\n\nIf you don’t specify --wait, the command returns immediately and the metadata deploys asynchronously. Run force:mdapi:legacy: deploy:report to check the status of the deploy.",
    "strict": true,
    "usage": "force:mdapi:legacy:deploy [-c] [-d <directory> | -f <filepath>] [-w <minutes>] [-l NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg] [-r <array>] [-o] [-g] [-q <id>] [-s] [--soapdeploy] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "checkonly": {
        "name": "checkonly",
        "type": "boolean",
        "char": "c",
        "description": "validate deploy but don’t save to the org",
        "required": false,
        "allowNo": false
      },
      "deploydir": {
        "name": "deploydir",
        "type": "option",
        "char": "d",
        "description": "root of directory tree of files to deploy",
        "required": false,
        "multiple": false,
        "exclusive": ["zipfile"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 0)",
        "required": false,
        "multiple": false
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "description": "deployment testing level",
        "required": false,
        "helpValue": "(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)",
        "multiple": false,
        "options": ["NoTestRun", "RunSpecifiedTests", "RunLocalTests", "RunAllTestsInOrg"]
      },
      "runtests": {
        "name": "runtests",
        "type": "option",
        "char": "r",
        "description": "tests to run if --testlevel RunSpecifiedTests",
        "required": false,
        "multiple": false
      },
      "ignoreerrors": {
        "name": "ignoreerrors",
        "type": "boolean",
        "char": "o",
        "description": "ignore any errors and do not roll back deployment",
        "required": false,
        "allowNo": false
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "description": "whether a warning will allow a deployment to complete successfully",
        "required": false,
        "allowNo": false
      },
      "validateddeployrequestid": {
        "name": "validateddeployrequestid",
        "type": "option",
        "char": "q",
        "description": "request ID of the validated deployment to run a Quick Deploy",
        "required": false,
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of deploy results",
        "allowNo": false
      },
      "zipfile": {
        "name": "zipfile",
        "type": "option",
        "char": "f",
        "description": "path to .zip file of metadata to deploy",
        "required": false,
        "multiple": false
      },
      "singlepackage": {
        "name": "singlepackage",
        "type": "boolean",
        "char": "s",
        "description": "Indicates that the zip file points to a directory structure for a single package",
        "required": false,
        "allowNo": false
      },
      "soapdeploy": {
        "name": "soapdeploy",
        "type": "boolean",
        "description": "deploy metadata with SOAP API instead of REST API",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:mdapi:deploy"
    },
    "theDescription": "deploy metadata to an org using Metadata API",
    "longDescription": "Deploys file representations of components into an org by creating or updating the components they represent. You can deploy and retrieve up to 10,000 files or 400 MB (39 MB compressed) at one time. The default target username is the admin user for the default scratch org.",
    "help": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nSpecify the location of the files to deploy as a .zip file or by the root of the directory tree containing the files. To check the status of a deployment, specify its job ID. To run quick deploy of a recently validated package, use --validateddeployrequestid with the validated ID.\n\nTo wait for the command to finish running no matter how long the deployment takes, set --wait to -1: \"sfdx force mdapi:deploy -w -1 ...\".\n\nIf you don’t specify --wait, the command returns immediately and the metadata deploys asynchronously. Run force:mdapi:legacy: deploy:report to check the status of the deploy.",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "checkonly": {
        "kind": "boolean",
        "char": "c",
        "description": "validate deploy but don’t save to the org",
        "longDescription": "Validates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "deploydir": {
        "kind": "directory",
        "char": "d",
        "description": "root of directory tree of files to deploy",
        "longDescription": "The root of the directory tree that contains the files to deploy. The root must contain a valid package.xml file describing the entities in the directory structure. Required to initiate a deployment if you don’t use --zipfile. If you specify both --zipfile and --deploydir, a zip file of the contents of the --deploydir directory is written to the location specified by --zipfile.",
        "required": false,
        "exclusive": ["zipfile"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 0)",
        "longDescription": "The number of minutes to wait for the command to complete. The default is –1 (no limit). 0",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "testlevel": {
        "kind": "enum",
        "helpValue": "(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)",
        "char": "l",
        "description": "deployment testing level",
        "longDescription": "Specifies which level of deployment tests to run. Valid values are:\nNoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\nRunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed packages. This test level is the default for production deployments that include Apex classes or triggers.\nRunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "required": false,
        "options": ["NoTestRun", "RunSpecifiedTests", "RunLocalTests", "RunAllTestsInOrg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "runtests": {
        "kind": "array",
        "char": "r",
        "description": "tests to run if --testlevel RunSpecifiedTests",
        "longDescription": "Lists the Apex classes containing the deployment tests to run. Use this parameter when you set --testlevel to RunSpecifiedTests.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignoreerrors": {
        "kind": "boolean",
        "char": "o",
        "description": "ignore any errors and do not roll back deployment",
        "longDescription": "Ignores the deploy errors, and continues with the deploy operation. The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "ignorewarnings": {
        "kind": "boolean",
        "char": "g",
        "description": "whether a warning will allow a deployment to complete successfully",
        "longDescription": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.\nThis field is available in API version 18.0 and later. Prior to version 18.0, there was no distinction between warnings and errors. All problems were treated as errors and prevented a successful deployment.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "validateddeployrequestid": {
        "kind": "id",
        "char": "q",
        "description": "request ID of the validated deployment to run a Quick Deploy",
        "longDescription": "Specifies the ID of a package with recently validated components to run a Quick Deploy. Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run \"sfdx force:mdapi:legacy:deploy\". This flag sets the checkOnly=\"true\" parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n1. The components have been validated successfully for the target environment within the last 10 days.\n2. As part of the validation, Apex tests in the target org have passed.\n3. Code coverage requirements are met.\n     - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n     - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of deploy results",
        "longDescription": "Indicates that you want verbose output from the deploy operation.",
        "type": "builtin"
      },
      "zipfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to .zip file of metadata to deploy",
        "longDescription": "The path to the .zip file of metadata files to deploy. You must indicate this option or --deploydir.If you specify both --zipfile and --deploydir, a .zip file of the contents of the deploy directory is created at the path specified for the .zip file.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "singlepackage": {
        "kind": "boolean",
        "char": "s",
        "description": "Indicates that the zip file points to a directory structure for a single package",
        "longDescription": "Indicates that the specified .zip file points to a directory structure for a single package. By default, the CLI assumes the directory is structured for a set of packages.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "soapdeploy": {
        "kind": "boolean",
        "description": "deploy metadata with SOAP API instead of REST API",
        "longDescription": "Deploy metadata with SOAP API instead of the default REST API. Because SOAP API has a lower .ZIP file size limit (400 MB uncompressed, 39 MB compressed), Salesforce recommends REST API deployment. This flag provides backwards compatibility with API version 50.0 and earlier when deploy used SOAP API by default.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:legacy:deploy:report",
    "description": "(deprecated) check the status of a metadata deployment\n\nWARNING: The command \"force:mdapi:legacy:deploy:report\" has been deprecated and will be removed in v56.0 or later. Use \"force:mdapi:deploy:report\" instead.\n\nSpecify the job ID for the deploy you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status.",
    "strict": true,
    "usage": "force:mdapi:legacy:deploy:report [-w <minutes>] [-i <id>] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 0)",
        "required": false,
        "multiple": false
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; if not specified, defaults to your most recent CLI deployment",
        "required": false,
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of deploy results",
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:mdapi:deploy:report"
    },
    "theDescription": "check the status of a metadata deployment",
    "longDescription": "Checks the current status of an asynchronous metadata deployment.",
    "help": "Specify the job ID for the deploy you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status.",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 0)",
        "longDescription": "The number of minutes to wait for the command to complete. The default is –1 (no limit). 0",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; if not specified, defaults to your most recent CLI deployment",
        "longDescription": "The job ID (id field value for AsyncResult) of the deployment you want to check. The job ID is required if you haven’t previously deployed using Salesforce CLI. If you deploy using Salesforce CLI and don’t specify a job ID, we use the ID of the most recent metadata deployment.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of deploy results",
        "longDescription": "Indicates that you want verbose output for deploy results.",
        "type": "builtin"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:legacy:retrieve",
    "description": "(deprecated) retrieve metadata from an org using Metadata API\n\nWARNING: The command \"force:mdapi:legacy:retrieve\" has been deprecated and will be removed in v56.0 or later. Use \"force:mdapi:retrieve\" instead.\n\nThe default target username is the admin user for the default scratch org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.",
    "strict": true,
    "usage": "force:mdapi:legacy:retrieve -r <directory> [-w <minutes>] [-k <filepath>] [-d <directory>] [-p <array>] [-s] [-u <string>] [-a <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "description": "target API version for the retrieve",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: -1 (no limit))",
        "required": false,
        "multiple": false
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "description": "directory root for the retrieved files",
        "required": true,
        "multiple": false
      },
      "unpackaged": {
        "name": "unpackaged",
        "type": "option",
        "char": "k",
        "description": "file path of manifest of components to retrieve",
        "required": false,
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of retrieve result",
        "allowNo": false
      },
      "sourcedir": {
        "name": "sourcedir",
        "type": "option",
        "char": "d",
        "description": "source dir to use instead of the default package dir in sfdx-project.json",
        "required": false,
        "multiple": false
      },
      "packagenames": {
        "name": "packagenames",
        "type": "option",
        "char": "p",
        "description": "a comma-separated list of packages to retrieve",
        "required": false,
        "multiple": false
      },
      "singlepackage": {
        "name": "singlepackage",
        "type": "boolean",
        "char": "s",
        "description": "Indicates that the zip file points to a directory structure for a single package",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:mdapi:retrieve"
    },
    "theDescription": "retrieve metadata from an org using Metadata API",
    "longDescription": "Uses Metadata API to retrieve a .zip of XML files that represent metadata from the targeted org. The default target username is the admin user for the default scratch org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.",
    "help": "The default target username is the admin user for the default scratch org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "apiversion": {
        "char": "a",
        "description": "target API version for the retrieve",
        "longDescription": "Use to override the default, which is the latest version supported by your CLI plug-in, with the version in your package.xml file.",
        "type": "builtin"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: -1 (no limit))",
        "longDescription": "The number of minutes to wait for the command to complete.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "retrievetargetdir": {
        "kind": "directory",
        "char": "r",
        "description": "directory root for the retrieved files",
        "longDescription": "The root of the directory structure where the retrieved .zip or metadata files are put.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "unpackaged": {
        "kind": "filepath",
        "char": "k",
        "description": "file path of manifest of components to retrieve",
        "longDescription": "The complete path for the manifest file that specifies the components to retrieve.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of retrieve result",
        "longDescription": "Indicates that you want verbose output from the retrieve operation.",
        "type": "builtin"
      },
      "sourcedir": {
        "kind": "directory",
        "char": "d",
        "description": "source dir to use instead of the default package dir in sfdx-project.json",
        "longDescription": "The source directory to use instead of the default package directory specified in sfdx-project.json",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packagenames": {
        "kind": "array",
        "char": "p",
        "description": "a comma-separated list of packages to retrieve",
        "longDescription": "A comma-separated list of package names to retrieve.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "singlepackage": {
        "kind": "boolean",
        "char": "s",
        "description": "Indicates that the zip file points to a directory structure for a single package",
        "longDescription": "Indicates that the specified .zip file points to a directory structure for a single package. By default, the CLI assumes the directory is structured for a set of packages.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:legacy:retrieve:report",
    "description": "(deprecated) check the status of a metadata retrieval\n\nWARNING: The command \"force:mdapi:legacy:retrieve:report\" has been deprecated and will be removed in v56.0 or later. Use \"force:mdapi:retrieve:report\" instead.\n\nSpecify the job ID and a target directory for the retrieve you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status. If the retrieve was successful, the resulting zip file will be saved to the location passed in with the retrieve target parameter.",
    "strict": true,
    "usage": "force:mdapi:legacy:retrieve:report [-w <minutes>] [-r <directory>] [-i <id>] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: -1 (no limit))",
        "required": false,
        "multiple": false
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "description": "directory root for the retrieved files",
        "required": false,
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of retrieve result",
        "allowNo": false
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the retrieve you want to check; defaults to your most recent CLI retrieval if not specified",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:mdapi:retrieve:report"
    },
    "theDescription": "check the status of a metadata retrieval",
    "longDescription": "Check the status of an asynchronous metadata retrieval.",
    "help": "Specify the job ID and a target directory for the retrieve you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status. If the retrieve was successful, the resulting zip file will be saved to the location passed in with the retrieve target parameter.",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: -1 (no limit))",
        "longDescription": "The number of minutes to wait for the command to complete. -1",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "retrievetargetdir": {
        "kind": "directory",
        "char": "r",
        "description": "directory root for the retrieved files",
        "longDescription": "The root of the directory structure where the retrieved .zip or metadata files are put.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of retrieve result",
        "longDescription": "Indicates that you want verbose output from the retrieve operation.",
        "type": "builtin"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the retrieve you want to check; defaults to your most recent CLI retrieval if not specified",
        "longDescription": "The job ID (asyncId) of the retrieve you want to check. If not specified, the default value is the ID of the most recent metadata retrieval you ran using Salesforce CLI. You must specify a --retrievetargetdir. Use with --wait to resume waiting.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:mdapi:listmetadata",
    "description": "display properties of metadata components of a specified type\nThis command is useful when you want to identify individual components in your manifest file or if you want a high-level view of particular components in your organization. For example, you could use this target to return a list of names of all Layout components in your org, then use this information in a retrieve operation that returns a subset of these components.",
    "strict": true,
    "usage": "force:mdapi:listmetadata -m <string> [-f <filepath>] [--folder <string>] [-u <string>] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:mdapi:listmetadata -m CustomObject",
      "$ sfdx force:mdapi:listmetadata -m CustomObject -a 43.0",
      "$ sfdx force:mdapi:listmetadata -m CustomObject -u me@example.com",
      "$ sfdx force:mdapi:listmetadata -m CustomObject -f /path/to/outputfilename.txt",
      "$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername",
      "$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername -a 43.0",
      "$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername -u me@example.com",
      "$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername -f /path/to/outputfilename.txt",
      "$ sfdx force:mdapi:listmetadata -m CustomObject -u me@example.com -f /path/to/outputfilename.txt"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "description": "API version to use",
        "multiple": false
      },
      "resultfile": {
        "name": "resultfile",
        "type": "option",
        "char": "f",
        "description": "path to the file where results are stored",
        "multiple": false
      },
      "metadatatype": {
        "name": "metadatatype",
        "type": "option",
        "char": "m",
        "description": "metadata type to be retrieved, such as CustomObject; metadata type value is case-sensitive",
        "required": true,
        "multiple": false
      },
      "folder": {
        "name": "folder",
        "type": "option",
        "description": "folder associated with the component; required for components that use folders; folder names are case-sensitive",
        "multiple": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "apiversion": {
        "char": "a",
        "description": "API version to use",
        "longDescription": "The API version to use. The default is the latest API version",
        "type": "builtin"
      },
      "resultfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to the file where results are stored",
        "longDescription": "The path to the file where the results of the command are stored. The default output destination is the console.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadatatype": {
        "kind": "string",
        "char": "m",
        "description": "metadata type to be retrieved, such as CustomObject; metadata type value is case-sensitive",
        "longDescription": "The metadata type to be retrieved, such as CustomObject or Report. The metadata type value is case-sensitive.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "folder": {
        "kind": "string",
        "description": "folder associated with the component; required for components that use folders; folder names are case-sensitive",
        "longDescription": "The folder associated with the component. This parameter is required for components that use folders, such as Dashboard, Document, EmailTemplate, or Report. The folder name value is case-sensitive.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:org:clone",
    "summary": "Clone a sandbox org.",
    "description": "There are two ways to clone a sandbox: either specify a sandbox definition file or provide key=value pairs at the command line. Key-value pairs at the command-line override their equivalent sandbox definition file values. In either case, you must specify both the \"SandboxName\" and \"SourceSandboxName\" options to set the names of the new sandbox and the one being cloned, respectively.\n\nSet the --targetusername (-u) parameter to a production org with sandbox licenses. The --type (-t) parameter is required and must be set to \"sandbox\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> -t sandbox -f config/dev-sandbox-def.json -u prodOrg -a MyDevSandbox",
      "$ <%= config.bin %> <%= command.id %> -t sandbox SandboxName=NewClonedSandbox SourceSandboxName=ExistingSandbox -u prodOrg -a MyDevSandbox"
    ],
    "deprecationOptions": {
      "to": "org:create:sandbox",
      "version": "60.0"
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "summary": "Type of org to create.",
        "required": true,
        "multiple": false,
        "options": ["sandbox"]
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "summary": "Path to the sandbox definition file.",
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "summary": "Set the cloned org as your default.",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the cloned org.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait while polling for status.",
        "description": "Sets the streaming client socket timeout, in minutes. If the streaming client socket has no contact from the server for a number of minutes, the client exits. Specify a longer wait time if timeouts occur frequently.",
        "multiple": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "SANDBOXDEF_SRC_SANDBOXNAME": "SourceSandboxName",
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:org:create",
    "summary": "Create a scratch org or sandbox.",
    "description": "Creates a scratch org or a sandbox org using the values specified in a configuration file or key=value pairs that you specify on the command line. Values specified on the command line override values in the configuration file. Specify a configuration file or provide key=value pairs while creating a scratch org or a sandbox. When creating scratch orgs, —targetdevhubusername (-v) must be a Dev Hub org. When creating sandboxes, the --targetusername (-u) must be a production org with sandbox licenses. The —type (-t) is required if creating a sandbox.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> -f config/enterprise-scratch-def.json -a MyScratchOrg",
      "$ <%= config.bin %> <%= command.id %> edition=Developer -a MyScratchOrg -s -v devHub",
      "$ <%= config.bin %> <%= command.id %> -f config/enterprise-scratch-def.json -a ScratchOrgWithOverrides username=testuser1@mycompany.org",
      "$ <%= config.bin %> <%= command.id %> -t sandbox -f config/dev-sandbox-def.json -a MyDevSandbox -u prodOrg"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": false,
        "multiple": false,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "summary": "Type of org to create.",
        "multiple": false,
        "options": ["scratch", "sandbox"],
        "default": "scratch"
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "summary": "Path to an org definition file.",
        "multiple": false
      },
      "nonamespace": {
        "name": "nonamespace",
        "type": "boolean",
        "char": "n",
        "summary": "Create the scratch org with no namespace.",
        "allowNo": false
      },
      "noancestors": {
        "name": "noancestors",
        "type": "boolean",
        "char": "c",
        "summary": "Do not include second-generation package ancestors in the scratch org.",
        "allowNo": false
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "summary": "Connected app consumer key; not supported for sandbox org creation.",
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "summary": "Set the created org as the default username.",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the created org.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Streaming client socket timeout (in minutes).",
        "multiple": false
      },
      "durationdays": {
        "name": "durationdays",
        "type": "option",
        "char": "d",
        "summary": "Duration of the scratch org (in days) (default:7, min:1, max:30).",
        "multiple": false,
        "default": 7
      },
      "retry": {
        "name": "retry",
        "type": "option",
        "summary": "Number of scratch org auth retries after scratch org is successfully signed up.",
        "hidden": true,
        "multiple": false,
        "default": 0
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:org:delete",
    "summary": "Delete a scratch or sandbox org.",
    "description": "Salesforce CLI marks the org for deletion in either the Dev Hub org (for scratch orgs) or production org (for sandboxes) and then deletes all local references to the org from your computer.\n\nTo mark the org for deletion without being prompted to confirm, specify --noprompt.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> -u me@my.org",
      "$ <%= config.bin %> <%= command.id %> -u MyOrgAlias -p"
    ],
    "deprecationOptions": {
      "message": "The force:org:delete command is deprecated. Use org:delete:scratch or org:delete:sandbox."
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "No prompt to confirm deletion.",
        "allowNo": false,
        "aliases": ["noprompt"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:display",
    "summary": "Display information about an org.",
    "description": "Output includes your access token, client Id, connected status, org ID, instance URL, username, and alias, if applicable.\n\nUse --verbose to include the SFDX auth URL. WARNING: The SFDX auth URL contains sensitive information, such as a refresh token that can be used to access an org. Don't share or distribute this URL or token.\n\nIncluding --verbose displays the sfdxAuthUrl property only if you authenticated to the org using auth:web:login (not auth:jwt:grant).",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display information about your default org:\n$ <%= config.bin %> <%= command.id %>",
      "Display information, including the sfdxAuthUrl property, about the org with alias TestOrg1:\n$ <%= config.bin %> <%= command.id %> --target-org TestOrg1 --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display the sfdxAuthUrl property.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:org:legacy:create",
    "description": "create a scratch or sandbox org\n\nSpecify a configuration file or provide key=value pairs while creating a scratch org or a sandbox. When creating scratch orgs, —targetdevhubusername (-v) must be a Dev Hub org. When creating sandboxes, the --targetusername (-u) must be a production org with sandbox licenses. The —type (-t) is required if creating a sandbox.\n\nExamples:\n   $ sfdx force:org:create -f config/enterprise-scratch-def.json -a MyScratchOrg\n   $ sfdx force:org:create edition=Developer -a MyScratchOrg -s -v devHub\n   $ sfdx force:org:create -f config/enterprise-scratch-def.json -a ScratchOrgWithOverrides username=testuser1@mycompany.org\n   $ sfdx force:org:create -t sandbox -f config/dev-sandbox-def.json -a MyDevSandbox -u prodOrg",
    "strict": true,
    "usage": "force:org:legacy:create [name=value...] [-t scratch|sandbox] [-f <filepath>] [-n] [-c] [-i <string>] [-s] [-a <string>] [-w <minutes>] [-d <integer>] [-v <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "type of org to create",
        "helpValue": "(scratch|sandbox)",
        "multiple": false,
        "options": ["scratch", "sandbox"],
        "default": "scratch"
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "description": "path to an org definition file",
        "multiple": false
      },
      "definitionjson": {
        "name": "definitionjson",
        "type": "option",
        "char": "j",
        "description": "org definition in JSON format",
        "hidden": true,
        "multiple": false
      },
      "nonamespace": {
        "name": "nonamespace",
        "type": "boolean",
        "char": "n",
        "description": "create the scratch org with no namespace",
        "allowNo": false
      },
      "noancestors": {
        "name": "noancestors",
        "type": "boolean",
        "char": "c",
        "description": "do not include second-generation package ancestors in the scratch org",
        "allowNo": false
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "description": "connected app consumer key; not supported for sandbox org creation",
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the created org as the default username",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "alias for the created org",
        "multiple": false
      },
      "env": {
        "name": "env",
        "type": "option",
        "char": "e",
        "description": "environment where the scratch org is created: sandbox*,virtual,prototype",
        "hidden": true,
        "helpValue": "(sandbox*|virtual|prototype)",
        "multiple": false,
        "options": ["sandbox*", "virtual", "prototype"],
        "default": "sandbox"
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "the streaming client socket timeout (in minutes)",
        "multiple": false,
        "default": {
          "quantity": 6,
          "unit": 0
        }
      },
      "durationdays": {
        "name": "durationdays",
        "type": "option",
        "char": "d",
        "description": "duration of the scratch org (in days) (default:7, min:1, max:30)",
        "multiple": false
      },
      "retry": {
        "name": "retry",
        "type": "option",
        "description": "Number of scratch org auth retries after scratch org is successfully signed up.",
        "hidden": true,
        "multiple": false,
        "default": 0
      }
    },
    "args": [],
    "help": "Specify a configuration file or provide key=value pairs while creating a scratch org or a sandbox. When creating scratch orgs, —targetdevhubusername (-v) must be a Dev Hub org. When creating sandboxes, the --targetusername (-u) must be a production org with sandbox licenses. The —type (-t) is required if creating a sandbox.\n\nExamples:\n   $ sfdx force:org:create -f config/enterprise-scratch-def.json -a MyScratchOrg\n   $ sfdx force:org:create edition=Developer -a MyScratchOrg -s -v devHub\n   $ sfdx force:org:create -f config/enterprise-scratch-def.json -a ScratchOrgWithOverrides username=testuser1@mycompany.org\n   $ sfdx force:org:create -t sandbox -f config/dev-sandbox-def.json -a MyDevSandbox -u prodOrg",
    "showProgress": true,
    "supportsDevhubUsername": false,
    "supportsUsername": false,
    "varargs": false,
    "orgType": "defaultdevhubusername",
    "flagsConfig": {
      "type": {
        "kind": "enum",
        "helpValue": "(scratch|sandbox)",
        "char": "t",
        "description": "type of org to create",
        "options": ["scratch", "sandbox"],
        "default": "scratch",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "definitionfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to an org definition file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "definitionjson": {
        "kind": "string",
        "char": "j",
        "description": "org definition in JSON format",
        "hidden": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "nonamespace": {
        "kind": "boolean",
        "char": "n",
        "description": "create the scratch org with no namespace",
        "allowNo": false,
        "type": "boolean"
      },
      "noancestors": {
        "kind": "boolean",
        "char": "c",
        "description": "do not include second-generation package ancestors in the scratch org",
        "allowNo": false,
        "type": "boolean"
      },
      "clientid": {
        "kind": "string",
        "char": "i",
        "description": "connected app consumer key; not supported for sandbox org creation",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the created org as the default username",
        "allowNo": false,
        "type": "boolean"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "alias for the created org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "env": {
        "kind": "enum",
        "helpValue": "(sandbox*|virtual|prototype)",
        "char": "e",
        "description": "environment where the scratch org is created: sandbox*,virtual,prototype",
        "hidden": true,
        "options": ["sandbox*", "virtual", "prototype"],
        "default": "sandbox",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "the streaming client socket timeout (in minutes)",
        "min": 2,
        "default": {
          "quantity": 6,
          "unit": 0
        },
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "durationdays": {
        "kind": "integer",
        "char": "d",
        "description": "duration of the scratch org (in days) (default:7, min:1, max:30)",
        "min": 1,
        "max": 30,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "retry": {
        "kind": "number",
        "hidden": true,
        "default": 0,
        "max": 10,
        "description": "Number of scratch org auth retries after scratch org is successfully signed up.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "org:list",
    "summary": "List all orgs you’ve created or authenticated to.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all orgs you've created or authenticated to:\n$ <%= config.bin %> <%= command.id %>",
      "List all orgs, including expired, deleted, and unknown-status orgs; don't include the connection status:\n$ <%= config.bin %> <%= command.id %> --skip-connection-status --all",
      "List orgs and remove local org authorization info about non-active scratch orgs:\n$ <%= config.bin %> <%= command.id %> --clean"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "List more information about each org.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "summary": "Include expired, deleted, and unknown-status scratch orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "clean": {
        "name": "clean",
        "type": "boolean",
        "summary": "Remove all local org authorizations for non-active scratch orgs. Use auth:logout to remove non-scratch orgs.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "dependsOn": ["clean"],
        "deprecateAliases": true,
        "aliases": ["noprompt"]
      },
      "skip-connection-status": {
        "name": "skip-connection-status",
        "type": "boolean",
        "summary": "Skip retrieving the connection status of non-scratch orgs.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["skipconnectionstatus"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "org:open",
    "summary": "Open your default scratch org, or another specified org, in a browser.",
    "description": "To open a specific page, specify the portion of the URL after \"https://MyDomainName.my.salesforce.com/\" as the value for the --path flag. For example, specify \"--path lightning\" to open Lightning Experience, or specify \"--path /apex/YourPage\" to open a Visualforce page.\n\nTo generate a URL but not launch it in your browser, specify --url-only.\n\nTo open in a specific browser, use the --browser flag. Supported browsers are \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens in your default browser.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Open your default org in your default browser:\n$ <%= config.bin %> <%= command.id %>",
      "Open the org with alias MyTestOrg1 in the Firefox browser:\n$ <%= config.bin %> <%= command.id %> --target-org MyTestOrg1 --browser firefox",
      "Display the navigation URL for the Lightning Experience page for your default org, but don't open the page in a browser:\n$ <%= config.bin %> <%= command.id %> --url-only --path lightning"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "browser": {
        "name": "browser",
        "type": "option",
        "char": "b",
        "summary": "Browser where the org opens.",
        "multiple": false,
        "options": ["chrome", "edge", "firefox"],
        "exclusive": ["url-only"]
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "summary": "Navigation URL path to open a specific page.",
        "multiple": false
      },
      "url-only": {
        "name": "url-only",
        "type": "boolean",
        "char": "r",
        "summary": "Display navigation URL, but don’t launch browser.",
        "allowNo": false,
        "aliases": ["urlonly"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "depreprecateAliases": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:create:shape",
    "summary": "Create a scratch org configuration (shape) based on the specified source org.",
    "description": "Scratch org shapes mimic the baseline setup (features, limits, edition, and Metadata API settings) of a source org without the extraneous data and metadata.\n\nRun \"<%= config.bin %> org list shape\" to view the available org shapes and their IDs.\n\nTo create a scratch org from an org shape, include the \"sourceOrg\" property in the scratch org definition file and set it to the org ID of the source org. Then create a scratch org with the \"<%= config.bin %> force:org:create\" command.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create an org shape for the source org with alias SourceOrg:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:delete:shape",
    "summary": "Delete all org shapes for a target org.",
    "description": "A source org can have only one active org shape. If you try to create an org shape for a source org that already has one, the previous shape is marked inactive and replaced by a new active shape. If you don’t want to create scratch orgs based on this shape, you can delete the org shape.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete all org shapes for the source org with alias SourceOrg:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg",
      "Delete all org shapes without prompting:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "p",
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["noprompt"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:list:shape",
    "summary": "List all org shapes you’ve created.",
    "description": "The output includes the alias, username, and ID of the source org, the status of the org shape creation, and more. Use the org ID to update your scratch org configuration file so you can create a scratch org based on this org shape.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all org shapes you've created:\n<%= config.bin %> <%= command.id %>",
      "List all org shapes in JSON format and write the output to a file:\n<%= config.bin %> <%= command.id %> --json > tmp/MyOrgShapeList.json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "List more information about each org shape.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "org:create:snapshot",
    "summary": "Create a snapshot of a scratch org.",
    "description": "A snapshot is a point-in-time copy of a scratch org. The copy is referenced by its unique name in a scratch org definition file.\n\nUse \"<%= config.bin %> org get snapshot\" to get details, including status, about a snapshot creation request.\n\nTo create a scratch org from a snapshot, include the \"snapshot\" option (instead of \"edition\") in the scratch org definition file and set it to the name of the snapshot. Then use \"<%= config.bin %> force:org:create\" to create the scratch org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a snapshot called \"Dependencies\" using the source scratch org ID and your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --source-org 00Dxx0000000000 --name Dependencies --description 'Contains PackageA v1.1.0'",
      "Create a snapshot called \"NightlyBranch\" using the source scratch org username and a Dev Hub org with alias NightlyDevHub:\n<%= config.bin %> <%= command.id %> --source-org myuser@myorg --name NightlyBranch --description 'Contains PkgA v2.1.0 and PkgB 3.3.0' --target-dev-hub NightlyDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "source-org": {
        "name": "source-org",
        "type": "option",
        "char": "o",
        "summary": "ID or locally authenticated username or alias of scratch org to snapshot.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["sourceorg"]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Unique name of snapshot.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["snapshotname"]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Description of snapshot.",
        "description": "Use this description to document the contents of the snapshot. We suggest that you include a reference point, such as a version control system tag or commit ID.",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:delete:snapshot",
    "summary": "Delete a scratch org snapshot.",
    "description": "Dev Hub admins can delete any snapshot, while users can delete only their own unless a Dev Hub admin gives the user Modify All permissions.",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a snapshot from the default Dev Hub using the snapshot ID:\n<%= config.bin %> <%= command.id %> --snapshot 0Oo...",
      "Delete a snapshot from the specified Dev Hub using the snapshot name:\n<%= config.bin %> <%= command.id %> --snapshot BaseSnapshot --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "snapshot": {
        "name": "snapshot",
        "type": "option",
        "char": "s",
        "summary": "Name or ID of snapshot to delete.",
        "description": "The IDs of scratch org snapshots start with 0Oo.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:get:snapshot",
    "summary": "Get details about a scratch org snapshot.",
    "description": "Snapshot creation can take a while. Use this command with the snapshot name or ID to check its creation status. After the status changes to Active, you can use the snapshot to create scratch orgs.\n\nTo create a snapshot, use the \"<%= config.bin %> org create snapshot\" command. To retrieve a list of all snapshots, use \"<%= config.bin %> org list snapshot\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Get snapshot details using its ID and the default Dev Hub org:\n<%= config.bin %> <%= command.id %> --snapshot 0Oo...",
      "Get snapshot details using its name from a Dev Hub org with alias SnapshotDevHub:\n<%= config.bin %> <%= command.id %> --snapshot Dependencies --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "snapshot": {
        "name": "snapshot",
        "type": "option",
        "char": "s",
        "summary": "Name or ID of snapshot to retrieve.",
        "description": "The IDs of scratch org snapshots start with 0Oo.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:list:snapshot",
    "summary": "List scratch org snapshots.",
    "description": "You can view all the snapshots in a Dev Hub that you have access to. If you’re an admin, you can see all snapshots associated with the Dev Hub org. If you’re a user, you can see only your snapshots unless a Dev Hub admin gives you View All permissions.\n\nTo create a snapshot, use the \"<%= config.bin %> org create snapshot\" command. To get details about a snapshot request, use \"<%= config.bin %> org get snapshot\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-signups",
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List snapshots in the default Dev Hub:\n<%= config.bin %> <%= command.id %>",
      "List snapshots in the Dev Hub with alias SnapshotDevHub:\n<%= config.bin %> <%= command.id %> --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:org:status",
    "summary": "Check the status of a sandbox, and if complete, authenticate to it.",
    "description": "Use this command to check the status of your sandbox creation or clone and, if the sandbox is ready, authenticate to it.\n\nUse the --wait (-w) parameter to specify the number of minutes that the command waits for the sandbox creation or clone to complete before returning control of the terminal to you.\n\nSet the --target-org (-o) parameter to the username or alias of the production org that contains the sandbox license.",
    "strict": true,
    "pluginName": "@salesforce/plugin-org",
    "pluginAlias": "@salesforce/plugin-org",
    "pluginType": "core",
    "state": "deprecated",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> <%= command.id %> --sandboxname DevSbx1 --setalias MySandbox -u prodOrg",
      "$ <%= config.bin %> <%= command.id %> --sandboxname DevSbx1 --wait 45 --setdefaultusername -u prodOrg"
    ],
    "deprecationOptions": {
      "to": "org:resume:sandbox",
      "version": "60.0"
    },
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "sandboxname": {
        "name": "sandboxname",
        "type": "option",
        "char": "n",
        "summary": "Name of the sandbox org to check status for.",
        "required": true,
        "multiple": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "summary": "Set the created or cloned org as your default.",
        "allowNo": false
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "summary": "Alias for the created or cloned org.",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait while polling for status.",
        "multiple": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package1:version:create",
    "summary": "Create a first-generation package version in the release org.",
    "description": "The package version is based on the contents of the specified metadata package. Omit --managed-released if you want to create an unmanaged package version.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a first-generation package version from the package with the specified ID and name the package version \"example\"; use your default org:\n<%= config.bin %> <%= command.id %> --package-id 033... --name example",
      "Same as previous example, but provide a description and wait for 30 minutes for the package version to be created; use the specified org:\n<%= config.bin %> <%= command.id %> --package-id 033... --name example --description \"example description\" --wait 30 --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package-id": {
        "name": "package-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the metadata package (starts with 033) of which you’re creating a new version.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["packageid"]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Package version name.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Package version description.",
        "multiple": false,
        "deprecateAliases": true
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "summary": "Package version in major.minor format, for example, 3.2.",
        "multiple": false,
        "deprecateAliases": true
      },
      "managed-released": {
        "name": "managed-released",
        "type": "boolean",
        "char": "m",
        "summary": "Create a managed package version.",
        "description": "To create a beta version, don’t include this parameter.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["managedrelease"]
      },
      "release-notes-url": {
        "name": "release-notes-url",
        "type": "option",
        "char": "r",
        "summary": "Release notes URL.",
        "description": "This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["releasenotesurl"]
      },
      "post-install-url": {
        "name": "post-install-url",
        "type": "option",
        "char": "p",
        "summary": "Post install URL.",
        "description": "The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["postinstallurl"]
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "Installation key for key-protected package (default: null).",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["installationkey"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Minutes to wait for the package version to be created (default: 2 minutes).",
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package1:version:create:get",
    "summary": "Retrieve the status of a package version creation request.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Get the status of the creation request for the package version with the specified ID in your default org:\n<%= config.bin %> <%= command.id %> --request-id 0HD...",
      "Same as previous example, but use the specified org:\n<%= config.bin %> <%= command.id %> --request-id 0HD... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "request-id": {
        "name": "request-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the PackageUploadRequest (starts with 0HD).",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["requestid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package1:version:display",
    "summary": "Display details about a first-generation package version.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display details about the first-generation package version with the specified ID in your default org:\n<%= config.bin %> <%= command.id %> --package-version-id 04t...",
      "Same as previous example, but use the specified org:\n<%= config.bin %> <%= command.id %> --package-version-id 04t... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package-version-id": {
        "name": "package-version-id",
        "type": "option",
        "char": "i",
        "summary": "ID (starts with 04t) of the metadata package version whose details you want to display.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["packageversionid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package1:version:list",
    "summary": "List package versions for the specified first-generation package or for the org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all first-generation package versions in your default org:\n<%= config.bin %> <%= command.id %>",
      "List package versions for the specified first-generation package in the specifief org:\n<%= config.bin %> <%= command.id %> --package-id 033... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package-id": {
        "name": "package-id",
        "type": "option",
        "char": "i",
        "summary": "Metadata package ID (starts with 033) whose package versions you want to list.",
        "description": "If not specified, shows all versions for all packages (managed and unmanaged) in the org.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["packageid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:package1:legacy:version:create",
    "description": "create a first-generation package version in the release org\n\nWARNING: We no longer maintain the current implementation of the \"force:package1:legacy:version:create\" command. You should instead use the \"force:package1:beta:legacy:version:create\" command, which is functionally the same. If you run into issues, file a report against the \"force:package1:beta:legacy:version:create\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nThe package version is based on the contents of the specified metadata package. Omit -m if you want to create an unmanaged package version.",
    "strict": true,
    "usage": "force:package1:legacy:version:create -i <id> -n <string> [-d <string>] [-v <string>] [-m] [-r <url>] [-p <url>] [-k <string>] [-w <number>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "packageid": {
        "name": "packageid",
        "type": "option",
        "char": "i",
        "description": "ID of the metadata package (starts with 033) of which you’re creating a new version",
        "required": true,
        "multiple": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "package version name",
        "required": true,
        "multiple": false
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "package version description",
        "required": false,
        "multiple": false
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "description": "package version in major.minor format, for example, 3.2",
        "required": false,
        "multiple": false
      },
      "managedreleased": {
        "name": "managedreleased",
        "type": "boolean",
        "char": "m",
        "description": "create a managed package version",
        "required": false,
        "allowNo": false
      },
      "releasenotesurl": {
        "name": "releasenotesurl",
        "type": "option",
        "char": "r",
        "description": "release notes URL",
        "required": false,
        "multiple": false
      },
      "postinstallurl": {
        "name": "postinstallurl",
        "type": "option",
        "char": "p",
        "description": "post install URL",
        "required": false,
        "multiple": false
      },
      "installationkey": {
        "name": "installationkey",
        "type": "option",
        "char": "k",
        "description": "installation key for key-protected package (default: null)",
        "required": false,
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "minutes to wait for the package version to be created (default: 2 minutes)",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "create a first-generation package version in the release org",
    "longDescription": "Creates a first-generation package version in the release org.",
    "help": "The package version is based on the contents of the specified metadata package. Omit -m if you want to create an unmanaged package version.",
    "requiresUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "packageid": {
        "kind": "id",
        "char": "i",
        "description": "ID of the metadata package (starts with 033) of which you’re creating a new version",
        "longDescription": "ID of the metadata package (starts with 033) of which you’re creating a new version.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "package version name",
        "longDescription": "Package version name.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "description": "package version description",
        "longDescription": "Package version description.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "version": {
        "kind": "string",
        "char": "v",
        "description": "package version in major.minor format, for example, 3.2",
        "longDescription": "Package version in major.minor format, for example, 3.2.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "managedreleased": {
        "kind": "boolean",
        "char": "m",
        "description": "create a managed package version",
        "longDescription": "Creates a managed package version. To create a beta version, don’t include this parameter.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "releasenotesurl": {
        "kind": "url",
        "char": "r",
        "description": "release notes URL",
        "longDescription": "The release notes URL. This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "postinstallurl": {
        "kind": "url",
        "char": "p",
        "description": "post install URL",
        "longDescription": "The post-install instructions URL. The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "installationkey": {
        "kind": "string",
        "char": "k",
        "description": "installation key for key-protected package (default: null)",
        "longDescription": "Installation key for creating the key-protected package. The default is null.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "number",
        "char": "w",
        "description": "minutes to wait for the package version to be created (default: 2 minutes)",
        "longDescription": "Minutes to wait for the package version to be created. The default is 2 minutes.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package1:legacy:version:create:get",
    "description": "retrieve the status of a package version creation request\n\nWARNING: We no longer maintain the current implementation of the \"force:package1:legacy:version:create:get\" command. You should instead use the \"force:package1:beta:legacy:version:create:get\" command, which is functionally the same. If you run into issues, file a report against the \"force:package1:beta:legacy:version:create:get\" command on https://github.com/forcedotcom/cli/issues.\n\nExamples:\n   $ sfdx force:package:legacy:version:create:report -i 08c...\n   $ sfdx force:package:legacy:version:create:report -i 08c... -v devhub@example.com",
    "strict": true,
    "usage": "force:package1:legacy:version:create:get -i <id> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "requestid": {
        "name": "requestid",
        "type": "option",
        "char": "i",
        "description": "PackageUploadRequest ID",
        "required": true,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "retrieve the status of a package version creation request",
    "longDescription": "Retrieves the status of a package version creation request.",
    "help": "Examples:\n   $ sfdx force:package:legacy:version:create:report -i 08c...\n   $ sfdx force:package:legacy:version:create:report -i 08c... -v devhub@example.com",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "requestid": {
        "kind": "id",
        "char": "i",
        "description": "PackageUploadRequest ID",
        "longDescription": "The ID of the PackageUploadRequest.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package1:legacy:version:display",
    "description": "display details about a first-generation package version\n\nWARNING: We no longer maintain the current implementation of the \"force:package1:legacy:version:display\" command. You should instead use the \"force:package1:beta:legacy:version:display\" command, which is functionally the same. If you run into issues, file a report against the \"force:package1:beta:legacy:version:display\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nDisplay detailed information about an individual package version, including metadata package ID, name, the release state, and build number.",
    "strict": true,
    "usage": "force:package1:legacy:version:display -i <id> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "packageversionid": {
        "name": "packageversionid",
        "type": "option",
        "char": "i",
        "description": "metadata package version ID (starts with 04t)",
        "required": true,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "display details about a first-generation package version",
    "longDescription": "Displays detailed information about an individual first-generation package version.",
    "help": "Display detailed information about an individual package version, including metadata package ID, name, the release state, and build number.",
    "requiresUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "packageversionid": {
        "kind": "id",
        "char": "i",
        "description": "metadata package version ID (starts with 04t)",
        "longDescription": "ID (starts with 04t) of the metadata package version whose details you want to display.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package1:legacy:version:list",
    "description": "list package versions for the specified first-generation package or for the org\n\nWARNING: We no longer maintain the current implementation of the \"force:package1:legacy:version:list\" command. You should instead use the \"force:package1:beta:legacy:version:list\" command, which is functionally the same. If you run into issues, file a report against the \"force:package1:beta:legacy:version:list\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nIf a metadata package ID is specified, lists all versions of the specified package. Otherwise, lists all package versions for the org. For each package version, the list includes the package version ID, metadata package ID, name, version number, and release state.",
    "strict": true,
    "usage": "force:package1:legacy:version:list [-i <id>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "packageid": {
        "name": "packageid",
        "type": "option",
        "char": "i",
        "description": "metadata package ID (starts with 033)",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "list package versions for the specified first-generation package or for the org",
    "longDescription": "Lists the versions for the specified package or all first-generation packages in the org.",
    "help": "If a metadata package ID is specified, lists all versions of the specified package. Otherwise, lists all package versions for the org. For each package version, the list includes the package version ID, metadata package ID, name, version number, and release state.",
    "supportsUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "packageid": {
        "kind": "id",
        "char": "i",
        "description": "metadata package ID (starts with 033)",
        "longDescription": "Metadata package ID (starts with 033) whose package versions you want to list. If not specified, shows all versions for all packages (managed and unmanaged) in the org.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "package:create",
    "summary": "Create a package.",
    "description": "First, use this command to create a package. Then create a package version.\n\nIf you don’t have a namespace defined in your sfdx-project.json file, use --no-namespace.\n\nYour --name value must be unique within your namespace.\n\nRun '<%= config.bin %> package list to list all packages in the Dev Hub org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create an unlocked package from the files in the \"force-app\" directory; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --name MyUnlockedPackage --package-type Unlocked --path force-app",
      "Create a managed packaged from the \"force-app\" directory files, give the package a description, and use the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --name MyManagedPackage --description \"Your Package Descripton\" --package-type Managed --path force-app --target-hub-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the package to create.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "package-type": {
        "name": "package-type",
        "type": "option",
        "char": "t",
        "summary": "Type of package.",
        "description": "The options for package type are Managed and Unlocked (Managed=DeveloperManagedSubscriberManaged, Unlocked=DeveloperControlledSubscriberEditable). These options determine upgrade and editability rules.",
        "required": true,
        "multiple": false,
        "options": ["Managed", "Unlocked"],
        "deprecateAliases": true,
        "aliases": ["packagetype"]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "Description of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "no-namespace": {
        "name": "no-namespace",
        "type": "boolean",
        "char": "e",
        "summary": "Create the package with no namespace; available only for unlocked packages.",
        "description": "This flag is useful when you’re migrating an existing org to packages. But use a namespaced package for new metadata.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["nonamespace"]
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "r",
        "summary": "Path to directory that contains the contents of the package.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "org-dependent": {
        "name": "org-dependent",
        "type": "boolean",
        "summary": "Depends on unpackaged metadata in the installation org; applies to unlocked packages only.",
        "description": "Use Source Tracking in Sandboxes to develop your org-dependent unlocked package. For more information, see \"Create Org-Dependent Unlocked Packages\" in the Salesforce DX Developer Guide.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["orgdependent"]
      },
      "error-notification-username": {
        "name": "error-notification-username",
        "type": "option",
        "char": "o",
        "summary": "Active Dev Hub user designated to receive email notifications for package errors.",
        "description": "Email notifications include information about unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["errornotificationusername"]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:delete",
    "summary": "Delete a package.",
    "description": "Specify the ID or alias of the package you want to delete.\n\nDelete unlocked and second-generation managed packages. Before you delete a package, first delete all associated package versions.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a package using its alias from your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\"",
      "Delete a package using its ID from the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 0Ho... --target-hub-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "n",
        "summary": "Don’t prompt before deleting the package.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["noprompt"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 0Ho) or alias of the package to delete.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "undelete": {
        "name": "undelete",
        "type": "boolean",
        "summary": "Undelete a deleted package.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:install",
    "summary": "Install a version of a package in the target org.",
    "description": "To install a package, specify a specific version of the package using the 04t package ID. The package and the version you specified installs in your default target org unless you supply the username for a different target org.\n\nFor package upgrades, to specify options for component deprecation or deletion of removed components, include an --upgrade-type value. To delete components that can be safely deleted and deprecate the others, specify --upgrade-type Mixed (the default). To deprecate all removed components, specify --upgrade-type DeprecateOnly. To delete all removed components, except for custom objects and custom fields, that don't have dependencies, specify --upgrade-type Delete. (Note: This option can result in the loss of data that is associated with the deleted components.) The default is Mixed.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Install a package version with the specified ID in the org with username \"me@example.com\":\n<%= config.bin %> <%= command.id %> --package 04t... --target-org me@example.com",
      "Install a package version with the specified alias into your default org:\n<%= config.bin %> <%= command.id %> --package awesome_package_alias",
      "Install a package version with an alias that includes spaces into your default org:\n<%= config.bin %> <%= command.id %> --package \"Awesome Package Alias\"",
      "Install an unlocked package version with the specified ID and deprecate all removed components:\n<%= config.bin %> <%= command.id %> --package 04t... --upgrade-type DeprecateOnly"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for installation status.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "Installation key for key-protected package (default: null).",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["installationkey"]
      },
      "publish-wait": {
        "name": "publish-wait",
        "type": "option",
        "char": "b",
        "summary": "Maximum number of minutes to wait for the Subscriber Package Version ID to become available in the target org before canceling the install request.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true,
        "aliases": ["publishwait"]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "r",
        "summary": "Don't prompt for confirmation.",
        "description": "Allows the following without an explicit confirmation response: 1) Remote Site Settings and Content Security Policy websites to send or receive data, and 2) --upgrade-type Delete to proceed.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["noprompt"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to install.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "apex-compile": {
        "name": "apex-compile",
        "type": "option",
        "char": "a",
        "summary": "Compile all Apex in the org and package, or only Apex in the package; unlocked packages only.",
        "description": "Applies to unlocked packages only. Specifies whether to compile all Apex in the org and package, or only the Apex in the package.\n\nFor package installs into production orgs, or any org that has Apex Compile on Deploy enabled, the platform compiles all Apex in the org after the package install or upgrade operation completes.\n\nThis approach assures that package installs and upgrades don’t impact the performance of an org, and is done even if --apex-compile package is specified.",
        "multiple": false,
        "options": ["all", "package"],
        "default": "all",
        "deprecateAliases": true,
        "aliases": ["apexcompile"]
      },
      "security-type": {
        "name": "security-type",
        "type": "option",
        "char": "s",
        "summary": "Security access type for the installed package. (deprecation notice: The default --security-type value will change from AllUsers to AdminsOnly in v47.0 or later.)",
        "multiple": false,
        "options": ["AllUsers", "AdminsOnly"],
        "default": "AdminsOnly",
        "deprecateAliases": true,
        "aliases": ["securitytype"]
      },
      "upgrade-type": {
        "name": "upgrade-type",
        "type": "option",
        "char": "t",
        "summary": "Upgrade type for the package installation; available only for unlocked packages.",
        "description": "For package upgrades, specifies whether to mark all removed components as deprecated (DeprecateOnly), to delete removed components that can be safely deleted and deprecate the others (Mixed), or to delete all removed components, except for custom objects and custom fields, that don't have dependencies (Delete). The default is Mixed. Can specify DeprecateOnly or Delete only for unlocked package upgrades.",
        "multiple": false,
        "options": ["DeprecateOnly", "Mixed", "Delete"],
        "default": "Mixed",
        "deprecateAliases": true,
        "aliases": ["upgradetype"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:install:report",
    "summary": "Retrieve the status of a package installation request.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve the status of a package installation request with the specified ID on your default org:\n<%= config.bin %> <%= command.id %> --request-id 0Hf...",
      "Similar to previous example, except use the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --request-id 0Hf... --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "request-id": {
        "name": "request-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the package install request you want to check; starts with 0Hf.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["requestid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:installed:list",
    "summary": "List the org’s installed packages.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List the installed packages in your default org:\n<%= config.bin %> <%= command.id %>",
      "List the installed packages in the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:list",
    "summary": "List all packages in the Dev Hub org.",
    "description": "Description",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all packages in the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --target-hub-org devhub@example.com",
      "List all packages details in the specified Dev Hub org, and show extended details about each package:\n<%= config.bin %> <%= command.id %> --target-hub-org devhub@example.com --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display extended package detail.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:uninstall",
    "summary": "Uninstall a second-generation package from the target org.",
    "description": "Specify the package ID for a second-generation package.\n\nTo list the org’s installed packages, run \"<%= config.bin %> package installed list\".\n\nTo uninstall a first-generation package, from Setup, enter Installed Packages in the Quick Find box, then select Installed Packages.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Uninstall a package with specified ID from an org with username me@example.com:\n<%= config.bin %> <%= command.id %> --package 04t... --target-org me@example.com",
      "Uninstall a package with the specified alias from your default org:\n<%= config.bin %> <%= command.id %> --package undesirable_package_alias",
      "Uninstall a package with an alias that contains spaces from your default org:\n<%= config.bin %> <%= command.id %> --package \"Undesirable Package Alias\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for uninstall status.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to uninstall.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:uninstall:report",
    "summary": "Retrieve the status of a package uninstall request.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve the status of a package uninstall in your default org using the specified request ID:\n<%= config.bin %> <%= command.id %> --request-id 06y...",
      "Similar to previous example, but use the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --request-id 06y... --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "request-id": {
        "name": "request-id",
        "type": "option",
        "char": "i",
        "summary": "ID of the package uninstall request you want to check; starts with 06y.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["requestid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:update",
    "summary": "Update package details.",
    "description": "Specify a new value for each option you want to update.\n\nRun \"<%= config.bin %> package list\" to list all packages in the Dev Hub org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Update the name of the package with the specified alias; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --name \"New Package Name\"",
      "Update the description of the package with the specified ID; uses the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 0Ho... --description \"New Package Description\" --target-hub-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 0Ho) or alias of the package to update.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "New name of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "summary": "New description of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "error-notification-username": {
        "name": "error-notification-username",
        "type": "option",
        "char": "o",
        "summary": "Active Dev Hub user designated to receive email notifications for package errors.",
        "description": "Email notifications include information about unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["errornotificationusername"]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:create",
    "summary": "Create a package version in the Dev Hub org.",
    "description": "The package version is based on the package contents in the specified directory.\n\nTo retrieve details about a package version create request, including status and package version ID (04t), run \"<%= config.bin %> package version create report -i 08c...\".\n\nWe recommend that you specify the --installation-key parameter to protect the contents of your package and to prevent unauthorized installation of your package.\n\nTo list package version creation requests in the org, run \"<%= config.bin %> package version create list\".\nTo promote a package version to released, you must use the --code-coverage parameter. The package must also meet the code coverage requirements. This requirement applies to both managed and unlocked packages.\n\nWe don’t calculate code coverage for org-dependent unlocked packages, or for package versions that specify --skip-validation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a package version from the contents of the \"common\" directory and give it an installation key of \"password123\"; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123",
      "Create a package version from a package with the specified alias; uses the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --installation-key password123 --target-hub-org devhub@example.com",
      "Create a package version from a package with the specified ID:\n<%= config.bin %> <%= command.id %> --package 0Ho... --installation-key password123",
      "Create a package version and skip the validation step:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123 --skip-validation"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "summary": "Name of the branch in your source control system that the package version is based on.",
        "multiple": false,
        "deprecateAliases": true
      },
      "build-instance": {
        "name": "build-instance",
        "type": "option",
        "char": "s",
        "summary": "Instance where the package version will be created, such as NA50.",
        "hidden": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["buildinstance"]
      },
      "code-coverage": {
        "name": "code-coverage",
        "type": "boolean",
        "char": "c",
        "summary": "Calculate and store the code coverage percentage by running the packaged Apex tests included in this package version.",
        "description": "Before you can promote and release a managed or unlocked package version, the Apex code must meet a minimum 75% code coverage requirement. We don’t calculate code coverage for org-dependent unlocked packages or for package versions that specify --skip-validation.",
        "allowNo": false,
        "exclusive": ["skip-validation"],
        "deprecateAliases": true,
        "aliases": ["codecoverage"]
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "Path to a definition file similar to scratch org definition file that contains the list of features and org preferences that the metadata of the package version depends on.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["definitionfile"]
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "Installation key for key-protected package. (either --installation-key or --installation-key-bypass is required)",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["installationkey"]
      },
      "installation-key-bypass": {
        "name": "installation-key-bypass",
        "type": "boolean",
        "char": "x",
        "summary": "Bypass the installation key requirement. (either --installation-key or --installation-key-bypass is required)",
        "description": "If you bypass this requirement, anyone can install your package.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["installationkeybypass"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 0Ho) or alias of the package to create a version of.",
        "multiple": false,
        "deprecateAliases": true
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "d",
        "summary": "Path to the directory that contains the contents of the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "post-install-script": {
        "name": "post-install-script",
        "type": "option",
        "summary": "Name of the post-install script; applies to managed packages only.",
        "description": "The post-install script is an Apex class within this package that is run in the installing org after installations or upgrades of this package version.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["postinstallscript"]
      },
      "post-install-url": {
        "name": "post-install-url",
        "type": "option",
        "summary": "Post-install instructions URL.",
        "description": "The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["postinstallurl"]
      },
      "preserve": {
        "name": "preserve",
        "type": "boolean",
        "char": "r",
        "summary": "Preserve temp files that would otherwise be deleted.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      },
      "releasenotes-url": {
        "name": "releasenotes-url",
        "type": "option",
        "summary": "Release notes URL.",
        "description": "This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["releasenotesurl"]
      },
      "skip-ancestor-check": {
        "name": "skip-ancestor-check",
        "type": "boolean",
        "summary": "Overrides ancestry requirements, which allows you to specify a package ancestor that isn’t the highest released package version.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["skipancestorcheck"]
      },
      "skip-validation": {
        "name": "skip-validation",
        "type": "boolean",
        "summary": "Skip validation during package version creation; you can’t promote unvalidated package versions.",
        "description": "Skips validation of dependencies, package ancestors, and metadata during package version creation. Skipping validation reduces the time it takes to create a new package version, but you can promote only validated package versions. Skipping validation can suppress important errors that can surface at a later stage. You can specify skip validation or code coverage, but not both. Code coverage is calculated during validation.",
        "allowNo": false,
        "exclusive": ["code-coverage"],
        "deprecateAliases": true,
        "aliases": ["skipvalidation"]
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "summary": "Package version’s tag.",
        "multiple": false,
        "deprecateAliases": true
      },
      "uninstall-script": {
        "name": "uninstall-script",
        "type": "option",
        "summary": "Uninstall script name; applies to managed packages only.",
        "description": "The uninstall script is an Apex class within this package that is run in the installing org after uninstallations of this package.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["uninstallscript"]
      },
      "validate-schema": {
        "name": "validate-schema",
        "type": "boolean",
        "char": "j",
        "summary": "Validate the sfdx-project.json file against the JSON schema.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["validateschema"]
      },
      "version-description": {
        "name": "version-description",
        "type": "option",
        "char": "e",
        "summary": "Description of the package version to be created; overrides the sfdx-project.json value.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["versiondescription"]
      },
      "version-name": {
        "name": "version-name",
        "type": "option",
        "char": "a",
        "summary": "Name of the package version to be created; overrides the sfdx-project.json value.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["versionname"]
      },
      "version-number": {
        "name": "version-number",
        "type": "option",
        "char": "n",
        "summary": "Version number of the package version to be created; overrides the sfdx-project.json value.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["versionnumber"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "summary": "Number of minutes to wait for the package version to be created.",
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "deprecateAliases": true
      },
      "language": {
        "name": "language",
        "type": "option",
        "summary": "Language for the package.",
        "description": "Specify the language using a language code listed under \"Supported Languages\" in Salesforce Help. If no language is specified, the language defaults to the language of the Dev Hub user who created the package.",
        "multiple": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display verbose command output.",
        "description": "Display verbose command output. When polling for the status of the creation, this will output status and timeout data on a separate line for each poll request, which is useful in CI systems where timeouts can occur with long periods of no output from commands.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:create:list",
    "summary": "List package version creation requests.",
    "description": "Shows the details of each request to create a package version in the Dev Hub org.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nTo get information about a specific request, run \"<%= config.bin %> package version create report\" and supply the request ID.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all package version creation requests in your default Dev Hub org:\n<%= config.bin %> <%= command.id %>",
      "List package version creation requests from the last 3 days in the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --created-last-days 3 --target-hub-org",
      "List package version creation requests with status Error:\n<%= config.bin %> <%= command.id %> --status Error",
      "List package version creation requests with status InProgress:\n<%= config.bin %> <%= command.id %> --status InProgress",
      "List package version creation requests with status Success that were created today:\n<%= config.bin %> <%= command.id %> --created-last-days 0 --status Success"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "created-last-days": {
        "name": "created-last-days",
        "type": "option",
        "char": "c",
        "summary": "Number of days since the request was created, starting at 00:00:00 of first day to now. Use 0 for today.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["createdlastdays"]
      },
      "status": {
        "name": "status",
        "type": "option",
        "char": "s",
        "summary": "Status of the version creation request, used to filter the list.",
        "multiple": false,
        "options": ["Queued", "InProgress", "Success", "Error"],
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:create:report",
    "summary": "Retrieve details about a package version creation request.",
    "description": "Specify the request ID for which you want to view details. If applicable, the command displays errors related to the request.\n\nTo show all requests in the org, run \"<%= config.bin %> package version create list\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve details about the package version creation request with the specified ID; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package-create-request-id 08c...",
      "Retrieve details about the specified package version creation request in the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package-create-request-id 08c... --target-hub-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package-create-request-id": {
        "name": "package-create-request-id",
        "type": "option",
        "char": "i",
        "summary": "ID (starts with 08c) of the package version creation request you want to display.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["packagecreaterequestid"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:delete",
    "summary": "Delete a package version.",
    "description": "Specify the ID or alias of the package version you want to delete.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Delete a package version with the specified alias using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\"",
      "Delete a package version with the specified ID using the Dev Hub org with username \"devhub@example.com\":\n<%= config.bin %> <%= command.id %> --package 04t... --target-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "n",
        "summary": "Don’t prompt before deleting the package version.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["noprompt"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to delete.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "undelete": {
        "name": "undelete",
        "type": "boolean",
        "summary": "Undelete a deleted package version.",
        "hidden": true,
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:displayancestry",
    "summary": "Display the ancestry tree for a 2GP managed package version.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display the ancestry tree for a package version with the specified alias, using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package package_version_alias",
      "Similar to previous example, but display the output in DOT code:\n<%= config.bin %> <%= command.id %> --package package_version_alias --dot-code",
      "Display the ancestry tree for a package with the specified ID, using the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package OHo... --target-hub-org devhub@example.com",
      "Display the ancestry tree of a package version with the specified ID, using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t..."
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID or alias of the package (starts with 0Ho) or package version (starts with 04t) to display ancestry for.",
        "description": "If you specify a package ID (starts with 0Ho) or alias, the ancestor tree for every package version associated with the package ID is displayed. If you specify a package version (starts with 04t) or alias, the ancestry tree of the specified package version is displayed.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "dot-code": {
        "name": "dot-code",
        "type": "boolean",
        "summary": "Display the ancestry tree in DOT code.",
        "description": "You can use the DOT code output in graph visualization software to create tree visualizations.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["dotcode"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display both the package version ID (starts with 04t) and the version number (major.minor.patch.build) in the ancestry tree.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:list",
    "summary": "List all package versions in the Dev Hub org.",
    "description": "Description",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List package versions in your default Dev Hub org that were created in the last 3 days; show only the released versions and order the list using the PatchVersion field. Display extended details about each package version:\n<%= config.bin %> <%= command.id %> --verbose --created-last-days 3 --released --order-by PatchVersion",
      "List the released package versions for the two specified packages that were modified today; use the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --packages 0Ho000000000000,0Ho000000000001 --released --modified-last-days 0 --target-hub-org devhub@example.com",
      "List all released package versions in your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --released",
      "List package versions that were modified today in your default Dev Hub org; show limited details about each one:\n<%= config.bin %> <%= command.id %> --concise --modified-last-days 0",
      "List released package versions that were created in the last 3 days in your default Dev Hub org; show limited details:\n<%= config.bin %> <%= command.id %> --concise --created-last-days 3 --released",
      "List released package versions that were modified today for the two packages with specified aliases in your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --packages exp-mgr,exp-mgr-util --released --modified-last-days 0"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "created-last-days": {
        "name": "created-last-days",
        "type": "option",
        "char": "c",
        "summary": "Number of days since the request was created, starting at 00:00:00 of first day to now. Use 0 for today.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["createdlastdays"]
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "summary": "Display limited package version details.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "modified-last-days": {
        "name": "modified-last-days",
        "type": "option",
        "char": "m",
        "summary": "Number of days since the items were modified, starting at 00:00:00 of first day to now. Use 0 for today.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["modifiedlastdays"]
      },
      "packages": {
        "name": "packages",
        "type": "option",
        "char": "p",
        "summary": "Comma-delimited list of packages (aliases or 0Ho IDs) to list.",
        "multiple": false,
        "deprecateAliases": true
      },
      "released": {
        "name": "released",
        "type": "boolean",
        "char": "r",
        "summary": "Display released versions only (IsReleased=true).",
        "allowNo": false,
        "deprecateAliases": true
      },
      "order-by": {
        "name": "order-by",
        "type": "option",
        "char": "o",
        "summary": "Package version fields used to order the list.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["orderby"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display extended package version details.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:promote",
    "summary": "Promote a package version to released.",
    "description": "Supply the ID or alias of the package version you want to promote. Promotes the package version to released status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Promote the package version with the specified ID to released; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t...",
      "Promote the package version with the specified alias to released; uses the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package awesome_package_alias --target-hub-org devhub@example.com",
      "Promote the package version with an alias that has spaces to released:\n<%= config.bin %> <%= command.id %> --package \"Awesome Package Alias\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package version to promote.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "no-prompt": {
        "name": "no-prompt",
        "type": "boolean",
        "char": "n",
        "summary": "Don't prompt to confirm setting the package version as released.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["noprompt"]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:report",
    "summary": "Retrieve details about a package version in the Dev Hub org.",
    "description": "To update package version values, run \"<%= config.bin %> package version update\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Retrieve details about the package version with the specified ID from your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t...",
      "Retrieve details about the package version with the specified alias (that contains spaces) from the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --target-hub-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package to retrieve details for.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Display extended package version details.",
        "allowNo": false,
        "deprecateAliases": true
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "package:version:update",
    "summary": "Update a package version.",
    "description": "Specify a new value for each option you want to update.\n\nTo display details about a package version, run \"<%= config.bin %> package version display\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-packaging",
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Update the package version that has the specified alias (that contains spaces) with a new installation key \"password123\"; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --installation-key password123",
      "Update the package version that has the specified ID with a new branch and tag; use the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package 04t... --branch main --tag 'Release 1.0.7' --target-hub-org devhub@example.com",
      "Update the package version that has the specified ID with a new description:\n<%= config.bin %> <%= command.id %> --package 04t... --version-description \"New Package Version Description\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      },
      "target-hub-org": {
        "name": "target-hub-org",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "summary": "ID (starts with 04t) or alias of the package to update a version of.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "version-name": {
        "name": "version-name",
        "type": "option",
        "char": "a",
        "summary": "New package version name.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["versionname"]
      },
      "version-description": {
        "name": "version-description",
        "type": "option",
        "char": "e",
        "summary": "New package version description.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["versiondescription"]
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "summary": "New package version branch.",
        "multiple": false,
        "deprecateAliases": true
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "summary": "New package version tag.",
        "multiple": false,
        "deprecateAliases": true
      },
      "installation-key": {
        "name": "installation-key",
        "type": "option",
        "char": "k",
        "summary": "New installation key for key-protected package (default: null)",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["installationkey"]
      }
    },
    "args": {},
    "requiresProject": true,
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:package:legacy:create",
    "description": "create a package\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:create\" command. You should instead use the \"force:package:beta:legacy:create\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:create\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nFirst, use this command to create a package. Then create a package version.\n\nIf you don’t have a namespace defined in your sfdx-project.json file, use --nonamespace.\n\nYour --name value must be unique within your namespace.\n\nExamples:\n   $ sfdx force:package:legacy:create -n YourPackageName -t Unlocked -r force-app\n   $ sfdx force:package:legacy:create -n YourPackageName -d \"Your Package Descripton\" -t Unlocked -r force-app\n\nRun 'sfdx force:package:legacy:list' to list all packages in the Dev Hub org.",
    "strict": true,
    "usage": "force:package:legacy:create -n <string> -t Managed|Unlocked -r <directory> [-d <string>] [-e] [--orgdependent] [-o <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "package name",
        "required": true,
        "multiple": false
      },
      "packagetype": {
        "name": "packagetype",
        "type": "option",
        "char": "t",
        "description": "package type",
        "required": true,
        "helpValue": "(Managed|Unlocked)",
        "multiple": false,
        "options": ["Managed", "Unlocked"]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "package description",
        "required": false,
        "multiple": false
      },
      "nonamespace": {
        "name": "nonamespace",
        "type": "boolean",
        "char": "e",
        "description": "creates the package with no namespace; available only for unlocked packages.",
        "required": false,
        "allowNo": false
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "r",
        "description": "path to directory that contains the contents of the package",
        "required": true,
        "multiple": false
      },
      "orgdependent": {
        "name": "orgdependent",
        "type": "boolean",
        "description": "depends on unpackaged metadata in the installation org. Applies to unlocked packages only.",
        "required": false,
        "allowNo": false
      },
      "errornotificationusername": {
        "name": "errornotificationusername",
        "type": "option",
        "char": "o",
        "description": "active Dev Hub user designated to receive email notifications for package errors",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "create a package",
    "longDescription": "Creates a package.",
    "help": "First, use this command to create a package. Then create a package version.\n\nIf you don’t have a namespace defined in your sfdx-project.json file, use --nonamespace.\n\nYour --name value must be unique within your namespace.\n\nExamples:\n   $ sfdx force:package:legacy:create -n YourPackageName -t Unlocked -r force-app\n   $ sfdx force:package:legacy:create -n YourPackageName -d \"Your Package Descripton\" -t Unlocked -r force-app\n\nRun 'sfdx force:package:legacy:list' to list all packages in the Dev Hub org.",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "package name",
        "longDescription": "Name of the package to create.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packagetype": {
        "kind": "enum",
        "helpValue": "(Managed|Unlocked)",
        "char": "t",
        "description": "package type",
        "longDescription": "Package type for the package.\nThe options for package type are Managed and Unlocked (Managed=DeveloperManagedSubscriberManaged, Unlocked=DeveloperControlledSubscriberEditable).\nThese options determine upgrade and editability rules.",
        "required": true,
        "options": ["Managed", "Unlocked"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "description": "package description",
        "longDescription": "Description of the package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "nonamespace": {
        "kind": "boolean",
        "char": "e",
        "description": "creates the package with no namespace; available only for unlocked packages.",
        "longDescription": "Creates the package with no namespace. Available only for unlocked packages. Useful when you’re migrating an existing org to packages. But, use a namespaced package for new metadata.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "path": {
        "kind": "directory",
        "char": "r",
        "description": "path to directory that contains the contents of the package",
        "longDescription": "The path to the directory that contains the contents of the package.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "orgdependent": {
        "kind": "boolean",
        "description": "depends on unpackaged metadata in the installation org. Applies to unlocked packages only.",
        "longDescription": "Package depends on unpackaged metadata in the installation org. Applies to unlocked packages only.\nUse Source Tracking in Sandboxes to develop your org-dependent unlocked package.\nFor more information, see \"Create Org-Dependent Unlocked Packages\" in the Salesforce DX Developer Guide.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "errornotificationusername": {
        "kind": "string",
        "char": "o",
        "description": "active Dev Hub user designated to receive email notifications for package errors",
        "longDescription": "An active Dev Hub org user designated to receive email notifications for unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:delete",
    "description": "delete a package\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:delete\" command. You should instead use the \"force:package:beta:legacy:delete\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:delete\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nSpecify the ID or alias of the package you want to delete.\n\nExamples:\n   $ sfdx force:package:legacy:delete -p \"Your Package Alias\"\n   $ sfdx force:package:legacy:delete -p 0Ho...",
    "strict": true,
    "usage": "force:package:legacy:delete -p <string> [-n] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "n",
        "description": "don’t prompt before deleting the package",
        "required": false,
        "allowNo": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 0Ho) or alias of the package to delete",
        "required": true,
        "multiple": false
      },
      "undelete": {
        "name": "undelete",
        "type": "boolean",
        "description": "undelete a deleted package",
        "hidden": true,
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "delete a package",
    "longDescription": "Delete unlocked and second-generation managed packages. Before you delete a package, first delete all associated package versions.",
    "help": "Specify the ID or alias of the package you want to delete.\n\nExamples:\n   $ sfdx force:package:legacy:delete -p \"Your Package Alias\"\n   $ sfdx force:package:legacy:delete -p 0Ho...",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "noprompt": {
        "kind": "boolean",
        "char": "n",
        "description": "don’t prompt before deleting the package",
        "longDescription": "don’t prompt before deleting the package",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 0Ho) or alias of the package to delete",
        "longDescription": "The ID (starts with 0Ho) or alias of the package to delete.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "undelete": {
        "kind": "boolean",
        "description": "undelete a deleted package",
        "longDescription": "Undelete a deleted package.",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:install",
    "description": "install a package in the target org\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:install\" command. You should instead use the \"force:package:beta:legacy:install\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:install\" command on https://github.com/forcedotcom/cli/issues.\n\nSupply the ID of the package version to install. The package installs in your default target org unless you supply the username for a different target org.\n\nFor package upgrades, to specify options for component deprecation or deletion of removed components, include an --upgradetype value. To delete components that can be safely deleted and deprecate the others, specify --upgradetype Mixed (the default). To deprecate all removed components, specify --upgradetype DeprecateOnly. To delete all removed components, except for custom objects and custom fields, that don't have dependencies, specify --upgradetype Delete. (Note: This option can result in the loss of data that is associated with the deleted components.) The default is Mixed.\n\nExamples:\n   $ sfdx force:package:legacy:install --package 04t... -u me@example.com\n   $ sfdx force:package:legacy:install --package awesome_package_alias\n   $ sfdx force:package:legacy:install --package \"Awesome Package Alias\"\n   $ sfdx force:package:legacy:install --package 04t... -t DeprecateOnly",
    "strict": true,
    "usage": "force:package:legacy:install [-w <minutes>] [-k <string>] [-b <minutes>] [-r] [-p <string>] [-a all|package] [-s AllUsers|AdminsOnly] [-t DeprecateOnly|Mixed|Delete] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "number of minutes to wait for installation status",
        "required": false,
        "multiple": false
      },
      "installationkey": {
        "name": "installationkey",
        "type": "option",
        "char": "k",
        "description": "installation key for key-protected package (default: null)",
        "required": false,
        "multiple": false
      },
      "publishwait": {
        "name": "publishwait",
        "type": "option",
        "char": "b",
        "description": "number of minutes to wait for subscriber package version ID to become available in the target org ",
        "required": false,
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "r",
        "description": "do not prompt for confirmation",
        "required": false,
        "allowNo": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package version to install",
        "required": false,
        "multiple": false
      },
      "apexcompile": {
        "name": "apexcompile",
        "type": "option",
        "char": "a",
        "description": "compile all Apex in the org and package, or only Apex in the package; unlocked packages only",
        "required": false,
        "helpValue": "(all|package)",
        "multiple": false,
        "options": ["all", "package"],
        "default": "all"
      },
      "securitytype": {
        "name": "securitytype",
        "type": "option",
        "char": "s",
        "description": "security access type for the installed package (deprecation notice: The default --securitytype value will change from AllUsers to AdminsOnly in v47.0 or later.)",
        "required": false,
        "helpValue": "(AllUsers|AdminsOnly)",
        "multiple": false,
        "options": ["AllUsers", "AdminsOnly"],
        "default": "AdminsOnly"
      },
      "upgradetype": {
        "name": "upgradetype",
        "type": "option",
        "char": "t",
        "description": "the upgrade type for the package installation; available only for unlocked packages",
        "required": false,
        "helpValue": "(DeprecateOnly|Mixed|Delete)",
        "multiple": false,
        "options": ["DeprecateOnly", "Mixed", "Delete"],
        "default": "Mixed"
      }
    },
    "args": [],
    "theDescription": "install a package in the target org",
    "longDescription": "Installs a package in the target org.",
    "help": "Supply the ID of the package version to install. The package installs in your default target org unless you supply the username for a different target org.\n\nFor package upgrades, to specify options for component deprecation or deletion of removed components, include an --upgradetype value. To delete components that can be safely deleted and deprecate the others, specify --upgradetype Mixed (the default). To deprecate all removed components, specify --upgradetype DeprecateOnly. To delete all removed components, except for custom objects and custom fields, that don't have dependencies, specify --upgradetype Delete. (Note: This option can result in the loss of data that is associated with the deleted components.) The default is Mixed.\n\nExamples:\n   $ sfdx force:package:legacy:install --package 04t... -u me@example.com\n   $ sfdx force:package:legacy:install --package awesome_package_alias\n   $ sfdx force:package:legacy:install --package \"Awesome Package Alias\"\n   $ sfdx force:package:legacy:install --package 04t... -t DeprecateOnly",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "number of minutes to wait for installation status",
        "longDescription": "Maximum number of minutes to wait for installation status. The default is 0.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "installationkey": {
        "kind": "string",
        "char": "k",
        "description": "installation key for key-protected package (default: null)",
        "longDescription": "Installation key for installing a key-protected package. The default is null.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "publishwait": {
        "kind": "minutes",
        "char": "b",
        "description": "number of minutes to wait for subscriber package version ID to become available in the target org ",
        "longDescription": "Maximum number of minutes to wait for the Subscriber Package Version ID to become available in the target org before canceling the install request. The default is 0.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "r",
        "description": "do not prompt for confirmation",
        "longDescription": "Allows the following without an explicit confirmation response: 1) Remote Site Settings and Content Security Policy websites to send or receive data, and 2) --upgradetype Delete to proceed.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package version to install",
        "longDescription": "The ID (starts with 04t) or alias of the package version to install.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apexcompile": {
        "kind": "enum",
        "helpValue": "(all|package)",
        "char": "a",
        "description": "compile all Apex in the org and package, or only Apex in the package; unlocked packages only",
        "longDescription": "Applies to unlocked packages only. Specifies whether to compile all Apex in the org and package, or only the Apex in the package.\nFor package installs into production orgs, or any org that has Apex Compile on Deploy enabled, the platform compiles all Apex in the org after the package install or upgrade operation completes.\nThis approach assures that package installs and upgrades don’t impact the performance of an org, and is done even if --apexcompile package is specified.",
        "required": false,
        "default": "all",
        "options": ["all", "package"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "securitytype": {
        "kind": "enum",
        "helpValue": "(AllUsers|AdminsOnly)",
        "char": "s",
        "description": "security access type for the installed package (deprecation notice: The default --securitytype value will change from AllUsers to AdminsOnly in v47.0 or later.)",
        "longDescription": "Security access type for the installed package.\nDeprecation notice: The --securitytype parameter's default value will change from AllUsers to AdminsOnly in an upcoming release (v47.0 or later).",
        "required": false,
        "default": "AdminsOnly",
        "options": ["AllUsers", "AdminsOnly"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "upgradetype": {
        "kind": "enum",
        "helpValue": "(DeprecateOnly|Mixed|Delete)",
        "char": "t",
        "description": "the upgrade type for the package installation; available only for unlocked packages",
        "longDescription": "For package upgrades, specifies whether to mark all removed components as deprecated (DeprecateOnly), to delete removed components that can be safely deleted and deprecate the others (Mixed), or to delete all removed components, except for custom objects and custom fields, that don't have dependencies (Delete). The default is Mixed. Can specify DeprecateOnly or Delete only for unlocked package upgrades.",
        "required": false,
        "default": "Mixed",
        "options": ["DeprecateOnly", "Mixed", "Delete"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:install:report",
    "description": "retrieve the status of a package installation request\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:install:report\" command. You should instead use the \"force:package:beta:legacy:install:report\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:install:report\" command on https://github.com/forcedotcom/cli/issues.\n\nExamples:\n   $ sfdx force:package:legacy:install:report -i 0Hf...\n   $ sfdx force:package:legacy:install:report -i 0Hf... -u me@example.com",
    "strict": true,
    "usage": "force:package:legacy:install:report -i <id> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "requestid": {
        "name": "requestid",
        "type": "option",
        "char": "i",
        "description": "ID of the package install request you want to check",
        "required": true,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "retrieve the status of a package installation request",
    "longDescription": "Retrieves the status of a package installation request.",
    "help": "Examples:\n   $ sfdx force:package:legacy:install:report -i 0Hf...\n   $ sfdx force:package:legacy:install:report -i 0Hf... -u me@example.com",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "requestid": {
        "kind": "id",
        "char": "i",
        "description": "ID of the package install request you want to check",
        "longDescription": "The ID of the package install request you want to check.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:installed:list",
    "description": "list the org’s installed packages\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:installed:list\" command. You should instead use the \"force:package:beta:legacy:installed:list\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:installed:list\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nExamples:\n   $ sfdx force:package:legacy:installed:list\n   $ sfdx force:package:legacy:installed:list -u me@example.com",
    "strict": true,
    "usage": "force:package:legacy:installed:list [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "list the org’s installed packages",
    "longDescription": "Lists all packages installed in the target org.",
    "help": "Examples:\n   $ sfdx force:package:legacy:installed:list\n   $ sfdx force:package:legacy:installed:list -u me@example.com",
    "orgType": "defaultusername",
    "requiresUsername": false,
    "requiresProject": false,
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:list",
    "description": "list all packages in the Dev Hub org\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:list\" command. You should instead use the \"force:package:beta:legacy:list\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:list\" command on https://github.com/forcedotcom/cli/issues.\n\nYou can view the namespace, IDs, and other details for each package.\n\nExamples:\n   $ sfdx force:package:legacy:list -v devhub@example.com\n   $ sfdx force:package:legacy:list -v devhub@example.com --verbose",
    "strict": true,
    "usage": "force:package:legacy:list [-v <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "display extended package detail",
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "list all packages in the Dev Hub org",
    "longDescription": "Lists all packages in the Dev Hub org.",
    "help": "You can view the namespace, IDs, and other details for each package.\n\nExamples:\n   $ sfdx force:package:legacy:list -v devhub@example.com\n   $ sfdx force:package:legacy:list -v devhub@example.com --verbose",
    "requiresProject": false,
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "flagsConfig": {
      "verbose": {
        "description": "display extended package detail",
        "longDescription": "Displays extended package details.",
        "type": "builtin"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:uninstall",
    "description": "uninstall a second-generation package from the target org\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:uninstall\" command. You should instead use the \"force:package:beta:legacy:uninstall\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:uninstall\" command on https://github.com/forcedotcom/cli/issues.\n\nSpecify the package ID for a second-generation package.\n\nExamples:\n   $ sfdx force:package:legacy:uninstall -p 04t... -u me@example.com\n   $ sfdx force:package:legacy:uninstall -p undesirable_package_alias\n   $ sfdx force:package:legacy:uninstall -p \"Undesirable Package Alias\"\n\nTo list the org’s installed packages, run \"sfdx force:package:legacy:installed:list\".\n\nTo uninstall a first-generation package, from Setup, enter Installed Packages in the Quick Find box, then select Installed Packages.",
    "strict": true,
    "usage": "force:package:legacy:uninstall [-w <minutes>] [-p <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "number of minutes to wait for uninstall status",
        "required": false,
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package version to uninstall",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "uninstall a second-generation package from the target org",
    "longDescription": "Uninstalls a second-generation package from the target org. To uninstall a first-generation package, use the Salesforce user interface.",
    "help": "Specify the package ID for a second-generation package.\n\nExamples:\n   $ sfdx force:package:legacy:uninstall -p 04t... -u me@example.com\n   $ sfdx force:package:legacy:uninstall -p undesirable_package_alias\n   $ sfdx force:package:legacy:uninstall -p \"Undesirable Package Alias\"\n\nTo list the org’s installed packages, run \"sfdx force:package:legacy:installed:list\".\n\nTo uninstall a first-generation package, from Setup, enter Installed Packages in the Quick Find box, then select Installed Packages.",
    "requiresProject": false,
    "orgType": "defaultusername",
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "number of minutes to wait for uninstall status",
        "longDescription": "Maximum number of minutes to wait for uninstall status. The default is 0.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package version to uninstall",
        "longDescription": "The ID (starts with 04t) or alias of the package version to uninstall.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:uninstall:report",
    "description": "retrieve status of package uninstall request\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:uninstall:report\" command. You should instead use the \"force:package:beta:legacy:uninstall:report\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:uninstall:report\" command on https://github.com/forcedotcom/cli/issues.\n\nExamples:\n   $ sfdx force:package:legacy:uninstall:report -i 06y...\n   $ sfdx force:package:legacy:uninstall:report -i 06y... -u me@example.com",
    "strict": true,
    "usage": "force:package:legacy:uninstall:report -i <id> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "requestid": {
        "name": "requestid",
        "type": "option",
        "char": "i",
        "description": "ID of the package uninstall request you want to check",
        "required": true,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "retrieve status of package uninstall request",
    "longDescription": "Retrieves the status of a package uninstall request.",
    "help": "Examples:\n   $ sfdx force:package:legacy:uninstall:report -i 06y...\n   $ sfdx force:package:legacy:uninstall:report -i 06y... -u me@example.com",
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "requestid": {
        "kind": "id",
        "char": "i",
        "description": "ID of the package uninstall request you want to check",
        "longDescription": "The ID of the package uninstall request you want to check.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:update",
    "description": "update package details\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:update\" command. You should instead use the \"force:package:beta:legacy:update\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:update\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nSpecify a new value for each option you want to update.\n\nExamples:\n   $ sfdx force:package:legacy:update -p \"Your Package Alias\" -n \"New Package Name\"\n   $ sfdx force:package:legacy:update -p 0Ho... -d \"New Package Description\"\n\nRun \"sfdx force:package:legacy:list\" to list all packages in the Dev Hub org.",
    "strict": true,
    "usage": "force:package:legacy:update -p <string> [-n <string>] [-d <string>] [-o <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 0Ho) or alias of the package to update",
        "required": true,
        "multiple": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "new package name",
        "required": false,
        "multiple": false
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "new package description",
        "required": false,
        "multiple": false
      },
      "errornotificationusername": {
        "name": "errornotificationusername",
        "type": "option",
        "char": "o",
        "description": "active Dev Hub user designated to receive email notifications for package errors",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "update package details",
    "longDescription": "Updates details about a package. Does not create a package version.",
    "help": "Specify a new value for each option you want to update.\n\nExamples:\n   $ sfdx force:package:legacy:update -p \"Your Package Alias\" -n \"New Package Name\"\n   $ sfdx force:package:legacy:update -p 0Ho... -d \"New Package Description\"\n\nRun \"sfdx force:package:legacy:list\" to list all packages in the Dev Hub org.",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 0Ho) or alias of the package to update",
        "longDescription": "The ID (starts with 0Ho) or alias of the package to update.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "new package name",
        "longDescription": "New name of the package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "description": "new package description",
        "longDescription": "New description of the package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "errornotificationusername": {
        "kind": "string",
        "char": "o",
        "description": "active Dev Hub user designated to receive email notifications for package errors",
        "longDescription": "An active Dev Hub org user designated to receive email notifications for unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:create",
    "description": "create a package version\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:create\" command. You should instead use the \"force:package:beta:legacy:version:create\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:create\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nThe package version is based on the package contents in the specified directory.\n\nTo retrieve details about a package version create request, including status and package version ID (04t), run \"sfdx force:package:legacy:version:create:report -i 08c...\".\n\nWe recommend that you specify the --installationkey parameter to protect the contents of your package and to prevent unauthorized installation of your package.\n\nTo list package version creation requests in the org, run \"sfdx force:package:legacy:version:create:list\".\n\nTo promote a package version to released, you must use the --codecoverage parameter. The package must also meet the code coverage requirements. This requirement applies to both managed and unlocked packages.\n\nWe don’t calculate code coverage for org-dependent unlocked packages, or for package versions that specify --skipvalidation.\n\nExamples:\n   $ sfdx force:package:legacy:version:create -d common -k password123\n   $ sfdx force:package:legacy:version:create -p \"Your Package Alias\" -k password123\n   $ sfdx force:package:legacy:version:create -p 0Ho... -k password123\n   $ sfdx force:package:legacy:version:create -d common -k password123 --skipvalidation",
    "strict": true,
    "usage": "force:package:legacy:version:create [-p <string>] [-d <directory>] [-f <filepath>] [-b <string>] [-t <string>] [-k <string>] [-x] [-w <minutes>] [-a <string>] [-n <string>] [-e <string>] [-c] [--releasenotesurl <url>] [--postinstallurl <url>] [--postinstallscript <string>] [--uninstallscript <string>] [--skipvalidation] [--skipancestorcheck] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 0Ho) or alias of the package to create a version of",
        "required": false,
        "multiple": false
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "d",
        "description": "path to directory that contains the contents of the package",
        "required": false,
        "multiple": false
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "description": "path to a definition file similar to scratch org definition file that contains the list of features and org preferences that the metadata of the package version depends on",
        "required": false,
        "multiple": false
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "description": "the package version’s branch",
        "required": false,
        "multiple": false
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "description": "the package version’s tag",
        "required": false,
        "multiple": false
      },
      "installationkey": {
        "name": "installationkey",
        "type": "option",
        "char": "k",
        "description": "installation key for key-protected package (either --installationkey or --installationkeybypass is required)",
        "required": false,
        "multiple": false
      },
      "installationkeybypass": {
        "name": "installationkeybypass",
        "type": "boolean",
        "char": "x",
        "description": "bypass the installation key requirement (either --installationkey or --installationkeybypass is required)",
        "required": false,
        "allowNo": false
      },
      "preserve": {
        "name": "preserve",
        "type": "boolean",
        "char": "r",
        "description": "temp files are preserved that would otherwise be deleted",
        "hidden": true,
        "required": false,
        "allowNo": false
      },
      "validateschema": {
        "name": "validateschema",
        "type": "boolean",
        "char": "j",
        "description": "sfdx-project.json is validated against JSON schema",
        "hidden": true,
        "required": false,
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "minutes to wait for the package version to be created",
        "required": false,
        "multiple": false,
        "default": {
          "quantity": 0,
          "unit": 0
        }
      },
      "buildinstance": {
        "name": "buildinstance",
        "type": "option",
        "char": "s",
        "description": "the instance where the package version will be created——for example, NA50",
        "hidden": true,
        "required": false,
        "multiple": false
      },
      "versionname": {
        "name": "versionname",
        "type": "option",
        "char": "a",
        "description": "the name of the package version to be created",
        "required": false,
        "multiple": false
      },
      "versionnumber": {
        "name": "versionnumber",
        "type": "option",
        "char": "n",
        "description": "the version number of the package version to be created",
        "required": false,
        "multiple": false
      },
      "versiondescription": {
        "name": "versiondescription",
        "type": "option",
        "char": "e",
        "description": "the description of the package version to be created",
        "required": false,
        "multiple": false
      },
      "codecoverage": {
        "name": "codecoverage",
        "type": "boolean",
        "char": "c",
        "description": "calculate the code coverage by running the packaged Apex tests",
        "required": false,
        "allowNo": false
      },
      "releasenotesurl": {
        "name": "releasenotesurl",
        "type": "option",
        "description": "release notes URL",
        "required": false,
        "multiple": false
      },
      "postinstallurl": {
        "name": "postinstallurl",
        "type": "option",
        "description": "post-install URL",
        "required": false,
        "multiple": false
      },
      "postinstallscript": {
        "name": "postinstallscript",
        "type": "option",
        "description": "post-install script name; managed packages only",
        "required": false,
        "multiple": false
      },
      "uninstallscript": {
        "name": "uninstallscript",
        "type": "option",
        "description": "uninstall script name; managed packages only",
        "required": false,
        "multiple": false
      },
      "skipvalidation": {
        "name": "skipvalidation",
        "type": "boolean",
        "description": "skip validation during package version creation; you can’t promote unvalidated package versions",
        "required": false,
        "allowNo": false
      },
      "skipancestorcheck": {
        "name": "skipancestorcheck",
        "type": "boolean",
        "description": "Overrides ancestry requirements.",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "create a package version",
    "longDescription": "Creates a package version in the Dev Hub org.",
    "help": "The package version is based on the package contents in the specified directory.\n\nTo retrieve details about a package version create request, including status and package version ID (04t), run \"sfdx force:package:legacy:version:create:report -i 08c...\".\n\nWe recommend that you specify the --installationkey parameter to protect the contents of your package and to prevent unauthorized installation of your package.\n\nTo list package version creation requests in the org, run \"sfdx force:package:legacy:version:create:list\".\n\nTo promote a package version to released, you must use the --codecoverage parameter. The package must also meet the code coverage requirements. This requirement applies to both managed and unlocked packages.\n\nWe don’t calculate code coverage for org-dependent unlocked packages, or for package versions that specify --skipvalidation.\n\nExamples:\n   $ sfdx force:package:legacy:version:create -d common -k password123\n   $ sfdx force:package:legacy:version:create -p \"Your Package Alias\" -k password123\n   $ sfdx force:package:legacy:version:create -p 0Ho... -k password123\n   $ sfdx force:package:legacy:version:create -d common -k password123 --skipvalidation",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 0Ho) or alias of the package to create a version of",
        "longDescription": "The ID (starts with 0Ho) or alias of the package to create a version of.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "path": {
        "kind": "directory",
        "char": "d",
        "description": "path to directory that contains the contents of the package",
        "longDescription": "The path to the directory that contains the contents of the package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "definitionfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to a definition file similar to scratch org definition file that contains the list of features and org preferences that the metadata of the package version depends on",
        "longDescription": "The path to a definition file similar to scratch org definition file that contains the list of features and org preferences that the metadata of the package version depends on.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "branch": {
        "kind": "string",
        "char": "b",
        "description": "the package version’s branch",
        "longDescription": "Name of the branch in your source control system that the package version is based on.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tag": {
        "kind": "string",
        "char": "t",
        "description": "the package version’s tag",
        "longDescription": "The package version’s tag.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "installationkey": {
        "kind": "string",
        "char": "k",
        "description": "installation key for key-protected package (either --installationkey or --installationkeybypass is required)",
        "longDescription": "Installation key for creating the key-protected package. Either an --installationkey value or the --installationkeybypass flag is required.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "installationkeybypass": {
        "kind": "boolean",
        "char": "x",
        "description": "bypass the installation key requirement (either --installationkey or --installationkeybypass is required)",
        "longDescription": "Bypasses the installation key requirement. If you bypass this requirement, anyone can install your package. Either an --installationkey value or the --installationkeybypass flag is required.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "preserve": {
        "kind": "boolean",
        "char": "r",
        "description": "temp files are preserved that would otherwise be deleted",
        "longDescription": "Specifies that the temp files are preserved that would otherwise be deleted",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      },
      "validateschema": {
        "kind": "boolean",
        "char": "j",
        "description": "sfdx-project.json is validated against JSON schema",
        "longDescription": "Specifies that the sfdx-project.json file should be validated against JSON schema.",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "minutes to wait for the package version to be created",
        "longDescription": "The number of minutes to wait for the package version to be created.",
        "required": false,
        "default": {
          "quantity": 0,
          "unit": 0
        },
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "buildinstance": {
        "kind": "string",
        "char": "s",
        "description": "the instance where the package version will be created——for example, NA50",
        "longDescription": "The instance where the package version will be created——for example, NA50.",
        "required": false,
        "hidden": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "versionname": {
        "kind": "string",
        "char": "a",
        "description": "the name of the package version to be created",
        "longDescription": "The name of the package version to be created. Overrides the sfdx-project.json value.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "versionnumber": {
        "kind": "string",
        "char": "n",
        "description": "the version number of the package version to be created",
        "longDescription": "The version number of the package version to be created. Overrides the sfdx-project.json value.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "versiondescription": {
        "kind": "string",
        "char": "e",
        "description": "the description of the package version to be created",
        "longDescription": "The description of the package version to be created. Overrides the sfdx-project.json value.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "codecoverage": {
        "kind": "boolean",
        "char": "c",
        "description": "calculate the code coverage by running the packaged Apex tests",
        "longDescription": "Calculate and store the code coverage percentage by running the Apex tests included in this package version. Before you can promote and release a managed or unlocked package version, the Apex code must meet a minimum 75% code coverage requirement. We don’t calculate code coverage for org-dependent unlocked packages or for package versions that specify --skipvalidation.",
        "required": false,
        "default": false,
        "allowNo": false,
        "type": "boolean"
      },
      "releasenotesurl": {
        "kind": "url",
        "description": "release notes URL",
        "longDescription": "The release notes URL. This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "postinstallurl": {
        "kind": "url",
        "description": "post-install URL",
        "longDescription": "The post-install instructions URL. The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "postinstallscript": {
        "kind": "string",
        "description": "post-install script name; managed packages only",
        "longDescription": "Applies to managed packages only. The post-install script name. The post-install script is an Apex class within this package that is run in the installing org after installations or upgrades of this package version.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "uninstallscript": {
        "kind": "string",
        "description": "uninstall script name; managed packages only",
        "longDescription": "Applies to managed packages only. The uninstall script name. The uninstall script is an Apex class within this package that is run in the installing org after uninstallations of this package.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "skipvalidation": {
        "kind": "boolean",
        "description": "skip validation during package version creation; you can’t promote unvalidated package versions",
        "longDescription": "Skips validation of dependencies, package ancestors, and metadata during package version creation. Skipping validation reduces the time it takes to create a new package version, but you can promote only validated package versions. Skipping validation can suppress important errors that can surface at a later stage. You can specify skip validation or code coverage, but not both. Code coverage is calculated during validation.",
        "required": false,
        "default": false,
        "allowNo": false,
        "type": "boolean"
      },
      "skipancestorcheck": {
        "kind": "boolean",
        "description": "Overrides ancestry requirements.",
        "longDescription": "Override ancestry requirements, which allows you to specify a package ancestor that isn’t the highest released package version.",
        "required": false,
        "default": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:create:list",
    "description": "list package version creation requests\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:create:list\" command. You should instead use the \"force:package:beta:legacy:version:create:list\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:create:list\" command on https://github.com/forcedotcom/cli/issues.\n\nShows the details of each request to create a package version in the Dev Hub org.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nTo get information about a specific request, run \"sfdx force:package:legacy:version:create:report\" and supply the request ID.\n\nExamples:\n   $ sfdx force:package:legacy:version:create:list\n   $ sfdx force:package:legacy:version:create:list --createdlastdays 3\n   $ sfdx force:package:legacy:version:create:list --status Error\n   $ sfdx force:package:legacy:version:create:list -s InProgress\n   $ sfdx force:package:legacy:version:create:list -c 3 -s Success",
    "strict": true,
    "usage": "force:package:legacy:version:create:list [-c <number>] [-s Queued|InProgress|Success|Error] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "createdlastdays": {
        "name": "createdlastdays",
        "type": "option",
        "char": "c",
        "description": "created in the last specified number of days (starting at 00:00:00 of first day to now; 0 for today)",
        "required": false,
        "multiple": false
      },
      "status": {
        "name": "status",
        "type": "option",
        "char": "s",
        "description": "filter the list by version creation request status",
        "required": false,
        "helpValue": "(Queued|InProgress|Success|Error)",
        "multiple": false,
        "options": ["Queued", "InProgress", "Success", "Error"]
      }
    },
    "args": [],
    "theDescription": "list package version creation requests",
    "longDescription": "Lists all requests to create second-generation package versions in the Dev Hub org.",
    "help": "Shows the details of each request to create a package version in the Dev Hub org.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nTo get information about a specific request, run \"sfdx force:package:legacy:version:create:report\" and supply the request ID.\n\nExamples:\n   $ sfdx force:package:legacy:version:create:list\n   $ sfdx force:package:legacy:version:create:list --createdlastdays 3\n   $ sfdx force:package:legacy:version:create:list --status Error\n   $ sfdx force:package:legacy:version:create:list -s InProgress\n   $ sfdx force:package:legacy:version:create:list -c 3 -s Success",
    "requiresProject": false,
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "flagsConfig": {
      "createdlastdays": {
        "kind": "number",
        "char": "c",
        "description": "created in the last specified number of days (starting at 00:00:00 of first day to now; 0 for today)",
        "longDescription": "Filters the list based on the specified maximum number of days since the request was created (starting at 00:00:00 of first day to now; 0 for today).",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "status": {
        "kind": "enum",
        "helpValue": "(Queued|InProgress|Success|Error)",
        "char": "s",
        "description": "filter the list by version creation request status",
        "longDescription": "Filters the list based on the status of version creation requests.",
        "required": false,
        "options": ["Queued", "InProgress", "Success", "Error"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:create:report",
    "description": "retrieve details about a package version creation request\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:create:report\" command. You should instead use the \"force:package:beta:legacy:version:create:report\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:create:report\" command on https://github.com/forcedotcom/cli/issues.\n\nSpecify the request ID for which you want to view details. If applicable, the command displays errors related to the request.\n\nExamples:\n   $ sfdx force:package:legacy:version:create:report -i 08c...\n   $ sfdx force:package:legacy:version:create:report -i 08c... -v devhub@example.com\n\nTo show all requests in the org, run \"sfdx force:package:legacy:version:create:list\".",
    "strict": true,
    "usage": "force:package:legacy:version:create:report -i <id> [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "packagecreaterequestid": {
        "name": "packagecreaterequestid",
        "type": "option",
        "char": "i",
        "description": "package version creation request ID (starts with 08c)",
        "required": true,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "retrieve details about a package version creation request",
    "longDescription": "Retrieves details about a package version creation request in the Dev Hub org.",
    "help": "Specify the request ID for which you want to view details. If applicable, the command displays errors related to the request.\n\nExamples:\n   $ sfdx force:package:legacy:version:create:report -i 08c...\n   $ sfdx force:package:legacy:version:create:report -i 08c... -v devhub@example.com\n\nTo show all requests in the org, run \"sfdx force:package:legacy:version:create:list\".",
    "requiresProject": false,
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "flagsConfig": {
      "packagecreaterequestid": {
        "kind": "id",
        "char": "i",
        "description": "package version creation request ID (starts with 08c)",
        "longDescription": "The ID (starts with 08c) of the package version creation request you want to display.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:delete",
    "description": "delete a package version\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:delete\" command. You should instead use the \"force:package:beta:legacy:version:delete\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:delete\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nSpecify the ID or alias of the package version you want to delete.\n\nExamples:\n   $ sfdx force:package:legacy:version:delete -p \"Your Package Alias\"\n   $ sfdx force:package:legacy:version:delete -p 04t...",
    "strict": true,
    "usage": "force:package:legacy:version:delete -p <string> [-n] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "n",
        "description": "don’t prompt before deleting the package version",
        "required": false,
        "allowNo": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package to update a version of",
        "required": true,
        "multiple": false
      },
      "undelete": {
        "name": "undelete",
        "type": "boolean",
        "description": "undelete a deleted package version",
        "hidden": true,
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "delete a package version",
    "longDescription": "Delete unlocked and second-generation managed package versions.",
    "help": "Specify the ID or alias of the package version you want to delete.\n\nExamples:\n   $ sfdx force:package:legacy:version:delete -p \"Your Package Alias\"\n   $ sfdx force:package:legacy:version:delete -p 04t...",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "noprompt": {
        "kind": "boolean",
        "char": "n",
        "description": "don’t prompt before deleting the package version",
        "longDescription": "don’t prompt before deleting the package version",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package to update a version of",
        "longDescription": "The ID (starts with 04t) or alias of the package version to delete.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "undelete": {
        "kind": "boolean",
        "description": "undelete a deleted package version",
        "longDescription": "Undelete a deleted package version.",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:displayancestry",
    "description": "display the ancestry tree for a 2GP managed package version",
    "strict": true,
    "usage": "force:package:legacy:version:displayancestry -p <string> [--dotcode] [-v <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID or alias of the package (starts with 0Ho) or package version (starts with 04t) to display ancestry for",
        "required": true,
        "multiple": false
      },
      "dotcode": {
        "name": "dotcode",
        "type": "boolean",
        "description": "display the ancestry tree in DOT code",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "display both the package version ID (starts with 04t) and the version number (major.minor.patch.build) in the ancestry tree",
        "allowNo": false
      }
    },
    "args": [],
    "longDescription": "Displays the ancestry tree for a 2GP managed package version.",
    "help": "Examples:\n   $ sfdx force:package:legacy:version:displayancestry -p package_version_alias\n   $ sfdx force:package:legacy:version:displayancestry -p package_version_alias --dotcode\n   $ sfdx force:package:legacy:version:displayancestry -p OHo...\n   $ sfdx force:package:legacy:version:displayancestry -p 04t...",
    "showProgress": false,
    "varargs": false,
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "SELECT_ALL_ROOTS": "SELECT SubscriberPackageVersionId FROM Package2Version",
    "SELECT_ROOT_INFO": "SELECT MajorVersion, MinorVersion, PatchVersion, BuildNumber FROM Package2Version",
    "SELECT_CHILD_INFO": "SELECT SubscriberPackageVersionId, MajorVersion, MinorVersion, PatchVersion, BuildNumber FROM Package2Version",
    "SELECT_PARENT_INFO": "SELECT AncestorId, MajorVersion, MinorVersion, PatchVersion, BuildNumber FROM Package2Version",
    "SELECT_PACKAGE_CONTAINER_OPTIONS": "SELECT ContainerOptions FROM Package2",
    "SELECT_PACKAGE_VERSION_CONTAINER_OPTIONS": "SELECT Package2ContainerOptions FROM SubscriberPackageVersion",
    "flagsConfig": {
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID or alias of the package (starts with 0Ho) or package version (starts with 04t) to display ancestry for",
        "longDescription": "The ID or alias of the package or package version to display ancestry for. If you specify a package ID (starts with 0Ho) or alias, the ancestor tree for every package version associated with the package ID is displayed.\nIf you specify a package version (starts with 04t) or alias, the ancestry tree of the specified package version is displayed.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "dotcode": {
        "kind": "boolean",
        "description": "display the ancestry tree in DOT code",
        "longDescription": "Displays the ancestry tree in DOT code. You can use the DOT code output in graph visualization software to create tree visualizations.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "description": "display both the package version ID (starts with 04t) and the version number (major.minor.patch.build) in the ancestry tree",
        "longDescription": "Displays both the package version ID (starts with 04t) and the version number (major.minor.patch.build) in the ancestry tree.",
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:list",
    "description": "list all package versions in the Dev Hub org\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:list\" command. You should instead use the \"force:package:beta:legacy:version:list\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:list\" command on https://github.com/forcedotcom/cli/issues.\n\nDisplays details of each package version in the org.\n\nUse --concise or --verbose to display limited or additional details, respectively.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nExamples:\n   $ sfdx force:package:legacy:version:list --verbose --createdlastdays 3 --released --orderby PatchVersion\n   $ sfdx force:package:legacy:version:list --packages 0Ho000000000000,0Ho000000000001 --released --modifiedlastdays 0\n   $ sfdx force:package:legacy:version:list --released\n   $ sfdx force:package:legacy:version:list --concise --modifiedlastdays 0\n   $ sfdx force:package:legacy:version:list --concise -c 3 -r\n   $ sfdx force:package:legacy:version:list --packages exp-mgr,exp-mgr-util --released --modifiedlastdays 0",
    "strict": true,
    "usage": "force:package:legacy:version:list [-c <number>] [-m <number>] [-p <array>] [-r] [-o <array>] [-v <string>] [--apiversion <string>] [--concise] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "createdlastdays": {
        "name": "createdlastdays",
        "type": "option",
        "char": "c",
        "description": "created in the last specified number of days (starting at 00:00:00 of first day to now; 0 for today)",
        "required": false,
        "multiple": false
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "description": "display limited package version details",
        "allowNo": false
      },
      "modifiedlastdays": {
        "name": "modifiedlastdays",
        "type": "option",
        "char": "m",
        "description": "list items modified in the specified last number of days (starting at 00:00:00 of first day to now; 0 for today)",
        "required": false,
        "multiple": false
      },
      "packages": {
        "name": "packages",
        "type": "option",
        "char": "p",
        "description": "filter results on specified comma-delimited packages (aliases or 0Ho IDs)",
        "required": false,
        "multiple": false
      },
      "released": {
        "name": "released",
        "type": "boolean",
        "char": "r",
        "description": "display released versions only",
        "required": false,
        "allowNo": false
      },
      "orderby": {
        "name": "orderby",
        "type": "option",
        "char": "o",
        "description": "order by the specified package version fields",
        "required": false,
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "display extended package version details",
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "list all package versions in the Dev Hub org",
    "longDescription": "Lists all package versions in the Dev Hub org.",
    "help": "Displays details of each package version in the org.\n\nUse --concise or --verbose to display limited or additional details, respectively.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nExamples:\n   $ sfdx force:package:legacy:version:list --verbose --createdlastdays 3 --released --orderby PatchVersion\n   $ sfdx force:package:legacy:version:list --packages 0Ho000000000000,0Ho000000000001 --released --modifiedlastdays 0\n   $ sfdx force:package:legacy:version:list --released\n   $ sfdx force:package:legacy:version:list --concise --modifiedlastdays 0\n   $ sfdx force:package:legacy:version:list --concise -c 3 -r\n   $ sfdx force:package:legacy:version:list --packages exp-mgr,exp-mgr-util --released --modifiedlastdays 0",
    "requiresProject": false,
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "flagsConfig": {
      "createdlastdays": {
        "kind": "number",
        "char": "c",
        "description": "created in the last specified number of days (starting at 00:00:00 of first day to now; 0 for today)",
        "longDescription": "Filters the list based on the specified maximum number of days since the request was created (starting at 00:00:00 of first day to now; 0 for today).",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "concise": {
        "description": "display limited package version details",
        "longDescription": "Displays limited package version details.",
        "type": "builtin"
      },
      "modifiedlastdays": {
        "kind": "number",
        "char": "m",
        "description": "list items modified in the specified last number of days (starting at 00:00:00 of first day to now; 0 for today)",
        "longDescription": "Lists the items modified in the specified last number of days, starting at 00:00:00 of first day to now. Use 0 for today.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packages": {
        "kind": "array",
        "char": "p",
        "description": "filter results on specified comma-delimited packages (aliases or 0Ho IDs)",
        "longDescription": "Filters results on the specified comma-delimited packages (aliases or 0Ho IDs).",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "released": {
        "kind": "boolean",
        "char": "r",
        "description": "display released versions only",
        "longDescription": "Displays released versions only (IsReleased=true).",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "orderby": {
        "kind": "array",
        "char": "o",
        "description": "order by the specified package version fields",
        "longDescription": "Orders the list by the specified package version fields.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "display extended package version details",
        "longDescription": "Displays extended package version details.",
        "type": "builtin"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:promote",
    "description": "promote a package version to released\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:promote\" command. You should instead use the \"force:package:beta:legacy:version:promote\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:promote\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nSupply the ID or alias of the package version you want to promote. Promotes the package version to released status.\n\nExamples:\n   $ sfdx force:package:legacy:version:promote -p 04t...\n   $ sfdx force:package:legacy:version:promote -p awesome_package_alias\n   $ sfdx force:package:legacy:version:promote -p \"Awesome Package Alias\"",
    "strict": true,
    "usage": "force:package:legacy:version:promote -p <string> [-n] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package version to promote",
        "required": true,
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "n",
        "description": "no prompt to confirm setting the package version as released",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "promote a package version to released",
    "longDescription": "Promotes a package version to released status.",
    "help": "Supply the ID or alias of the package version you want to promote. Promotes the package version to released status.\n\nExamples:\n   $ sfdx force:package:legacy:version:promote -p 04t...\n   $ sfdx force:package:legacy:version:promote -p awesome_package_alias\n   $ sfdx force:package:legacy:version:promote -p \"Awesome Package Alias\"",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package version to promote",
        "longDescription": "The ID (starts with 04t) or alias of the package version to promote.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "n",
        "description": "no prompt to confirm setting the package version as released",
        "longDescription": "Do not prompt to confirm setting the package version as released.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:report",
    "description": "retrieve details about a package version in the Dev Hub org\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:report\" command. You should instead use the \"force:package:beta:legacy:version:report\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:report\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nExamples:\n   $ sfdx force:package:legacy:version:report -p 04t...\n   $ sfdx force:package:legacy:version:report -p \"Your Package Alias\"\n\nTo update package version values, run \"sfdx force:package:legacy:version:update\".",
    "strict": true,
    "usage": "force:package:legacy:version:report -p <string> [-v <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package to retrieve details for",
        "required": true,
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "displays extended package version details",
        "allowNo": false
      }
    },
    "args": [],
    "theDescription": "retrieve details about a package version in the Dev Hub org",
    "longDescription": "Retrieves details about a package version in the Dev Hub org.",
    "help": "Examples:\n   $ sfdx force:package:legacy:version:report -p 04t...\n   $ sfdx force:package:legacy:version:report -p \"Your Package Alias\"\n\nTo update package version values, run \"sfdx force:package:legacy:version:update\".",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package to retrieve details for",
        "longDescription": "The ID (starts with 04t) or alias of the package to retrieve details for.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "displays extended package version details",
        "longDescription": "Displays extended package version details.",
        "type": "builtin"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:package:legacy:version:update",
    "description": "update a package version\n\nWARNING: We no longer maintain the current implementation of the \"force:package:legacy:version:update\" command. You should instead use the \"force:package:beta:legacy:version:update\" command, which is functionally the same. If you run into issues, file a report against the \"force:package:beta:legacy:version:update\" command on https://github.com/forcedotcom/cli/issues.\n\nNOTE: This command must be run from within a project.\n\nSpecify a new value for each option you want to update.\n\nExamples:\n   $ sfdx force:package:legacy:version:update -p \"Your Package Alias\" -k password123\n   $ sfdx force:package:legacy:version:update -p 04t... -b main -t 'Release 1.0.7'\n   $ sfdx force:package:legacy:version:update -p 04t... -e \"New Package Version Description\"\n\nTo display details about a package version, run \"sfdx force:package:legacy:version:report\".",
    "strict": true,
    "usage": "force:package:legacy:version:update -p <string> [-a <string>] [-e <string>] [-b <string>] [-t <string>] [-k <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "package": {
        "name": "package",
        "type": "option",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package to update a version of",
        "required": true,
        "multiple": false
      },
      "versionname": {
        "name": "versionname",
        "type": "option",
        "char": "a",
        "description": "new package version name",
        "required": false,
        "multiple": false
      },
      "versiondescription": {
        "name": "versiondescription",
        "type": "option",
        "char": "e",
        "description": "new package version description",
        "required": false,
        "multiple": false
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "description": "new package version branch",
        "required": false,
        "multiple": false
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "description": "new package version tag",
        "required": false,
        "multiple": false
      },
      "installationkey": {
        "name": "installationkey",
        "type": "option",
        "char": "k",
        "description": "new installation key for key-protected package (default: null)",
        "required": false,
        "multiple": false
      }
    },
    "args": [],
    "theDescription": "update a package version",
    "longDescription": "Updates a second-generation package version in the Dev Hub org.",
    "help": "Specify a new value for each option you want to update.\n\nExamples:\n   $ sfdx force:package:legacy:version:update -p \"Your Package Alias\" -k password123\n   $ sfdx force:package:legacy:version:update -p 04t... -b main -t 'Release 1.0.7'\n   $ sfdx force:package:legacy:version:update -p 04t... -e \"New Package Version Description\"\n\nTo display details about a package version, run \"sfdx force:package:legacy:version:report\".",
    "orgType": "defaultdevhubusername",
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "package": {
        "kind": "string",
        "char": "p",
        "description": "ID (starts with 04t) or alias of the package to update a version of",
        "longDescription": "The ID (starts with 04t) or alias of the package to update a version of.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "versionname": {
        "kind": "string",
        "char": "a",
        "description": "new package version name",
        "longDescription": "The new package version name.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "versiondescription": {
        "kind": "string",
        "char": "e",
        "description": "new package version description",
        "longDescription": "The new package version description.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "branch": {
        "kind": "string",
        "char": "b",
        "description": "new package version branch",
        "longDescription": "The new package version branch.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tag": {
        "kind": "string",
        "char": "t",
        "description": "new package version tag",
        "longDescription": "The new package version tag.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "installationkey": {
        "kind": "string",
        "char": "k",
        "description": "new installation key for key-protected package (default: null)",
        "longDescription": "The new installation key for the key-protected package. The default is null.",
        "required": false,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "project:generate",
    "summary": "Generate a Salesforce DX project.",
    "description": "A Salesforce DX project has a specific structure and a configuration file (sfdx-project.json) that identifies the directory as a Salesforce DX project. This command generates the necessary configuration files and directories to get you started.\n\nBy default, the generated sfdx-project.json file sets the sourceApiVersion property to the default API version currently used by Salesforce CLI. To specify a different version, set the apiVersion configuration variable. For example: \"sf config set apiVersion=57.0 --global\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a project called \"mywork\":\n<%= config.bin %> <%= command.id %> --name mywork",
      "Similar to previous example, but generate the files in a directory called \"myapp\":\n<%= config.bin %> <%= command.id %> --name mywork --default-package-dir myapp",
      "Similar to prevoius example, but also generate a default package.xml manifest file:\n<%= config.bin %> <%= command.id %> --name mywork --default-package-dir myapp --manifest",
      "Generate a project with the minimum files and directories:\n<%= config.bin %> <%= command.id %> --name mywork --template empty"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated project.",
        "description": "Generates a project directory with this name; any valid directory name is accepted. Also sets the \"name\" property in the sfdx-project.json file to this name.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["projectname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for project creation.",
        "description": "The template determines the sample configuration files and directories that this command generates. For example, the empty template provides these files and directory to get you started.\n\n- .forceignore\n- config/project-scratch-def.json\n- sfdx-project.json\n- package.json\n- force-app (basic source directory structure)\n\nThe standard template provides a complete force-app directory structure so you know where to put your source. It also provides additional files and scripts, especially useful when using Salesforce Extensions for VS Code. For example:\n\n- .gitignore: Use Git for version control.\n- .prettierrc and .prettierignore: Use Prettier to format your Aura components.\n- .vscode/extensions.json: When launched, Visual Studio Code, prompts you to install the recommended extensions for your project.\n- .vscode/launch.json: Configures Replay Debugger.\n- .vscode/settings.json: Additional configuration settings.\n\nThe analytics template provides similar files and the force-app/main/default/waveTemplates directory.",
        "multiple": false,
        "options": ["standard", "empty", "analytics"],
        "default": "standard",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "namespace": {
        "name": "namespace",
        "type": "option",
        "char": "s",
        "summary": "Namespace associated with this project and any connected scratch orgs.",
        "multiple": false,
        "default": "",
        "deprecateAliases": true
      },
      "default-package-dir": {
        "name": "default-package-dir",
        "type": "option",
        "char": "p",
        "summary": "Default package directory name.",
        "description": "Metadata items such as classes and Lightning bundles are placed inside this folder.",
        "multiple": false,
        "default": "force-app",
        "deprecateAliases": true,
        "aliases": ["defaultpackagedir"]
      },
      "manifest": {
        "name": "manifest",
        "type": "boolean",
        "char": "x",
        "summary": "Generate a manifest (package.xml) for change-set based development.",
        "description": "Generates a default manifest (package.xml) for fetching Apex, Visualforce, Lightning components, and static resources.",
        "allowNo": false,
        "deprecateAliases": true
      },
      "login-url": {
        "name": "login-url",
        "type": "option",
        "char": "l",
        "summary": "Salesforce instance login URL.",
        "description": "Normally defaults to https://login.salesforce.com.",
        "hidden": true,
        "multiple": false,
        "default": "https://login.salesforce.com",
        "deprecateAliases": true,
        "aliases": ["loginurl"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "sobject:describe",
    "summary": "Display the metadata for a standard or custom object or a Tooling API object.",
    "description": "The metadata is displayed in JSON format. See this topic for a description of each property: https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_describesobjects_describesobjectresult.htm.\n\nThis command displays metadata for Salesforce objects by default. Use the --use-tooling-api flag to view metadata for a Tooling API object.",
    "strict": true,
    "pluginName": "@salesforce/plugin-schema",
    "pluginAlias": "@salesforce/plugin-schema",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display the metadata of the \"Account\" standard object in your default org:\n<%= config.bin %> <%= command.id %> --sobject Account",
      "Display the metadata of the \"MyObject__c\" custom object in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --target-org my-scratch-org",
      "Display the metadata of the ApexCodeCoverage Tooling API object in your default org:\n<%= config.bin %> <%= command.id %> --sobject ApexCodeCoverage --use-tooling-api"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "API name of the object to describe.",
        "required": true,
        "multiple": false,
        "aliases": ["sobjecttype"]
      },
      "use-tooling-api": {
        "name": "use-tooling-api",
        "type": "boolean",
        "char": "t",
        "summary": "Use Tooling API to display metadata for Tooling API objects.",
        "allowNo": false,
        "aliases": ["usetoolingapi"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "sobject:list",
    "summary": "List all Salesforce objects of a specified category.",
    "description": "You can list the standard objects, custom objects, or all. The lists include only Salesforce objects, not Tooling API objects.",
    "strict": true,
    "pluginName": "@salesforce/plugin-schema",
    "pluginAlias": "@salesforce/plugin-schema",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List all objects in your default org:\n<%= config.bin %> <%= command.id %> --sobject all",
      "List only custom objects in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject custom --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      },
      "sobject": {
        "name": "sobject",
        "type": "option",
        "char": "s",
        "summary": "Category of objects to list.",
        "multiple": false,
        "default": "ALL",
        "aliases": ["sobjecttypecategory", "c"]
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:source:pull",
    "description": "pull source from the scratch org to the project",
    "strict": true,
    "usage": "force:source:beta:pull [-f] [-w <minutes>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the project",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "The number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      }
    },
    "args": {},
    "help": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "flagsConfig": {
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the project",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 0,
          "unit": 0
        },
        "description": "The number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "requiresProject": false,
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:push",
    "description": "push source to a scratch org from the project",
    "strict": true,
    "usage": "force:source:beta:push [-f] [-w <minutes>] [-g] [-u <string>] [--apiversion <string>] [--quiet] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to scratch org",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "description": "deploy changes even if warnings are generated",
        "allowNo": false
      },
      "quiet": {
        "name": "quiet",
        "type": "boolean",
        "description": "minimize json and sdtout output on success",
        "allowNo": false
      }
    },
    "args": {},
    "help": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "flagsConfig": {
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to scratch org",
        "longDescription": "Runs the push command even if conflicts exist. Changes in the project overwrite changes in the scratch org.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "description": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignorewarnings": {
        "kind": "boolean",
        "char": "g",
        "description": "deploy changes even if warnings are generated",
        "longDescription": "Completes the deployment even if warnings are generated.",
        "allowNo": false,
        "type": "boolean"
      },
      "quiet": {
        "description": "minimize json and sdtout output on success",
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "requiresProject": false,
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:status",
    "description": "list local changes and/or changes in a scratch org",
    "strict": true,
    "usage": "force:source:beta:status [-l | -r] [-u <string>] [--apiversion <string>] [--concise] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:source:status -l",
      "$ sfdx force:source:status -r",
      "$ sfdx force:source:status",
      "$ sfdx force:source:status -u me@example.com --json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "local": {
        "name": "local",
        "type": "boolean",
        "char": "l",
        "description": "list the changes that have been made locally",
        "allowNo": false,
        "exclusive": ["remote"]
      },
      "remote": {
        "name": "remote",
        "type": "boolean",
        "char": "r",
        "description": "list the changes that have been made in the scratch org",
        "allowNo": false,
        "exclusive": ["local"]
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "description": "show only the changes that will be pushed or pulled; omits files that are forceignored",
        "allowNo": false
      }
    },
    "args": {},
    "flagsConfig": {
      "local": {
        "kind": "boolean",
        "char": "l",
        "description": "list the changes that have been made locally",
        "longDescription": "Lists the changes that have been made locally.",
        "exclusive": ["remote"],
        "allowNo": false,
        "type": "boolean"
      },
      "remote": {
        "kind": "boolean",
        "char": "r",
        "description": "list the changes that have been made in the scratch org",
        "longDescription": "Lists the changes that have been made in the scratch org.",
        "exclusive": ["local"],
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "description": "show only the changes that will be pushed or pulled; omits files that are forceignored",
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "requiresProject": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:tracking:clear",
    "description": "clear all local source tracking information\n\nWARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nClears all local source tracking information. When you next run force:source:status, the CLI displays all local and remote files as changed, and any files with the same name are listed as conflicts.",
    "strict": true,
    "usage": "force:source:beta:tracking:clear [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "required": false,
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:tracking:reset",
    "description": "reset local and remote source tracking\n\n WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution. \n\nResets local and remote source tracking so that the CLI no longer registers differences between your local files and those in the org. When you next run force:source:status, the CLI returns no results, even though conflicts might actually exist. The CLI then resumes tracking new source changes as usual.\n\nUse the --revision parameter to reset source tracking to a specific revision number of an org source member. To get the revision number, query the SourceMember Tooling API object with the force:data:soql:query command. For example:\n $ sfdx force:data:soql:query -q \"SELECT MemberName, MemberType, RevisionCounter FROM SourceMember\" -t",
    "strict": true,
    "usage": "force:source:beta:tracking:reset [-r <integer>] [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "revision": {
        "name": "revision",
        "type": "option",
        "char": "r",
        "description": "reset to a specific SourceMember revision counter number",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "revision": {
        "kind": "integer",
        "char": "r",
        "description": "reset to a specific SourceMember revision counter number",
        "min": 0,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:convert",
    "description": "convert source into Metadata API format \n Converts source-formatted files into metadata that you can deploy using Metadata API. \nTo convert source-formatted files into the metadata format, so that you can deploy them using Metadata API,\nrun \"sfdx force:source:convert\". Then deploy the metadata using \"sfdx force:mdapi:deploy\".\n\nTo convert Metadata API–formatted files into the source format, run \"sfdx force:mdapi:convert\".\n\nTo specify a package name that includes spaces, enclose the name in single quotes.",
    "strict": true,
    "usage": "force:source:convert [-r <directory>] [-d <directory>] [-n <string>] [-p <array> | -x <string> | -m <array>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:source:convert -r path/to/source",
      "$ sfdx force:source:convert -r path/to/source -d path/to/outputdir -n 'My Package'"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "rootdir": {
        "name": "rootdir",
        "type": "option",
        "char": "r",
        "description": "a source directory other than the default package to convert",
        "multiple": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "d",
        "description": "output directory to store the Metadata API–formatted files in",
        "multiple": false,
        "default": "metadataPackage_1675969347209"
      },
      "packagename": {
        "name": "packagename",
        "type": "option",
        "char": "n",
        "description": "name of the package to associate with the metadata-formatted files",
        "multiple": false
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "description": "file path to manifest (package.xml) of metadata types to convert.",
        "multiple": false
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of paths to the local source files to convert",
        "multiple": false,
        "exclusive": ["manifest", "metadata"]
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of metadata component names to convert",
        "multiple": false,
        "exclusive": ["manifest", "sourcepath"]
      }
    },
    "args": {},
    "requiresProject": false,
    "flagsConfig": {
      "rootdir": {
        "kind": "directory",
        "char": "r",
        "description": "a source directory other than the default package to convert",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputdir": {
        "kind": "directory",
        "default": "metadataPackage_1676317624793",
        "char": "d",
        "description": "output directory to store the Metadata API–formatted files in",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packagename": {
        "kind": "string",
        "char": "n",
        "description": "name of the package to associate with the metadata-formatted files",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "kind": "string",
        "char": "x",
        "description": "file path to manifest (package.xml) of metadata types to convert.",
        "longDescription": "The complete path to the manifest (package.xml) file that specifies the metadata types to convert.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "sourcepath": {
        "kind": "array",
        "char": "p",
        "description": "comma-separated list of paths to the local source files to convert",
        "longDescription": "A comma-separated list of paths to the local source files to convert. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.",
        "exclusive": ["manifest", "metadata"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of metadata component names to convert",
        "exclusive": ["manifest", "sourcepath"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:delete",
    "description": "delete source from your project and from a non-source-tracked org\nIMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nUse this command to delete components from orgs that don’t have source tracking.\nTo remove deleted items from scratch orgs, which have change tracking, use \"sfdx force:source:push\".",
    "strict": true,
    "usage": "force:source:delete [-w <minutes>] [-l NoTestRun|RunLocalTests|RunAllTestsInOrg] [-r] [-m <array>] [-p <array>] [-f [-t | -c]] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ sfdx force:source:delete -m <metadata>", "$ sfdx force:source:delete -p path/to/source"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "checkonly": {
        "name": "checkonly",
        "type": "boolean",
        "char": "c",
        "description": "validate delete command but do not delete from the org or delete files locally",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "description": "deployment testing level",
        "helpValue": "(NoTestRun|RunLocalTests|RunAllTestsInOrg)",
        "multiple": false,
        "options": ["NoTestRun", "RunLocalTests", "RunAllTestsInOrg"],
        "default": "NoTestRun"
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "r",
        "description": "do not prompt for delete confirmation",
        "allowNo": false
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of names of metadata components to delete",
        "multiple": false
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of source file paths to delete",
        "multiple": false
      },
      "tracksource": {
        "name": "tracksource",
        "type": "boolean",
        "char": "t",
        "description": "If the delete succeeds, update the source tracking information, similar to push",
        "allowNo": false,
        "exclusive": ["checkonly"]
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the org",
        "allowNo": false,
        "dependsOn": ["tracksource"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of delete result",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "checkonly": {
        "kind": "boolean",
        "char": "c",
        "description": "validate delete command but do not delete from the org or delete files locally",
        "longDescription": "Validates the deleted metadata and runs all Apex tests, but prevents the deletion from being saved to the org. \nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deletion (validation). This kind of change isn’t supported for test deletions to avoid the risk of data loss or corruption. If a change that isn’t supported for test deletions is included in a deletion package, the test deletion fails and issues an error.\nIf your deletion package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deletion to another test Sandbox. A full deletion includes a validation of the changes as part of the deletion process.\nNote: A Metadata API deletion that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deletion with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to delete the Master-Detail field, or the deletion fails. During the deletion, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deletion that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deletion to succeed. However, a successful deletion permanently deletes any detail records in the Recycle Bin.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "testlevel": {
        "kind": "enum",
        "helpValue": "(NoTestRun|RunLocalTests|RunAllTestsInOrg)",
        "char": "l",
        "description": "deployment testing level",
        "longDescription": "Specifies which level of deployment tests to run. Valid values are:\nNoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\nRunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "options": ["NoTestRun", "RunLocalTests", "RunAllTestsInOrg"],
        "default": "NoTestRun",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "r",
        "description": "do not prompt for delete confirmation",
        "allowNo": false,
        "type": "boolean"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of names of metadata components to delete",
        "longDescription": "A comma-separated list of names of metadata components to delete from your project and your org.\nIf you specify this parameter, don’t specify --sourcepath.",
        "exactlyOne": ["metadata", "sourcepath"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "sourcepath": {
        "kind": "array",
        "char": "p",
        "description": "comma-separated list of source file paths to delete",
        "longDescription": "A comma-separated list of paths to the local metadata to delete. The supplied paths can be a single file (in which case the operation is applied to only one file) or a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --metadata.",
        "exactlyOne": ["metadata", "sourcepath"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tracksource": {
        "kind": "boolean",
        "char": "t",
        "description": "If the delete succeeds, update the source tracking information, similar to push",
        "exclusive": ["checkonly"],
        "allowNo": false,
        "type": "boolean"
      },
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the org",
        "dependsOn": ["tracksource"],
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "description": "verbose output of delete result",
        "type": "builtin"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:deploy",
    "description": "deploy source to an org\nIMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nUse this command to deploy source (metadata that’s in source format) to an org.\nTo take advantage of change tracking with scratch orgs, use \"sfdx force:source:push\".\nTo deploy metadata that’s in metadata format, use \"sfdx force:mdapi:deploy\".\n\nThe source you deploy overwrites the corresponding metadata in your org. This command does not attempt to merge your source with the versions in your org.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI.\nTo check the status of the job, use force:source:deploy:report.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose the entire list in one set of double quotes.\n If you use the --manifest, --predestructivechanges, or --postdestructivechanges parameters, run the force:source:manifest:create command to easily generate the different types of manifest files.",
    "strict": true,
    "usage": "force:source:deploy [--soapdeploy] [-w <minutes>] [-o] [-g] [--purgeondelete -x <filepath>] [-q <id> | -c | -l NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg | -r <array> | -t] [-m <array>] [-p <array>] [--predestructivechanges <filepath> ] [--postdestructivechanges <filepath> ] [-f ] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "To deploy the source files in a directory:",
      "\t $ sfdx force:source:deploy -p path/to/source",
      "To deploy a specific Apex class and the objects whose source is in a directory: ",
      "\t$ sfdx force:source:deploy -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
      "To deploy source files in a comma-separated list that contains spaces:",
      "   $ sfdx force:source:deploy -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
      "To deploy all Apex classes:",
      "   $ sfdx force:source:deploy -m ApexClass",
      "To deploy a specific Apex class:",
      "   $ sfdx force:source:deploy -m ApexClass:MyApexClass",
      "To deploy a specific Apex class and update source tracking files :",
      "   $ sfdx force:source:deploy -m ApexClass:MyApexClass --tracksource",
      "To deploy all custom objects and Apex classes:",
      "   $ sfdx force:source:deploy -m \"CustomObject,ApexClass\"",
      "To deploy all Apex classes and two specific profiles (one of which has a space in its name):",
      "   $ sfdx force:source:deploy -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
      "To deploy all components listed in a manifest:",
      "   $ sfdx force:source:deploy -x path/to/package.xml",
      "To run the tests that aren’t in any managed packages as part of a deployment:",
      "   $ sfdx force:source:deploy -m ApexClass -l RunLocalTests",
      "To check whether a deployment would succeed (to prepare for Quick Deploy):",
      "   $ sfdx force:source:deploy -m ApexClass -l RunAllTestsInOrg -c",
      "To deploy an already validated deployment (Quick Deploy):",
      "    $ sfdx force:source:deploy -q 0Af9A00000FTM6pSAH`",
      "To run a destructive operation before the deploy occurs:",
      "    $ sfdx force:source:deploy --manifest package.xml --predestructivechanges destructiveChangesPre.xml",
      "To run a destructive operation after the deploy occurs:",
      "    $ sfdx force:source:deploy --manifest package.xml --postdestructivechanges destructiveChangesPost.xml"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "checkonly": {
        "name": "checkonly",
        "type": "boolean",
        "char": "c",
        "description": "validate deploy but don’t save to the org",
        "allowNo": false
      },
      "soapdeploy": {
        "name": "soapdeploy",
        "type": "boolean",
        "description": "deploy metadata with SOAP API instead of REST API",
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "testlevel": {
        "name": "testlevel",
        "type": "option",
        "char": "l",
        "description": "deployment testing level",
        "helpValue": "(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)",
        "multiple": false,
        "options": ["NoTestRun", "RunSpecifiedTests", "RunLocalTests", "RunAllTestsInOrg"]
      },
      "runtests": {
        "name": "runtests",
        "type": "option",
        "char": "r",
        "description": "tests to run if --testlevel RunSpecifiedTests",
        "multiple": false
      },
      "ignoreerrors": {
        "name": "ignoreerrors",
        "type": "boolean",
        "char": "o",
        "description": "ignore any errors and do not roll back deployment",
        "allowNo": false
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "description": "whether a warning will allow a deployment to complete successfully",
        "allowNo": false
      },
      "purgeondelete": {
        "name": "purgeondelete",
        "type": "boolean",
        "description": "specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin",
        "allowNo": false,
        "dependsOn": ["manifest"]
      },
      "validateddeployrequestid": {
        "name": "validateddeployrequestid",
        "type": "option",
        "char": "q",
        "description": "deploy request ID of the validated deployment to run a Quick Deploy",
        "multiple": false,
        "exclusive": ["checkonly", "testlevel", "runtests", "tracksource"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of deploy result",
        "allowNo": false
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of metadata component names",
        "multiple": false
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of source file paths to deploy",
        "multiple": false
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "description": "file path for manifest (package.xml) of components to deploy",
        "multiple": false
      },
      "predestructivechanges": {
        "name": "predestructivechanges",
        "type": "option",
        "description": "file path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy",
        "multiple": false,
        "dependsOn": ["manifest"]
      },
      "postdestructivechanges": {
        "name": "postdestructivechanges",
        "type": "option",
        "description": "file path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy",
        "multiple": false,
        "dependsOn": ["manifest"]
      },
      "tracksource": {
        "name": "tracksource",
        "type": "boolean",
        "char": "t",
        "description": "if the deploy succeeds, update source tracking information; doesn't delete locally deleted files from org unless you also specify --predestructivechanges or --postdestructivechanges",
        "allowNo": false,
        "exclusive": ["checkonly", "validateddeployrequestid"]
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the org",
        "allowNo": false,
        "dependsOn": ["tracksource"]
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": false
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "description": "output JUnit test results",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "checkonly": {
        "kind": "boolean",
        "char": "c",
        "description": "validate deploy but don’t save to the org",
        "longDescription": "Validates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
        "allowNo": false,
        "type": "boolean"
      },
      "soapdeploy": {
        "kind": "boolean",
        "default": false,
        "description": "deploy metadata with SOAP API instead of REST API",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 0,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. ",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "testlevel": {
        "kind": "enum",
        "helpValue": "(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)",
        "char": "l",
        "description": "deployment testing level",
        "longDescription": "Specifies which level of deployment tests to run. Valid values are:\n  NoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n  RunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n  RunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n  RunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "options": ["NoTestRun", "RunSpecifiedTests", "RunLocalTests", "RunAllTestsInOrg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "runtests": {
        "kind": "array",
        "char": "r",
        "description": "tests to run if --testlevel RunSpecifiedTests",
        "longDescription": "Lists the Apex classes containing the deployment tests to run. Use this parameter when you set --testlevel to RunSpecifiedTests.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "ignoreerrors": {
        "kind": "boolean",
        "char": "o",
        "description": "ignore any errors and do not roll back deployment",
        "longDescription": "Ignores the deploy errors, and continues with the deploy operation. The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
        "allowNo": false,
        "type": "boolean"
      },
      "ignorewarnings": {
        "kind": "boolean",
        "char": "g",
        "description": "whether a warning will allow a deployment to complete successfully",
        "longDescription": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.",
        "allowNo": false,
        "type": "boolean"
      },
      "purgeondelete": {
        "kind": "boolean",
        "description": "specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin",
        "dependsOn": ["manifest"],
        "allowNo": false,
        "type": "boolean"
      },
      "validateddeployrequestid": {
        "kind": "id",
        "char": "q",
        "description": "deploy request ID of the validated deployment to run a Quick Deploy",
        "longDescription": "Specifies the ID of a package with recently validated components to run a Quick Deploy. Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run \"sfdx force:mdapi:deploy\". This flag sets the checkOnly=\"true\" parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n  1. The components have been validated successfully for the target environment within the last 10 days.\n  2. As part of the validation, Apex tests in the target org have passed.\n  3. Code coverage requirements are met.\n    - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n    - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
        "exactlyOne": ["manifest", "metadata", "sourcepath", "validateddeployrequestid"],
        "exclusive": ["checkonly", "testlevel", "runtests", "tracksource"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of deploy result",
        "type": "builtin"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of metadata component names",
        "longDescription": "A comma-separated list of names of metadata components to deploy to the org.\nIf you specify this parameter, don’t specify --manifest or --sourcepath.",
        "exactlyOne": ["manifest", "metadata", "sourcepath", "validateddeployrequestid"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "sourcepath": {
        "kind": "array",
        "char": "p",
        "description": "comma-separated list of source file paths to deploy",
        "longDescription": "A comma-separated list of paths to the local source files to deploy. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.",
        "exactlyOne": ["manifest", "metadata", "sourcepath", "validateddeployrequestid"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "kind": "filepath",
        "char": "x",
        "description": "file path for manifest (package.xml) of components to deploy",
        "longDescription": "The complete path for the manifest (package.xml) file that specifies the components to deploy. All child components are included.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
        "exactlyOne": ["manifest", "metadata", "sourcepath", "validateddeployrequestid"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "predestructivechanges": {
        "kind": "filepath",
        "description": "file path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy",
        "dependsOn": ["manifest"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "postdestructivechanges": {
        "kind": "filepath",
        "description": "file path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy",
        "dependsOn": ["manifest"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tracksource": {
        "kind": "boolean",
        "char": "t",
        "description": "if the deploy succeeds, update source tracking information; doesn't delete locally deleted files from org unless you also specify --predestructivechanges or --postdestructivechanges",
        "exclusive": ["checkonly", "validateddeployrequestid"],
        "allowNo": false,
        "type": "boolean"
      },
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the org",
        "dependsOn": ["tracksource"],
        "allowNo": false,
        "type": "boolean"
      },
      "resultsdir": {
        "kind": "directory",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "coverageformatters": {
        "kind": "array",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "junit": {
        "kind": "boolean",
        "description": "output JUnit test results",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:deploy:cancel",
    "description": "cancel a source deployment\n Use this command to cancel a specified asynchronous source deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI.\nTo check the status of the job, use force:source:deploy:report.",
    "strict": true,
    "usage": "force:source:deploy:cancel [-w <minutes>] [-i <id>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Deploy a directory of files to the org",
      "  $ sfdx force:source:deploy -d <directory>",
      "Now cancel this deployment and wait two minutes",
      "  $ sfdx force:source:deploy:cancel -w 2",
      "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID",
      "  $ sfdx force:source:deploy:cancel -i <jobid>",
      "Check the status of the cancel job",
      "  $ sfdx force:source:deploy:report"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified",
        "multiple": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. ",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:deploy:report",
    "description": "check the status of a metadata deployment \nSpecify the job ID for the deploy you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status.",
    "strict": true,
    "usage": "force:source:deploy:report [-w <minutes>] [-i <id>] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Deploy a directory of files to the org",
      " $ sfdx force:source:deploy -d <directory>",
      "Now cancel this deployment and wait two minutes",
      " $ sfdx force:source:deploy:cancel -w 2",
      "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID",
      " $ sfdx force:source:deploy:cancel -i <jobid>",
      "Check the status of the cancel job",
      " $ sfdx force:source:deploy:report"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "jobid": {
        "name": "jobid",
        "type": "option",
        "char": "i",
        "description": "job ID of the deployment you want to check; defaults to your most recent CLI deployment if not specified",
        "multiple": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of deploy result",
        "allowNo": false
      },
      "resultsdir": {
        "name": "resultsdir",
        "type": "option",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "multiple": false
      },
      "coverageformatters": {
        "name": "coverageformatters",
        "type": "option",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "multiple": false
      },
      "junit": {
        "name": "junit",
        "type": "boolean",
        "description": "output JUnit test results",
        "allowNo": false
      }
    },
    "args": {},
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. ",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "jobid": {
        "kind": "id",
        "char": "i",
        "description": "job ID of the deployment you want to check; defaults to your most recent CLI deployment if not specified",
        "longDescription": "The job ID (asyncId) of the deployment you want to check. If not specified, the default value is the ID of the most recent metadata deployment you ran using Salesforce CLI. Use with -w to resume waiting.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "verbose output of deploy result",
        "type": "builtin"
      },
      "resultsdir": {
        "kind": "directory",
        "description": "output directory for code coverage and JUnit results; defaults to the deploy ID",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "coverageformatters": {
        "kind": "array",
        "description": "format of the code coverage results",
        "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "junit": {
        "kind": "boolean",
        "description": "output JUnit test results",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:ignored:list",
    "description": "check your local project package directories for forceignored files",
    "strict": true,
    "usage": "force:source:ignored:list [-p <filepath>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "description": "file or directory of files that the command checks for foreceignored files",
        "multiple": false
      }
    },
    "args": {},
    "requiresProject": false,
    "flagsConfig": {
      "sourcepath": {
        "kind": "filepath",
        "char": "p",
        "description": "file or directory of files that the command checks for foreceignored files",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:legacy:pull",
    "description": "(deprecated) pull source from the scratch org to the project\n\nWARNING: The command \"force:source:legacy:pull\" has been deprecated and will be removed in v56.0 or later. Use \"force:source:pull\" instead.\n\nNOTE: This command must be run from within a project.\n\nIf the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "strict": true,
    "usage": "force:source:legacy:pull [-w <minutes>] [-f] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 33)",
        "required": false,
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the project",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:source:pull"
    },
    "theDescription": "pull source from the scratch org to the project",
    "longDescription": "Pulls changed source from the scratch org to your project to keep them in sync.",
    "help": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "showProgress": true,
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 33)",
        "longDescription": "The number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "required": false,
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the project",
        "longDescription": "Runs the pull command even if conflicts exist. Changes in the scratch org overwrite changes in the project.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:legacy:push",
    "description": "(deprecated) push source to a scratch org from the project\n\nWARNING: The command \"force:source:legacy:push\" has been deprecated and will be removed in v56.0 or later. Use \"force:source:push\" instead.\n\nNOTE: This command must be run from within a project.\n\nIf the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "strict": true,
    "usage": "force:source:legacy:push [-f] [-g] [-w <minutes>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to scratch org",
        "required": false,
        "allowNo": false
      },
      "ignorewarnings": {
        "name": "ignorewarnings",
        "type": "boolean",
        "char": "g",
        "description": "deploy changes even if warnings are generated",
        "required": false,
        "allowNo": false
      },
      "replacetokens": {
        "name": "replacetokens",
        "type": "boolean",
        "char": "r",
        "description": "replace tokens in source files prior to deployment",
        "hidden": true,
        "required": false,
        "allowNo": false
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 33)",
        "required": false,
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:source:push"
    },
    "theDescription": "push source to a scratch org from the project",
    "longDescription": "Pushes changed source from your project to a scratch org to keep them in sync.",
    "help": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
    "showProgress": true,
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to scratch org",
        "longDescription": "Runs the push command even if conflicts exist. Changes in the project overwrite changes in the scratch org.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "ignorewarnings": {
        "kind": "boolean",
        "char": "g",
        "description": "deploy changes even if warnings are generated",
        "longDescription": "Completes the deployment even if warnings are generated.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "replacetokens": {
        "kind": "boolean",
        "char": "r",
        "description": "replace tokens in source files prior to deployment",
        "longDescription": "Replaces tokens in source files prior to deployment.",
        "required": false,
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "description": "wait time for command to finish in minutes (default: 33)",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.",
        "required": false,
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:legacy:status",
    "description": "(deprecated) list local changes and/or changes in a scratch org\n\nWARNING: The command \"force:source:legacy:status\" has been deprecated and will be removed in v56.0 or later. Use \"force:source:status\" instead.\n\nNOTE: This command must be run from within a project.\n\nExamples:\n   $ sfdx force:source:legacy:status -l\n   $ sfdx force:source:legacy:status -r\n   $ sfdx force:source:legacy:status -a\n   $ sfdx force:source:legacy:status -a -u me@example.com --json",
    "strict": true,
    "usage": "force:source:legacy:status [-l] [-r] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "char": "a",
        "description": "(deprecated) list all the changes that have been made",
        "hidden": true,
        "required": false,
        "allowNo": false
      },
      "local": {
        "name": "local",
        "type": "boolean",
        "char": "l",
        "description": "list the changes that have been made locally",
        "required": false,
        "allowNo": false
      },
      "remote": {
        "name": "remote",
        "type": "boolean",
        "char": "r",
        "description": "list the changes that have been made in the scratch org",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:source:status"
    },
    "theDescription": "list local changes and/or changes in a scratch org",
    "longDescription": "Lists changes that have been made locally, in a scratch org, or both.",
    "help": "Examples:\n   $ sfdx force:source:legacy:status -l\n   $ sfdx force:source:legacy:status -r\n   $ sfdx force:source:legacy:status -a\n   $ sfdx force:source:legacy:status -a -u me@example.com --json",
    "showProgress": true,
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "all": {
        "kind": "boolean",
        "char": "a",
        "description": "list all the changes that have been made",
        "longDescription": "Lists all the changes that have been made.",
        "required": false,
        "hidden": true,
        "deprecated": {
          "version": "53.0",
          "message": "To see both local and remote changes, use \"sfdx force:source:legacy:status\"."
        },
        "allowNo": false,
        "type": "boolean"
      },
      "local": {
        "kind": "boolean",
        "char": "l",
        "description": "list the changes that have been made locally",
        "longDescription": "Lists the changes that have been made locally.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      },
      "remote": {
        "kind": "boolean",
        "char": "r",
        "description": "list the changes that have been made in the scratch org",
        "longDescription": "Lists the changes that have been made in the scratch org.",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsPerfLogLevelFlag": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:legacy:tracking:clear",
    "description": "clear all local source tracking information\n\nWARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nClears all local source tracking information. When you next run force:source:legacy:status, the CLI displays all local and remote files as changed, and any files with the same name are listed as conflicts.",
    "strict": true,
    "usage": "force:source:legacy:tracking:clear [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:source:tracking:clear"
    },
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:legacy:tracking:reset",
    "description": "reset local and remote source tracking\n\nWARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nResets local and remote source tracking so that the CLI no longer registers differences between your local files and those in the org. When you next run force:source:legacy:status, the CLI returns no results, even though conflicts might actually exist. The CLI then resumes tracking new source changes as usual.\n\nUse the --revision parameter to reset source tracking to a specific revision number of an org source member. To get the revision number, query the SourceMember Tooling API object with the force:data:soql:query command. For example:\n  $ sfdx force:data:soql:query -q \"SELECT MemberName, MemberType, RevisionCounter FROM SourceMember\" -t",
    "strict": true,
    "usage": "force:source:legacy:tracking:reset [-r <integer>] [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "salesforce-alm",
    "pluginAlias": "salesforce-alm",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "revision": {
        "name": "revision",
        "type": "option",
        "char": "r",
        "description": "reset to a specific SourceMember revision counter number",
        "required": false,
        "multiple": false
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "required": false,
        "allowNo": false
      }
    },
    "args": [],
    "deprecated": {
      "version": 55,
      "to": "force:source:tracking:reset"
    },
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "revision": {
        "kind": "integer",
        "char": "r",
        "description": "reset to a specific SourceMember revision counter number",
        "required": false,
        "min": 0,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "do not prompt for source tracking override confirmation",
        "required": false,
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:manifest:create",
    "description": "create a project manifest that lists the metadata components you want to deploy or retrieve \n Create a manifest from a list of metadata components (--metadata) or from one or more local directories that contain source files (--sourcepath). You can specify either of these parameters, not both.\n\nUse --manifesttype to specify the type of manifest you want to create. The resulting manifest files have specific names, such as the standard package.xml or destructiveChanges.xml to delete metadata. Valid values for this parameter, and their respective file names, are:\n\n  package :  package.xml (default)\n  pre : destructiveChangesPre.xml\n  post : destructiveChangesPost.xml\n  destroy : destructiveChanges.xml\n\nSee https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_deleting_files.htm for information about these destructive manifest files. \n\nUse --manifestname to specify a custom name for the generated manifest if the pre-defined ones don’t suit your needs. You can specify either --manifesttype or --manifestname, but not both.\n",
    "strict": true,
    "usage": "force:source:manifest:create [-m <array>] [-p <array>] [-n <string> | -t pre|post|destroy|package] [-c <array> --fromorg <string>] [-o <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:source:manifest:create -m ApexClass",
      "$ sfdx force:source:manifest:create -m ApexClass:MyApexClass --manifesttype destroy",
      "$ sfdx force:source:manifest:create --sourcepath force-app --manifestname myNewManifest",
      "$ sfdx force:source:manifest:create --fromorg test@myorg.com --includepackages unlocked"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of names of metadata components to include in the manifest",
        "multiple": false
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of paths to the local source files to include in the manifest",
        "multiple": false
      },
      "manifestname": {
        "name": "manifestname",
        "type": "option",
        "char": "n",
        "description": "name of a custom manifest file to create",
        "multiple": false,
        "exclusive": ["manifesttype"]
      },
      "manifesttype": {
        "name": "manifesttype",
        "type": "option",
        "char": "t",
        "description": "type of manifest to create; the type determines the name of the created file",
        "helpValue": "(pre|post|destroy|package)",
        "multiple": false,
        "options": ["pre", "post", "destroy", "package"]
      },
      "includepackages": {
        "name": "includepackages",
        "type": "option",
        "char": "c",
        "description": "comma-separated list of package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in packages is ignored",
        "multiple": false,
        "dependsOn": ["fromorg"]
      },
      "fromorg": {
        "name": "fromorg",
        "type": "option",
        "description": "username or alias of the org that contains the metadata components from which to build a manifest",
        "multiple": false
      },
      "outputdir": {
        "name": "outputdir",
        "type": "option",
        "char": "o",
        "description": "directory to save the created manifest",
        "multiple": false
      }
    },
    "args": {},
    "requiresProject": false,
    "flagsConfig": {
      "apiversion": {
        "type": "builtin"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of names of metadata components to include in the manifest",
        "exactlyOne": ["metadata", "sourcepath", "fromorg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "sourcepath": {
        "kind": "array",
        "char": "p",
        "description": "comma-separated list of paths to the local source files to include in the manifest",
        "exactlyOne": ["metadata", "sourcepath", "fromorg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifestname": {
        "kind": "string",
        "char": "n",
        "description": "name of a custom manifest file to create",
        "exclusive": ["manifesttype"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifesttype": {
        "kind": "enum",
        "helpValue": "(pre|post|destroy|package)",
        "description": "type of manifest to create; the type determines the name of the created file",
        "options": ["pre", "post", "destroy", "package"],
        "char": "t",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "includepackages": {
        "kind": "array",
        "description": "comma-separated list of package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in packages is ignored",
        "char": "c",
        "dependsOn": ["fromorg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "fromorg": {
        "kind": "string",
        "description": "username or alias of the org that contains the metadata components from which to build a manifest",
        "exactlyOne": ["metadata", "sourcepath", "fromorg"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputdir": {
        "kind": "string",
        "char": "o",
        "description": "directory to save the created manifest",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:open",
    "description": "edit a Lightning Page with Lightning App Builder\nOpens the specified Lightning Page in Lightning App Builder. Lightning Page files have the suffix .flexipage-meta.xml, and are stored in the flexipages directory. \nIf you specify a Visualforce page, which has a .page suffix, the page opens in your browser so you can preview it. If you specify a different type of file, this command opens your org’s home page.\n\nThe file opens in your default browser.\nIf no browser-based editor is available for the selected file, this command opens your org's home page.\nTo generate a URL for the browser-based editor but not open the editor, use --urlonly.",
    "strict": true,
    "usage": "force:source:open -f <filepath> [-r] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ sfdx force:source:open -f path/to/source",
      "$ sfdx force:source:open -r -f path/to/source",
      "$ sfdx force:source:open -f path/to/source -u my-user@my-org.com"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "sourcefile": {
        "name": "sourcefile",
        "type": "option",
        "char": "f",
        "description": "file to edit",
        "required": true,
        "multiple": false
      },
      "urlonly": {
        "name": "urlonly",
        "type": "boolean",
        "char": "r",
        "description": "generate a navigation URL; don’t launch the editor",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "sourcefile": {
        "kind": "filepath",
        "char": "f",
        "required": true,
        "description": "file to edit",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "urlonly": {
        "kind": "boolean",
        "char": "r",
        "description": "generate a navigation URL; don’t launch the editor",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "force:source:retrieve",
    "description": "retrieve source from an org \nUse this command to retrieve source (metadata that’s in source format) from an org.\nTo take advantage of change tracking with scratch orgs, use \"sfdx force:source:pull\".\nTo retrieve metadata that’s in metadata format, use \"sfdx force:mdapi:retrieve\".\n\nThe source you retrieve overwrites the corresponding source files in your local project. This command does not attempt to merge the source from your org with your local source files.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose it in one set of double quotes.",
    "strict": true,
    "usage": "force:source:retrieve [-r <directory> | -n <array> | -p <array>] [-w <minutes>] [-x <filepath> | -m <array> | ] [-f -t] [-u <string>] [-a <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/plugin-source",
    "pluginAlias": "@salesforce/plugin-source",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "To retrieve the source files in a directory:",
      "   $ sfdx force:source:retrieve -p path/to/source",
      "To retrieve a specific Apex class and the objects whose source is in a directory:",
      "   $ sfdx force:source:retrieve -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
      "To retrieve source files in a comma-separated list that contains spaces:",
      "   $ sfdx force:source:retrieve -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
      "To retrieve all Apex classes:",
      "   $ sfdx force:source:retrieve -m ApexClass",
      "To retrieve a specific Apex class:",
      "   $ sfdx force:source:retrieve -m ApexClass:MyApexClass",
      "To retrieve a specific Apex class and update source tracking files:",
      "   $ sfdx force:source:retrieve -m ApexClass:MyApexClass -t",
      "To retrieve all custom objects and Apex classes:",
      "   $ sfdx force:source:retrieve -m \"CustomObject,ApexClass\"",
      "To retrieve all Apex classes and two specific profiles (one of which has a space in its name):",
      "   $ sfdx force:source:retrieve -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
      "To retrieve all metadata components listed in a manifest:",
      "   $ sfdx force:source:retrieve -x path/to/package.xml",
      "To retrieve metadata from a package or multiple packages:",
      "   $ sfdx force:source:retrieve -n MyPackageName",
      "   $ sfdx force:source:retrieve -n \"Package1, PackageName With Spaces, Package3\"",
      "To retrieve all metadata from a package and specific components that aren’t in the package, specify both -n | --packagenames and one other scoping parameter:",
      "   $ sfdx force:source:retrieve -n MyPackageName -p path/to/apex/classes",
      "   $ sfdx force:source:retrieve -n MyPackageName -m ApexClass:MyApexClass",
      "   $ sfdx force:source:retrieve -n MyPackageName -x path/to/package.xml",
      "To retrieve source files to a given directory instead of the default package directory specified in sfdx-project.json:",
      "   $ sfdx force:source:retrieve -m \"StandardValueSet:TaskStatus\" -r path/to/unpackaged"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org",
        "multiple": false
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "char": "a",
        "description": "override the api version used for api requests made by this command",
        "multiple": false
      },
      "retrievetargetdir": {
        "name": "retrievetargetdir",
        "type": "option",
        "char": "r",
        "description": "directory root for the retrieved source files",
        "multiple": false,
        "exclusive": ["packagenames", "sourcepath"]
      },
      "sourcepath": {
        "name": "sourcepath",
        "type": "option",
        "char": "p",
        "description": "comma-separated list of source file paths to retrieve",
        "multiple": false,
        "exclusive": ["manifest", "metadata"]
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "wait time for command to finish in minutes",
        "multiple": false,
        "default": {
          "quantity": 33,
          "unit": 0
        }
      },
      "manifest": {
        "name": "manifest",
        "type": "option",
        "char": "x",
        "description": "file path for manifest (package.xml) of components to retrieve",
        "multiple": false,
        "exclusive": ["metadata", "sourcepath"]
      },
      "metadata": {
        "name": "metadata",
        "type": "option",
        "char": "m",
        "description": "comma-separated list of metadata component names",
        "multiple": false,
        "exclusive": ["manifest", "sourcepath"]
      },
      "packagenames": {
        "name": "packagenames",
        "type": "option",
        "char": "n",
        "description": "a comma-separated list of packages to retrieve",
        "multiple": false
      },
      "tracksource": {
        "name": "tracksource",
        "type": "boolean",
        "char": "t",
        "description": "if the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org",
        "allowNo": false
      },
      "forceoverwrite": {
        "name": "forceoverwrite",
        "type": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the project",
        "allowNo": false,
        "dependsOn": ["tracksource"]
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "verbose output of retrieve result",
        "allowNo": false
      }
    },
    "args": {},
    "requiresProject": false,
    "requiresUsername": false,
    "flagsConfig": {
      "retrievetargetdir": {
        "kind": "directory",
        "char": "r",
        "description": "directory root for the retrieved source files",
        "longDescription": "The root of the directory structure into which the source files are retrieved.\nIf the target directory matches one of the package directories in your sfdx-project.json file, the command fails.\nRunning the command multiple times with the same target adds new files and overwrites existing files.",
        "exclusive": ["packagenames", "sourcepath"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "apiversion": {
        "char": "a",
        "type": "builtin"
      },
      "sourcepath": {
        "kind": "array",
        "char": "p",
        "description": "comma-separated list of source file paths to retrieve",
        "longDescription": "A comma-separated list of file paths for source to retrieve from the org. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.",
        "exclusive": ["manifest", "metadata"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "minutes",
        "char": "w",
        "default": {
          "quantity": 33,
          "unit": 0
        },
        "min": {
          "quantity": 1,
          "unit": 0
        },
        "description": "wait time for command to finish in minutes",
        "longDescription": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "kind": "filepath",
        "char": "x",
        "description": "file path for manifest (package.xml) of components to retrieve",
        "longDescription": "The complete path for the manifest (package.xml) file that specifies the components to retrieve.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
        "exclusive": ["metadata", "sourcepath"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "kind": "array",
        "char": "m",
        "description": "comma-separated list of metadata component names",
        "longDescription": "A comma-separated list of names of metadata components to retrieve from the org.\nIf you specify this parameter, don’t specify --manifest or --sourcepath.",
        "exclusive": ["manifest", "sourcepath"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "packagenames": {
        "kind": "array",
        "char": "n",
        "description": "a comma-separated list of packages to retrieve",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tracksource": {
        "kind": "boolean",
        "char": "t",
        "description": "if the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org",
        "allowNo": false,
        "type": "boolean"
      },
      "forceoverwrite": {
        "kind": "boolean",
        "char": "f",
        "description": "ignore conflict warnings and overwrite changes to the project",
        "dependsOn": ["tracksource"],
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "description": "verbose output of retrieve result",
        "type": "builtin"
      }
    },
    "DEFAULT_WAIT_MINUTES": 33,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "static-resource:generate",
    "summary": "Generate a static resource.",
    "description": "Generates the metadata resource file in the specified directory or the current working directory. Static resource files must be contained in a parent directory called \"staticresources\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to create one or point to an existing one.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata file for a static resource called MyResource in the current directory:\n<%= config.bin %> <%= command.id %> --name MyResource",
      "Similar to previous example, but specifies a MIME type of application/json:\n<%= config.bin %> <%= command.id %> --name MyResource --type application/json",
      "Generate the resource file in the \"force-app/main/default/staticresources\" directory:\n<%= config.bin %> <%= command.id %> --name MyResource --output-dir force-app/main/default/staticresources"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated static resource.",
        "description": "This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["resourcename"]
      },
      "type": {
        "name": "type",
        "type": "option",
        "summary": "Content type (mime type) of the generated static resource.",
        "description": "Must be a valid MIME type such as application/json, application/javascript, application/zip, text/plain, text/css, etc.",
        "multiple": false,
        "default": "application/zip",
        "deprecateAliases": true,
        "aliases": ["contenttype"]
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "org:create:user",
    "summary": "Create a user for a scratch org.",
    "description": "A scratch org includes one administrator user by default. For testing purposes, however, you sometimes need to create additional users.\n\nThe easiest way to create a user is to let this command assign default or generated characteristics to the new user. If you want to customize your new user, create a definition file and specify it with the --definition-file flag. In the file, you can include all the User sObject (SSalesforce object) fields and Salesforce DX-specific options, as described in \"User Definition File for Customizing a Scratch Org User\" (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm). You can also specify these options on the command line.\n\nIf you don't customize your new user, this command creates a user with the following default characteristics:\n\n    * The username is the existing administrator’s username prepended with a timestamp, such as 1505759162830_test-wvkpnfm5z113@example.com.\n    * The user’s profile is Standard User.\n    * The values of the required fields of the User sObject are the corresponding values of the administrator user.\n    * The user has no password.\n\nUse the --set-alias flag to assign a simple name to the user that you can reference in later CLI commands. When this command completes, it displays the new username and user ID. Run the \"<%= config.bin %> org user display\" command to get more information about the new user.\n\nFor more information about user limits, defaults, and other considerations when creating a new scratch org user, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users.htm.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Create a user for your default scratch org and let this command generate a username, user ID, and other characteristics:\n<%= config.bin %> <%= command.id %>",
      "Create a user with alias \"testuser1\" using a user definition file. Set the \"profileName\" option to \"Chatter Free User\", which overrides the value in the defintion file if it also exists there. Create the user for the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --set-alias testuser1 --definition-file config/project-user-def.json profileName='Chatter Free User' --target-org my-scratch",
      "Create a user by specifying the username, email, and perm set assignment at the command line; command fails if the username already exists in Salesforce:\n<%= config.bin %> <%= command.id %> username=testuser1@my.org email=me@my.org permsets=DreamHouse",
      "Create a user with a definition file, set the email value as specified (overriding any value in the definition file), and generate a password for the user. If the username in the definition file isn't unique, the command appends the org ID to make it unique:\n<%= config.bin %> <%= command.id %> --definition-file config/project-user-def.json email=me@my.org generatepassword=true --set-unique-username"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "set-alias": {
        "name": "set-alias",
        "type": "option",
        "char": "a",
        "summary": "Set an alias for the created username to reference in other CLI commands.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["setalias"]
      },
      "definition-file": {
        "name": "definition-file",
        "type": "option",
        "char": "f",
        "summary": "File path to a user definition file for customizing the new user.",
        "description": "The user definition file uses JSON format and can include any Salesforce User sObject field and Salesforce DX-specific options. See https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm for more information.",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["definitionfile"]
      },
      "set-unique-username": {
        "name": "set-unique-username",
        "type": "boolean",
        "char": "s",
        "summary": "Force the username, if specified in the definition file or at the command line, to be unique by appending the org ID.",
        "description": "The new user’s username must be unique across all Salesforce orgs and in the form of an email address. If you let this command generate a username for you, it's guaranteed to be unique. If you specify an existing username in a definition file, the command fails. Set this flag to force the username to be unique; as a result, the username might be different than what you specify in the definition file.",
        "allowNo": false,
        "deprecateAliases": true,
        "aliases": ["setuniqueusername"]
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version 57.0 or later."
        },
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:display:user",
    "summary": "Display information about a Salesforce user.",
    "description": "Output includes the profile name, org ID, access token, instance URL, login URL, and alias if applicable.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display information about the admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Display information about the specified user and output in JSON format:\n<%= config.bin %> <%= command.id %> --target-org me@my.org --json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version\n57.0 or later."
        },
        "deprecateAliases": true,
        "aliases": ["targetdevhubusername"]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:list:users",
    "summary": "List all locally-authenticated users of an org.",
    "description": "For scratch orgs, the list includes any users you've created with the \"<%= config.bin %> org create user\" command; the original scratch org admin user is marked with \"(A)\". For other orgs, the list includes the users you used to authenticate to the org.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "List the locally-authenticated users of your default org:\n<%= config.bin %> <%= command.id %>",
      "List the locally-authenticated users of the specified org:\n<%= config.bin %> <%= command.id %> --target-org me@my.org"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version 57.0 or later."
        }
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername", "u"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "force:user:password:generate",
    "summary": "Generate a random password for scratch org users.",
    "description": "By default, new scratch orgs contain one admin user with no password. Use the CLI to generate or change a password for any scratch org user. After it's set, you can’t unset a password, you can only change it.\n\nTo change the password strength, set the --complexity flag to a value between 0 and 5. Each value specifies the types of characters used in the generated password:\n\n0 - lower case letters only\n1 - lower case letters and numbers only\n2 - lower case letters and symbols only\n3 - lower and upper case letters and numbers only\n4 - lower and upper case letters and symbols only\n5 - lower and upper case letters and numbers and symbols only\n\nTo see a password that was previously generated, run \"<%= config.bin %> org user display\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a password for the original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Generate a password that contains 12 characters for the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --length 12 --target-org my-scratch",
      "Generate a password for your default scratch org admin user that uses lower and upper case letters and numbers only:\n<%= config.bin %> <%= command.id %> --complexity 3",
      "Generate a password for the specified users in the default scratch org:\n<%= config.bin %> <%= command.id %> --on-behalf-of \"user1@my.org,user2@my.org,user3@my.org\""
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "o",
        "summary": "Comma-separated list of usernames or aliases to assign the password to.",
        "multiple": true,
        "aliases": ["onbehalfof"]
      },
      "length": {
        "name": "length",
        "type": "option",
        "char": "l",
        "summary": "Number of characters in the generated password; valid values are between 8 and 100.",
        "multiple": false,
        "default": 13
      },
      "complexity": {
        "name": "complexity",
        "type": "option",
        "char": "c",
        "summary": "Level of password complexity or strength; the higher the value, the stronger the password.",
        "multiple": false,
        "default": 5
      },
      "target-dev-hub": {
        "name": "target-dev-hub",
        "type": "option",
        "char": "v",
        "summary": "Username or alias of the Dev Hub org.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "deprecated": {
          "message": "The --target-dev-hub flag is deprecated and is no longer used by this command. The flag will be removed in API version 57.0 or later."
        },
        "aliases": ["targetdevhubusername"]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "u",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false,
        "aliases": ["targetusername"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "aliases": ["apiversion"]
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "visualforce:generate:component",
    "summary": "Generate a Visualforce Component.",
    "description": "The command generates the .Component file and associated metadata file in the specified directory or the current working directory by default.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Visualforce component in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --label mylabel",
      "Similar to previous example, but generate the files in the directory \"force-app/main/default/components\":\n<%= config.bin %> <%= command.id %> --name mycomponent --label mylabel --output-dir components"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Visualforce Component.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["componentname"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "multiple": false,
        "options": ["DefaultVFComponent"],
        "default": "DefaultVFComponent",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Visualforce Component label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "visualforce:generate:page",
    "summary": "Generate a Visualforce Page.",
    "description": "The command generates the .Page file and associated metadata file in the specified directory or the current working directory by default.",
    "strict": true,
    "pluginName": "@salesforce/plugin-templates",
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate the metadata files for a Visualforce page in the current directory:\n<%= config.bin %> <%= command.id %> --name mypage --label mylabel",
      "Similar to previous example, but generate the files in the directory \"force-app/main/default/pages\":\n<%= config.bin %> <%= command.id %> --name mypage --label mylabel --output-dir pages"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "deprecateAliases": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the generated Visualforce Page.",
        "description": "The name can be up to 40 characters and must start with a letter.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["pagename"]
      },
      "template": {
        "name": "template",
        "type": "option",
        "char": "t",
        "summary": "Template to use for file creation.",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "hidden": true,
        "multiple": false,
        "options": ["DefaultVFPage"],
        "default": "DefaultVFPage",
        "deprecateAliases": true
      },
      "output-dir": {
        "name": "output-dir",
        "type": "option",
        "char": "d",
        "summary": "Directory for saving the created files.",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "multiple": false,
        "default": ".",
        "deprecateAliases": true,
        "aliases": ["outputdir"]
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false,
        "deprecateAliases": true,
        "aliases": ["apiversion"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "summary": "Visualforce Page label.",
        "required": true,
        "multiple": false,
        "deprecateAliases": true
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "deprecateAliases": true
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "help",
    "description": "Display help for <%= config.bin %>.",
    "strict": true,
    "pluginName": "@oclif/plugin-help",
    "pluginAlias": "@oclif/plugin-help",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "nested-commands": {
        "name": "nested-commands",
        "type": "boolean",
        "char": "n",
        "description": "Include all nested commands in the output.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "nested-commands": {
        "description": "Include all nested commands in the output.",
        "char": "n",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "info:releasenotes:display",
    "summary": "Display Salesforce CLI release notes on the command line.",
    "description": "By default, this command displays release notes for the currently installed CLI version on your computer. Use the --version flag to view release notes for a different release.",
    "strict": true,
    "pluginName": "@salesforce/plugin-info",
    "pluginAlias": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Display release notes for the currently installed CLI version:\n<%= config.bin %> <%= command.id %> stable, stable-rc, latest, latest-rc, rc",
      "Display release notes for CLI version 7.120.0:\n<%= config.bin %> <%= command.id %> --version 7.120.0 stable, stable-rc, latest, latest-rc, rc",
      "Display release notes for the CLI version that corresponds to a tag (stable, stable-rc, latest, latest-rc, rc):\n<%= config.bin %> <%= command.id %> --version latest"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "summary": "CLI version or tag for which to display release notes.",
        "multiple": false
      },
      "hook": {
        "name": "hook",
        "type": "boolean",
        "summary": "This hidden parameter is used in post install or update hooks.",
        "hidden": true,
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "helpers": ["stable", "stable-rc", "latest", "latest-rc", "rc"],
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "npm:dependencies:pin",
    "summary": "lock a list of dependencies to a target tag or default to 'latest', place these entries in 'pinnedDependencies' entry in the package.json",
    "description": "lock a list of dependencies to a target tag or default to 'latest', place these entries in 'pinnedDependencies' entry in the package.json",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "If true, will not make any changes to the package.json",
        "allowNo": false
      },
      "tag": {
        "name": "tag",
        "type": "option",
        "char": "t",
        "summary": "The name of the tag you want, e.g. 'latest-rc', or 'latest'",
        "multiple": false,
        "default": "latest"
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "npm:package:promote",
    "summary": "promote an npm package",
    "description": "promote an npm package",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": ["<%= config.bin %> <%= command.id %> --candidate latest-rc --target latest"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "If true, only show what would happen",
        "allowNo": false
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "summary": "the npm tag that you are promoting to",
        "multiple": false,
        "default": "latest"
      },
      "candidate": {
        "name": "candidate",
        "type": "option",
        "char": "c",
        "summary": "the npm tag that you want to promote",
        "required": true,
        "multiple": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "npm:package:release",
    "summary": "publish npm package",
    "description": "publish npm package",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "dryrun": {
        "name": "dryrun",
        "type": "boolean",
        "char": "d",
        "summary": "If true, will not commit changes to repo or push any tags",
        "allowNo": false
      },
      "sign": {
        "name": "sign",
        "type": "boolean",
        "char": "s",
        "summary": "If true, then the package will be signed and the signature will be uploaded to S3",
        "allowNo": false
      },
      "npmtag": {
        "name": "npmtag",
        "type": "option",
        "char": "t",
        "summary": "tag to use when publishing to npm",
        "multiple": false,
        "default": "latest"
      },
      "npmaccess": {
        "name": "npmaccess",
        "type": "option",
        "char": "a",
        "summary": "access level to use when publishing to npm",
        "multiple": false,
        "default": "public"
      },
      "install": {
        "name": "install",
        "type": "boolean",
        "summary": "run yarn install and build on repository",
        "allowNo": true
      },
      "prerelease": {
        "name": "prerelease",
        "type": "option",
        "summary": "determine the next version as <version>-<prerelease>.0 if version is not manually set",
        "multiple": false
      },
      "verify": {
        "name": "verify",
        "type": "boolean",
        "summary": "verify npm registry has new version after publish and digital signature",
        "allowNo": true
      },
      "githubtag": {
        "name": "githubtag",
        "type": "option",
        "summary": "given a github tag, release the version specified in the package.json as is. Useful when you've already done a release and only need npm publish features",
        "multiple": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "npm:release:validate",
    "summary": "inspects the git commits to see if there are any commits that will warrant a new release",
    "description": "inspects the git commits to see if there are any commits that will warrant a new release",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "show all commits for all packages (only works with --json flag)",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "org:assign:permset",
    "summary": "Assign a permission set to one or more users of a scratch org.",
    "description": "To specify an alias for the --target-org or --on-behalf-of flags, use the CLI username alias, such as the one you set\nwith the \"alias set\" command. Don't use the value of the Alias field of the User Salesforce object for the org user.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Assign two permission sets called DreamHouse and LargeDreamHouse to original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %> --name \"DreamHouse, LargeDreamHouse\"",
      "Assign the Dreamhouse permission set to the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --name DreamHouse --target-org my-scratch",
      "Assign the Dreamhouse permission set to the specified list of users of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --on-behalf-of \"user1@my.org,user2,user3\""
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Comma-separated list of permission sets to assign.",
        "required": true,
        "multiple": true,
        "aliases": ["permsetname"]
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "b",
        "summary": "Comma-separated list of usernames or aliases to assign the permission set to.",
        "multiple": true,
        "aliases": ["onbehalfof"]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:assign:permsetlicense",
    "summary": "Assign a permission set license to one or more users of a scratch org.",
    "description": "To specify an alias for the --target-org or --on-behalf-of flags, use the CLI username alias, such as the one you set with the \"alias set\" command. Don't use the value of the Alias field of the User Salesforce object for the org user.",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Assign the DreamHouse permission set license to original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse",
      "Assign the Dreamhouse permission set license to the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --name DreamHouse --target-org my-scratch",
      "Assign the Dreamhouse permission set license to the specified list of users of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --on-behalf-of \"user1@my.org,user2,user3\""
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "summary": "Name of the permission set license to assign.",
        "required": true,
        "multiple": false,
        "aliases": ["perm-set-license", "psl"]
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "b",
        "summary": "Comma-separated list of usernames or aliases to assign the permission set license to.",
        "multiple": true,
        "aliases": ["onbehalfof"]
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Scratch org alias or login user.",
        "required": true,
        "multiple": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "org:generate:password",
    "summary": "Generate a random password for scratch org users.",
    "description": "By default, new scratch orgs contain one admin user with no password. Use the CLI to generate or change a password for any scratch org user. After it's set, you can’t unset a password, you can only change it.\n\nTo change the password strength, set the --complexity flag to a value between 0 and 5. Each value specifies the types of characters used in the generated password:\n\n0 - lower case letters only\n1 - lower case letters and numbers only\n2 - lower case letters and symbols only\n3 - lower and upper case letters and numbers only\n4 - lower and upper case letters and symbols only\n5 - lower and upper case letters and numbers and symbols only\n\nTo see a password that was previously generated, run \"<%= config.bin %> org user display\".",
    "strict": true,
    "pluginName": "@salesforce/plugin-user",
    "pluginAlias": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "Generate a password for the original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Generate a password that contains 12 characters for the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --length 12 --target-org my-scratch",
      "Generate a password for your default scratch org admin user that uses lower and upper case letters and numbers only:\n<%= config.bin %> <%= command.id %> --complexity 3",
      "Generate a password for the specified users in the default scratch org:\n<%= config.bin %> <%= command.id %> --on-behalf-of \"user1@my.org,user2@my.org,user3@my.org\""
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "on-behalf-of": {
        "name": "on-behalf-of",
        "type": "option",
        "char": "b",
        "summary": "Comma-separated list of usernames or aliases to assign the password to.",
        "multiple": true,
        "aliases": ["onbehalfof"]
      },
      "length": {
        "name": "length",
        "type": "option",
        "char": "l",
        "summary": "Number of characters in the generated password; valid values are between 8 and 100.",
        "multiple": false,
        "default": 13
      },
      "complexity": {
        "name": "complexity",
        "type": "option",
        "char": "c",
        "summary": "Level of password complexity or strength; the higher the value, the stronger the password.",
        "multiple": false,
        "default": 5
      },
      "target-org": {
        "name": "target-org",
        "type": "option",
        "char": "o",
        "summary": "Username or alias of the target org.",
        "required": true,
        "multiple": false
      },
      "api-version": {
        "name": "api-version",
        "type": "option",
        "description": "Override the api version used for api requests made by this command",
        "multiple": false
      }
    },
    "args": {},
    "hasDynamicHelp": false,
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.11"
  },
  {
    "id": "plugins",
    "description": "List installed plugins.",
    "strict": true,
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ <%- config.bin %> plugins"],
    "flags": {
      "core": {
        "name": "core",
        "type": "boolean",
        "description": "Show core plugins.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "core": {
        "description": "Show core plugins.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:install",
    "description": "Installs a plugin into the CLI.\nCan be installed from npm or a git url.\n\nInstallation of a user-installed plugin will override a core plugin.\n\ne.g. If you have a core plugin that has a 'hello' command, installing a user-installed plugin with a 'hello' command will override the core plugin implementation. This is useful if a user needs to update core plugin functionality in the CLI without the need to patch and update the whole CLI.\n",
    "strict": true,
    "usage": "plugins:install PLUGIN...",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      "$ <%= config.bin %> plugins:install <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> ",
      "$ <%= config.bin %> plugins:install https://github.com/someuser/someplugin",
      "$ <%= config.bin %> plugins:install someuser/someplugin"
    ],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "char": "f",
        "description": "Run yarn install with force flag.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "char": "f",
        "description": "Run yarn install with force flag.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:generate",
    "description": "create a new sfdx-cli plugin",
    "strict": true,
    "pluginName": "@salesforce/plugin-generator",
    "pluginAlias": "@salesforce/plugin-generator",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "defaults": {
        "name": "defaults",
        "type": "boolean",
        "description": "use defaults for every setting",
        "allowNo": false
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "description": "overwrite existing files",
        "allowNo": false
      }
    },
    "args": [
      {
        "name": "path",
        "required": false
      }
    ],
    "_flags": {
      "defaults": {
        "description": "use defaults for every setting",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "description": "overwrite existing files",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@1.26.1",
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:inspect",
    "description": "Displays installation properties of a plugin.",
    "strict": true,
    "usage": "plugins:inspect PLUGIN...",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ <%= config.bin %> plugins:inspect <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_baseFlags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "plugins:link",
    "description": "Links a plugin into the CLI for development.\nInstallation of a linked plugin will override a user-installed or core plugin.\n\ne.g. If you have a user-installed or core plugin that has a 'hello' command, installing a linked plugin with a 'hello' command will override the user-installed or core plugin implementation. This is useful for development work.\n",
    "strict": true,
    "usage": "plugins:link PLUGIN",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "examples": ["$ <%= config.bin %> plugins:link <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:uninstall",
    "description": "Removes a plugin from the CLI.",
    "strict": true,
    "usage": "plugins:uninstall PLUGIN...",
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "help": "\n  Example:\n    $ <%- config.bin %> plugins:uninstall <%- config.pjson.oclif.examplePlugin || \"myplugin\" %>\n  ",
    "variableArgs": true,
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "plugins:trust:verify",
    "summary": "Validate a digital signature.",
    "description": "Verifies the digital signature on an npm package matches the signature and key stored at the expected URLs.",
    "strict": true,
    "pluginName": "@salesforce/plugin-trust",
    "pluginAlias": "@salesforce/plugin-trust",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --npm @scope/npmName --registry http://my.repo.org:4874",
      "<%= config.bin %> <%= command.id %> --npm @scope/npmName"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "npm": {
        "name": "npm",
        "type": "option",
        "char": "n",
        "summary": "Specify the npm name. This can include a tag/version.",
        "required": true,
        "multiple": false
      },
      "registry": {
        "name": "registry",
        "type": "option",
        "char": "r",
        "summary": "The registry name. The behavior is the same as npm.",
        "multiple": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "hidden": true,
        "multiple": false,
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        }
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "plugins:update",
    "description": "Update installed plugins.",
    "strict": true,
    "pluginName": "@oclif/plugin-plugins",
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "help": {
        "name": "help",
        "type": "boolean",
        "char": "h",
        "description": "Show CLI help.",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "allowNo": false
      }
    },
    "args": {},
    "topic": "plugins",
    "command": "update",
    "_flags": {
      "help": {
        "description": "Show CLI help.",
        "char": "h",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "repositories",
    "summary": "list repositories owned and supported by Salesforce CLI\nFor more information on the list of repositories, visit https://github.com/salesforcecli/status.",
    "description": "list repositories owned and supported by Salesforce CLI\nFor more information on the list of repositories, visit https://github.com/salesforcecli/status.",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "<%= config.bin %> <%= command.id %> --columns=url --filter='Name=sfdx-core' --no-header | xargs open",
      "<%= config.bin %> <%= command.id %> --json | jq -r '.result[] | select(.name==\"sfdx-core\") | .packages[] | .url"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "columns": {
        "name": "columns",
        "type": "option",
        "description": "only show provided columns (comma-separated)",
        "multiple": false,
        "exclusive": ["extended"]
      },
      "sort": {
        "name": "sort",
        "type": "option",
        "description": "property to sort by (prepend '-' for descending)",
        "multiple": false
      },
      "filter": {
        "name": "filter",
        "type": "option",
        "description": "filter property by partial string matching, ex: name=foo",
        "multiple": false
      },
      "csv": {
        "name": "csv",
        "type": "boolean",
        "description": "output is csv format [alias: --output=csv]",
        "allowNo": false,
        "exclusive": ["no-truncate"]
      },
      "output": {
        "name": "output",
        "type": "option",
        "description": "output in a more machine friendly format",
        "multiple": false,
        "options": ["csv", "json", "yaml"],
        "exclusive": ["no-truncate", "csv"]
      },
      "extended": {
        "name": "extended",
        "type": "boolean",
        "char": "x",
        "description": "show extra columns",
        "allowNo": false,
        "exclusive": ["columns"]
      },
      "no-truncate": {
        "name": "no-truncate",
        "type": "boolean",
        "description": "do not truncate output to fit screen",
        "allowNo": false,
        "exclusive": ["csv"]
      },
      "no-header": {
        "name": "no-header",
        "type": "boolean",
        "description": "hide table header from output",
        "allowNo": false,
        "exclusive": ["csv"]
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "search",
    "summary": "Search for a command.",
    "description": "Once you select a command, hit enter and it will show the help for that command.",
    "strict": true,
    "pluginName": "@oclif/plugin-search",
    "pluginAlias": "@oclif/plugin-search",
    "pluginType": "core",
    "aliases": [],
    "flags": {},
    "args": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "shane:ai:auth",
    "description": "get an access token from an email and a .pem file, either passed in or from environment variables",
    "usage": "shane:ai:auth [-e <email>] [-f <filepath>] [-t <integer>] [-l <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:ai:auth -e shane.mclaughlin@salesforce.com -f ~/code/certs/einstein_platform.pem\n    // reauths, and takes what it can get\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "email": {
        "name": "email",
        "type": "option",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account"
      },
      "certfile": {
        "name": "certfile",
        "type": "option",
        "char": "f",
        "description": "path to your private key from when you signed up"
      },
      "tokentime": {
        "name": "tokentime",
        "type": "option",
        "char": "t",
        "description": "time in minutes that you want your token to be valid for",
        "default": 1440
      },
      "level": {
        "name": "level",
        "type": "option",
        "char": "l",
        "description": "where to store this config",
        "options": ["local", "global"],
        "default": "local"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "email": {
        "kind": "email",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account",
        "env": "EINSTEIN_EMAIL",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "certfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to your private key from when you signed up",
        "env": "EINSTEIN_CERTPATH",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tokentime": {
        "kind": "integer",
        "char": "t",
        "description": "time in minutes that you want your token to be valid for",
        "default": 1440,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "level": {
        "kind": "string",
        "char": "l",
        "description": "where to store this config",
        "options": ["local", "global"],
        "default": "local",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:ai:dataset:delete",
    "description": "delete a dataset",
    "usage": "shane:ai:dataset:delete -n <string> [-e <email>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:ai:dataset:delete -n 57"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "dataset": {
        "name": "dataset",
        "type": "option",
        "char": "n",
        "description": "dataset id",
        "required": true
      },
      "email": {
        "name": "email",
        "type": "option",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "dataset": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "dataset id",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "email": {
        "kind": "email",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:ai:dataset:get",
    "description": "get an access token from an email and a .pem file, either passed in or from environment variables",
    "usage": "shane:ai:dataset:get -n <string> [-l] [-e <email>] [-p] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:ai:dataset:get -n 57"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "dataset": {
        "name": "dataset",
        "type": "option",
        "char": "n",
        "description": "dataset id",
        "required": true
      },
      "language": {
        "name": "language",
        "type": "boolean",
        "char": "l",
        "description": "use the language endpoint instead of vision",
        "allowNo": false
      },
      "email": {
        "name": "email",
        "type": "option",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account"
      },
      "poll": {
        "name": "poll",
        "type": "boolean",
        "char": "p",
        "description": "poll for the status to be completed",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "dataset": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "dataset id",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "language": {
        "kind": "boolean",
        "char": "l",
        "description": "use the language endpoint instead of vision",
        "allowNo": false,
        "type": "boolean"
      },
      "email": {
        "kind": "email",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "poll": {
        "kind": "boolean",
        "char": "p",
        "description": "poll for the status to be completed",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:ai:dataset:upload",
    "description": "upload a dataset",
    "usage": "shane:ai:dataset:upload [-n <string>] [-f <filepath>] [-p <string>] [-t <string>] [--train] [-e <email>] [-w <integer>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:ai:dataset:upload -e shane.mclaughlin@salesforce.com -f ~/myPics.zip -n AwesomeDataset "],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. "
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "Path to the .zip (image) or .csv/.tsv/.json (language) file on the local drive (FilePart). The maximum file size you can upload from a local drive is 50 MB for images, 25 MB for text"
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "description": "URL of the .zip (image) or .csv/.tsv/.json (language) file. The maximum file size you can upload from a web location is 2 GB (images), 25MB (text) "
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "Type of dataset data. Valid values are:",
        "options": ["image", "image-detection", "image-multi-label", "text-intent", "text-sentiment"],
        "default": "image"
      },
      "train": {
        "name": "train",
        "type": "boolean",
        "description": "train a model on the dataset",
        "allowNo": false
      },
      "email": {
        "name": "email",
        "type": "option",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account"
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "char": "w",
        "description": "how long to wait for this to process (minutes)",
        "default": 10
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. ",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "Path to the .zip (image) or .csv/.tsv/.json (language) file on the local drive (FilePart). The maximum file size you can upload from a local drive is 50 MB for images, 25 MB for text",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "path": {
        "kind": "string",
        "char": "p",
        "description": "URL of the .zip (image) or .csv/.tsv/.json (language) file. The maximum file size you can upload from a web location is 2 GB (images), 25MB (text) ",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "type": {
        "kind": "string",
        "char": "t",
        "description": "Type of dataset data. Valid values are:",
        "options": ["image", "image-detection", "image-multi-label", "text-intent", "text-sentiment"],
        "default": "image",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "train": {
        "kind": "boolean",
        "description": "train a model on the dataset",
        "allowNo": false,
        "type": "boolean"
      },
      "email": {
        "kind": "email",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "integer",
        "char": "w",
        "description": "how long to wait for this to process (minutes)",
        "default": 10,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:ai:playground:setup",
    "description": "upload .pem file from local encrypted copy, setup username and secret key in custom setting",
    "usage": "shane:ai:playground:setup -f <filepath> [-e <email>] [-k <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:ai:playground:setup -f my.pem -e shane.mclaughlin@salesforce.com -k yay9HVn68GzXrqhT0HWkoQ=="
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "encrypted file from local filesystem",
        "required": true
      },
      "email": {
        "name": "email",
        "type": "option",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account.  Defaults to EINSTEIN_EMAIL from the environment"
      },
      "key": {
        "name": "key",
        "type": "option",
        "char": "k",
        "description": "encoding key used to encrypt/decrypt the file.  Defaults to AI_PLAYGROUND_SETUP_KEY from the environment"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "encrypted file from local filesystem",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "email": {
        "kind": "email",
        "char": "e",
        "description": "email address you used when you signed up for your einstein.ai account.  Defaults to EINSTEIN_EMAIL from the environment",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "key": {
        "kind": "string",
        "char": "k",
        "description": "encoding key used to encrypt/decrypt the file.  Defaults to AI_PLAYGROUND_SETUP_KEY from the environment",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:ai:playground:setupHeroku",
    "description": "provisions a new einstein.ai account and sets up the org",
    "usage": "shane:ai:playground:setupHeroku [-a <string>] [-c] [-k] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:ai:playground:herokuSetup -a my-existing-app\n    // creates addons to existing app\n    ",
      "sfdx shane:ai:playground:herokuSetup -c\n    // creates an app with whatever name heroku feels like\n    ",
      "sfdx shane:ai:playground:herokuSetup -a non-existing-app -c\n    // creates a new app with the name of your choice (usually build dynamically!)\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "app": {
        "name": "app",
        "type": "option",
        "char": "a",
        "description": "name of the heroku app that we attach add-ons to"
      },
      "create": {
        "name": "create",
        "type": "boolean",
        "char": "c",
        "description": "create the app",
        "allowNo": false
      },
      "keepauth": {
        "name": "keepauth",
        "type": "boolean",
        "char": "k",
        "description": "save the refresh token for einstein.ai to the local sfdx store for future cli use",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "app": {
        "kind": "string",
        "char": "a",
        "description": "name of the heroku app that we attach add-ons to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "create": {
        "kind": "boolean",
        "char": "c",
        "description": "create the app",
        "allowNo": false,
        "type": "boolean"
      },
      "keepauth": {
        "kind": "boolean",
        "char": "k",
        "description": "save the refresh token for einstein.ai to the local sfdx store for future cli use",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:analytics:app:share",
    "description": "share an analytics app by name",
    "usage": "shane:analytics:app:share -n <string> [--allprm -c] [--allcsp undefined] [--org] [-t <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:analytics:app:share -n SharedApp --allprm -c\n// share the standard SharedApp with all partners view level perms (default) and check the \"enable sharing with communities\" box for this app\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the analytics app",
        "required": true
      },
      "allprm": {
        "name": "allprm",
        "type": "boolean",
        "description": "share with all partner users",
        "allowNo": false
      },
      "allcsp": {
        "name": "allcsp",
        "type": "boolean",
        "description": "share with all customer portal users",
        "allowNo": false
      },
      "org": {
        "name": "org",
        "type": "boolean",
        "description": "share with all internal users",
        "allowNo": false
      },
      "community": {
        "name": "community",
        "type": "boolean",
        "char": "c",
        "description": "enable community sharing",
        "allowNo": false
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "access level",
        "options": ["View", "Edit", "Manage"],
        "default": "View"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name of the analytics app",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "allprm": {
        "kind": "boolean",
        "description": "share with all partner users",
        "dependsOn": ["community"],
        "allowNo": false,
        "type": "boolean"
      },
      "allcsp": {
        "kind": "boolean",
        "description": "share with all customer portal users",
        "dependsOn": ["community"],
        "allowNo": false,
        "type": "boolean"
      },
      "org": {
        "kind": "boolean",
        "description": "share with all internal users",
        "allowNo": false,
        "type": "boolean"
      },
      "community": {
        "kind": "boolean",
        "char": "c",
        "description": "enable community sharing",
        "allowNo": false,
        "type": "boolean"
      },
      "type": {
        "kind": "string",
        "char": "t",
        "default": "View",
        "description": "access level",
        "options": ["View", "Edit", "Manage"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:analytics:community:enable",
    "description": "Activate a community using a headless browser",
    "usage": "shane:analytics:community:enable [-b] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "showbrowser": {
        "name": "showbrowser",
        "type": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "deprecated": {
      "version": 47,
      "message": "This command is no longer needed because your scratch def file can use\n\n\"analyticsSettings\": {\n    \"canShareAppsWithCommunities\": true,\n    \"enableAnalyticsSharingEnable\": true\n}"
    },
    "flagsConfig": {
      "showbrowser": {
        "kind": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:analytics:dataflow:start",
    "description": "start an analytics dataflow by name/label/id",
    "usage": "shane:analytics:dataflow:start [-n <string>] [-i <id>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:analytics:dataflow:start -n MyDataFlowName\n// enqueue a job for the the analytics dataflow with name/label MyDataFlowName (will not wait for completion of the dataflow)\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name or label of the analytics app (will match either)"
      },
      "id": {
        "name": "id",
        "type": "option",
        "char": "i",
        "description": "the id of the dataflow"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name or label of the analytics app (will match either)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "id": {
        "kind": "id",
        "char": "i",
        "description": "the id of the dataflow",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:analytics:dataset:download",
    "description": "download a dataset as csv",
    "usage": "shane:analytics:dataset:download [-i <id>] [-n <string>] [--versionid <string>] [-t <filepath>] [-r <number>] [-o <number>] [-b <number>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:analytics:dataset:download -n YourDataSetName -t myLocalFolder",
      "sfdx shane:analytics:dataset:download -i 0Fb6A000000gDFxSAM --versionid 0Fc6A000002d8GwSAI -t myLocalFolder -r 10000 -b 5000"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "id": {
        "name": "id",
        "type": "option",
        "char": "i",
        "description": "dataset id"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "dataset name"
      },
      "versionid": {
        "name": "versionid",
        "type": "option",
        "description": "specify a version"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where you want to save the file",
        "default": "."
      },
      "rows": {
        "name": "rows",
        "type": "option",
        "char": "r",
        "description": "how many rows?",
        "default": 1000000000
      },
      "offset": {
        "name": "offset",
        "type": "option",
        "char": "o",
        "description": "offset for rows",
        "default": 0
      },
      "batchsize": {
        "name": "batchsize",
        "type": "option",
        "char": "b",
        "description": "maximum batchsize. Splits query in parts of this size.",
        "default": 1000000000
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "id": {
        "kind": "id",
        "char": "i",
        "description": "dataset id",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "dataset name",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "versionid": {
        "kind": "string",
        "description": "specify a version",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "filepath",
        "char": "t",
        "description": "where you want to save the file",
        "default": ".",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "rows": {
        "kind": "number",
        "char": "r",
        "default": 1000000000,
        "description": "how many rows?",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "offset": {
        "kind": "number",
        "char": "o",
        "default": 0,
        "description": "offset for rows",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "batchsize": {
        "kind": "number",
        "char": "b",
        "default": 1000000000,
        "description": "maximum batchsize. Splits query in parts of this size.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:analytics:dataset:list",
    "description": "what analytics datasets are in my org?",
    "usage": "shane:analytics:dataset:list [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:analytics:dataset:list"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {},
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:analytics:dataset:upload",
    "description": "upload a dataset from csv",
    "usage": "shane:analytics:dataset:upload -n <string> -f <filepath> [-a <string>] [-m <filepath>] [-o <string>] [--async] [-d <integer>] [--serial] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:analytics:dataset:upload -n someName -f data/myFile.csv -m myMetaFile.json",
      "sfdx shane:analytics:dataset:upload -n someName -f data/myFile.csv -m myMetaFile.json -a SharedApp  --async"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "dataset name--no spaces, should be like an api name",
        "required": true
      },
      "csvfile": {
        "name": "csvfile",
        "type": "option",
        "char": "f",
        "description": "local csv file containing the data",
        "required": true
      },
      "app": {
        "name": "app",
        "type": "option",
        "char": "a",
        "description": "app name"
      },
      "metajson": {
        "name": "metajson",
        "type": "option",
        "char": "m",
        "description": "path to json file for describing your upload (highly recommended)"
      },
      "operation": {
        "name": "operation",
        "type": "option",
        "char": "o",
        "description": "what to do with the dataset if it already exists.  See https://developer.salesforce.com/docs/atlas.en-us.bi_dev_guide_ext_data.meta/bi_dev_guide_ext_data/bi_ext_data_object_externaldata.htm",
        "options": ["Append", "Overwrite", "Upsert", "Delete"],
        "default": "Overwrite"
      },
      "async": {
        "name": "async",
        "type": "boolean",
        "description": "do not wait for successful completion of the dataset upload...just return and hope for the best.  If omitted, will poll the analytics rest API for job processing status until complete",
        "allowNo": false
      },
      "uploadinterval": {
        "name": "uploadinterval",
        "type": "option",
        "char": "d",
        "description": "milliseconds between uploaded chunks...increase this if you get strange errors during file uploads like \"write EPIPE\"",
        "default": 500
      },
      "serial": {
        "name": "serial",
        "type": "boolean",
        "description": "chunks are uploaded with no parallelization to prevent locking issues",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "dataset name--no spaces, should be like an api name",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "csvfile": {
        "kind": "filepath",
        "char": "f",
        "description": "local csv file containing the data",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "app": {
        "kind": "string",
        "char": "a",
        "description": "app name",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "metajson": {
        "kind": "filepath",
        "char": "m",
        "description": "path to json file for describing your upload (highly recommended)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "operation": {
        "kind": "string",
        "char": "o",
        "description": "what to do with the dataset if it already exists.  See https://developer.salesforce.com/docs/atlas.en-us.bi_dev_guide_ext_data.meta/bi_dev_guide_ext_data/bi_ext_data_object_externaldata.htm",
        "options": ["Append", "Overwrite", "Upsert", "Delete"],
        "default": "Overwrite",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "async": {
        "kind": "boolean",
        "description": "do not wait for successful completion of the dataset upload...just return and hope for the best.  If omitted, will poll the analytics rest API for job processing status until complete",
        "allowNo": false,
        "type": "boolean"
      },
      "uploadinterval": {
        "kind": "integer",
        "char": "d",
        "description": "milliseconds between uploaded chunks...increase this if you get strange errors during file uploads like \"write EPIPE\"",
        "default": 500,
        "min": 0,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "serial": {
        "kind": "boolean",
        "description": "chunks are uploaded with no parallelization to prevent locking issues",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:cdc:create",
    "usage": "shane:cdc:create -d <directory> [--batchsize <integer>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "batchsize": {
        "name": "batchsize",
        "type": "option",
        "description": "how many records to insert in a batch",
        "default": 200
      },
      "dir": {
        "name": "dir",
        "type": "option",
        "char": "d",
        "description": "folder to upload, containing /cdc/records",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "batchsize": {
        "kind": "integer",
        "default": 200,
        "description": "how many records to insert in a batch",
        "max": 200,
        "min": 1,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "dir": {
        "kind": "directory",
        "char": "d",
        "required": true,
        "description": "folder to upload, containing /cdc/records",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:cdc:prep",
    "usage": "shane:cdc:prep -d <directory> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "dir": {
        "name": "dir",
        "type": "option",
        "char": "d",
        "description": "folder to upload, containing /cdc/records",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "dir": {
        "kind": "directory",
        "char": "d",
        "required": true,
        "description": "folder to upload, containing /cdc/records",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:cdc:stream",
    "usage": "shane:cdc:stream [-o <string>] [-d <directory>] [-r <integer>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:cdc:stream // get all the change events",
      "sfdx shane:cdc:stream -o Account // get all the change events on a single object",
      "sfdx shane:cdc:stream -d myDir // stream change events to myDir/cdc, organized into folders by object api type"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "subscribe to change events for only a single object (api name, including __c)"
      },
      "dir": {
        "name": "dir",
        "type": "option",
        "char": "d",
        "description": "stream the events to a folder instead of the console"
      },
      "replay": {
        "name": "replay",
        "type": "option",
        "char": "r",
        "description": "replay Id to begin from",
        "default": -1
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "description": "subscribe to change events for only a single object (api name, including __c)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "dir": {
        "kind": "directory",
        "char": "d",
        "description": "stream the events to a folder instead of the console",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "replay": {
        "kind": "integer",
        "char": "r",
        "description": "replay Id to begin from",
        "default": -1,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:cert:unhardcode",
    "description": "modify local xml files with data from org to work around hardcoded metadata issues",
    "usage": "shane:cert:unhardcode -f <filepath> -l <string> [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "samlfile": {
        "name": "samlfile",
        "type": "option",
        "char": "f",
        "description": "full path to the samlssoconfig file.  Will be modified by this process",
        "required": true
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "description": "masterLabel of the cert whose Id you need",
        "required": true
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "samlfile": {
        "kind": "filepath",
        "char": "f",
        "description": "full path to the samlssoconfig file.  Will be modified by this process",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "label": {
        "kind": "string",
        "char": "l",
        "description": "masterLabel of the cert whose Id you need",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresProject": false,
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:communities:activate",
    "description": "Activate a community using a headless browser",
    "usage": "shane:communities:activate -n <string> [-b] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the community to activate",
        "required": true
      },
      "showbrowser": {
        "name": "showbrowser",
        "type": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name of the community to activate",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "showbrowser": {
        "kind": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:communities:describe",
    "description": "tell me about the communities in the org, and optionally store the description",
    "usage": "shane:communities:describe [--store] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:communities:describe"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "store": {
        "name": "store",
        "type": "boolean",
        "description": "store the community description in externalApps.json",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "store": {
        "kind": "boolean",
        "description": "store the community description in externalApps.json",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:communities:json:modify",
    "description": "Manipulate community ExperienceBundle JSON files, using REST or Tooling queries to an org to get metadata IDs",
    "usage": "shane:communities:json:modify -f <filepath> -p <string> [-i <string>] [--queryfield <string> | undefined | undefined] [--truncate | undefined] [-s <string>] [-w] [--wavename <string> [--wavetype <string> | undefined | [-t [-q <string> | -d <string> | --variable <string>]] | undefined | undefined]] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:communities:json:modify -f force-app/main/default/experiences/employeebots1/views/home.json -i 69c03077-932a-4c08-b932-46baec5a7c86 -p someProp  -v NewValue\n// find the component and set a new hardcoded value for the property but don't write to the file\n",
      "sfdx shane:communities:json:modify -f force-app/main/default/experiences/employeebots1/views/home.json -i 69c03077-932a-4c08-b932-46baec5a7c86 -p orgId  -q \"select id from organization\" --write\n// find the component and set a new value from a query to the org and update file locally\n",
      "sfdx shane:communities:json:modify -f force-app/main/default/experiences/employeebots1/views/home.json -i 69c03077-932a-4c08-b932-46baec5a7c86 -p someUnconvertedJSON -s actualPropInsideTheJSON -q \"select id from organization\" -t --write\n// find the component and set a new value from a query onto a property contained within unconverted JSON using the tooling api and update file locally\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "full path to the file",
        "required": true
      },
      "id": {
        "name": "id",
        "type": "option",
        "char": "i",
        "description": "unique id of the component.  ex: 69c03077-932a-4c08-b932-46baec5a7c86"
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "description": "soql query for a field to pass to the value"
      },
      "queryfield": {
        "name": "queryfield",
        "type": "option",
        "description": "field from the record returned by --query that you want to use the value from",
        "default": "Id"
      },
      "truncate": {
        "name": "truncate",
        "type": "boolean",
        "description": "truncate ids to 15 characters on queried record",
        "allowNo": false
      },
      "property": {
        "name": "property",
        "type": "option",
        "char": "p",
        "description": "property that will be updated (or contains JSON or what will be updated",
        "required": true
      },
      "subproperty": {
        "name": "subproperty",
        "type": "option",
        "char": "s",
        "description": "if the property is a json object, or json-like string, the subproperty inside that that needs updating"
      },
      "value": {
        "name": "value",
        "type": "option",
        "char": "d",
        "description": "new value for the property/subproperty"
      },
      "variable": {
        "name": "variable",
        "type": "option",
        "description": "assign one of the variables to the property",
        "options": ["OrgId", "InstanceUrl", "Username"]
      },
      "write": {
        "name": "write",
        "type": "boolean",
        "char": "w",
        "description": "write over the original file with its new version.  omit to see what will be written",
        "allowNo": false
      },
      "tooling": {
        "name": "tooling",
        "type": "boolean",
        "char": "t",
        "description": "using tooling api for query instead of normal sobjects",
        "allowNo": false
      },
      "wavetype": {
        "name": "wavetype",
        "type": "option",
        "description": "part of the wave api endpoint",
        "options": ["dashboards"]
      },
      "wavename": {
        "name": "wavename",
        "type": "option",
        "description": "name to match from wave api"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "supportsUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "full path to the file",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "id": {
        "kind": "string",
        "char": "i",
        "description": "unique id of the component.  ex: 69c03077-932a-4c08-b932-46baec5a7c86",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "query": {
        "kind": "string",
        "char": "q",
        "description": "soql query for a field to pass to the value",
        "exclusive": ["value", "variable"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "queryfield": {
        "kind": "string",
        "description": "field from the record returned by --query that you want to use the value from",
        "exclusive": ["value", "variable"],
        "default": "Id",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "truncate": {
        "kind": "boolean",
        "description": "truncate ids to 15 characters on queried record",
        "exclusive": ["value"],
        "allowNo": false,
        "type": "boolean"
      },
      "property": {
        "kind": "string",
        "char": "p",
        "description": "property that will be updated (or contains JSON or what will be updated",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "subproperty": {
        "kind": "string",
        "char": "s",
        "description": "if the property is a json object, or json-like string, the subproperty inside that that needs updating",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "value": {
        "kind": "string",
        "char": "d",
        "description": "new value for the property/subproperty",
        "exclusive": ["query", "variable", "truncate"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "variable": {
        "kind": "string",
        "description": "assign one of the variables to the property",
        "options": ["OrgId", "InstanceUrl", "Username"],
        "exclusive": ["value", "query", "queryfield"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "write": {
        "kind": "boolean",
        "char": "w",
        "description": "write over the original file with its new version.  omit to see what will be written",
        "allowNo": false,
        "type": "boolean"
      },
      "tooling": {
        "kind": "boolean",
        "char": "t",
        "description": "using tooling api for query instead of normal sobjects",
        "dependsOn": ["query"],
        "exclusive": ["value", "analytics", "variable"],
        "allowNo": false,
        "type": "boolean"
      },
      "wavetype": {
        "kind": "string",
        "description": "part of the wave api endpoint",
        "exclusive": ["value", "tooling", "query", "variable"],
        "options": ["dashboards"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wavename": {
        "kind": "string",
        "description": "name to match from wave api",
        "exclusive": ["value", "tooling", "query", "variable"],
        "dependsOn": ["wavetype"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:communities:publish",
    "description": "Publish a community using a headless browser",
    "usage": "shane:communities:publish [-n <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:communities:publish\n// publishes all the communities in the org\n",
      "sfdx shane:communities:publish -n customer\n// finds a community named customer, publishes it.\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the community to publish (case sensitive!)"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name of the community to publish (case sensitive!)",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:communities:selfreg",
    "description": "set the self-registration account for a community",
    "usage": "shane:communities:selfreg -a <string> -c <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:communities:selfreg -a Salesforce -c \"Trailblazer Community\""],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "account": {
        "name": "account",
        "type": "option",
        "char": "a",
        "description": "Name of the account.  Wrap in quotes if there are spaces or weird characters",
        "required": true
      },
      "community": {
        "name": "community",
        "type": "option",
        "char": "c",
        "description": "name of the community.  Wrap in quotes if there are spaces or weird characters",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "account": {
        "kind": "string",
        "char": "a",
        "required": true,
        "description": "Name of the account.  Wrap in quotes if there are spaces or weird characters",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "community": {
        "kind": "string",
        "char": "c",
        "required": true,
        "description": "name of the community.  Wrap in quotes if there are spaces or weird characters",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:communities:url",
    "description": "get me the login for a community from an org",
    "usage": "shane:communities:url [-p <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:communities:url --prefix dealers"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "prefix": {
        "name": "prefix",
        "type": "option",
        "char": "p",
        "description": "community prefix (thing after the slash in the url)",
        "required": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "prefix": {
        "kind": "string",
        "char": "p",
        "required": false,
        "description": "community prefix (thing after the slash in the url)",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:concierge:chat:enable",
    "description": "Modify custom settings to enable live agent chat for Concierge",
    "usage": "shane:concierge:chat:enable [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "verbose": {
        "type": "builtin"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:connectedapp:attributes",
    "description": "Set attributes on a connected app.  Attributes for salesforce mobile app at https://github.com/gabesumner/mobile-security/blob/master/customAttributes.json",
    "usage": "shane:connectedapp:attributes -n <string> -a <filepath> [-b] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:connectedapp:attributes -n AppAPIName -a attributes.json"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the connected app",
        "required": true
      },
      "showbrowser": {
        "name": "showbrowser",
        "type": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false
      },
      "attributes": {
        "name": "attributes",
        "type": "option",
        "char": "a",
        "description": "json formatted file of key/values",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name of the connected app",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "showbrowser": {
        "kind": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false,
        "type": "boolean"
      },
      "attributes": {
        "kind": "filepath",
        "required": true,
        "char": "a",
        "description": "json formatted file of key/values",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:connectedapp:uniquify",
    "description": "modify a clientId/consumerKey on a local connected app to guaranatee uniqueness",
    "usage": "shane:connectedapp:uniquify -p <string> -a <filepath> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:connectedapp:uniquify -a force-app/main/default/connectedApps/myConnectedApp.connectedApp-meta.xml -p 5h4n3\n// update the consumerKey of myConnectedApp to be unique, but start with 5h4n3\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "prefix": {
        "name": "prefix",
        "type": "option",
        "char": "p",
        "description": "add a prefix to the connected app's consumerKey",
        "required": true
      },
      "app": {
        "name": "app",
        "type": "option",
        "char": "a",
        "description": "full path to your connected app locally",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "prefix": {
        "kind": "string",
        "char": "p",
        "required": true,
        "description": "add a prefix to the connected app's consumerKey",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "app": {
        "kind": "filepath",
        "char": "a",
        "required": true,
        "description": "full path to your connected app locally",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:contentasset:create",
    "description": "create a ContentAsset from a local image file",
    "usage": "shane:contentasset:create -f <filepath> -n <string> [-l <string>] [-t <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:contentasset:create -f ~/somefile.jpg -n MyContentAsset\n// create a contentAsset called MyContentAsset from the local file\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "the file you want to turn into an asset",
        "required": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "api name for the contentAsset",
        "required": true
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "language code like en_US",
        "default": "en_US"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to find the contentassets folder (will create if it doesn't exist already)",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "file": {
        "kind": "filepath",
        "required": true,
        "char": "f",
        "description": "the file you want to turn into an asset",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "required": true,
        "char": "n",
        "description": "api name for the contentAsset",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "language": {
        "kind": "string",
        "char": "l",
        "description": "language code like en_US",
        "default": "en_US",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to find the contentassets folder (will create if it doesn't exist already)",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:dates:update",
    "description": "go through a folder of csv files and modify all the dates relative to a given date",
    "usage": "shane:data:dates:update -r <date> [-d <directory>] [-o <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:data:dates:update -r 1-1-2020\n// move all dates in .csv files in /data by the difference between now and 1-1-2020\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "datafolder": {
        "name": "datafolder",
        "type": "option",
        "char": "d",
        "description": "Where is all this data?",
        "default": "data"
      },
      "outputfolder": {
        "name": "outputfolder",
        "type": "option",
        "char": "o",
        "description": "where to output the modified CSV files",
        "default": "data-modified"
      },
      "relative": {
        "name": "relative",
        "type": "option",
        "char": "r",
        "description": "the date to adjust all other dates relative to.  example: if \"relative\" is 8 days ago, then all dates are moved forward 8 days",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "datafolder": {
        "kind": "directory",
        "char": "d",
        "default": "data",
        "description": "Where is all this data?",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputfolder": {
        "kind": "directory",
        "char": "o",
        "default": "data-modified",
        "description": "where to output the modified CSV files",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "relative": {
        "kind": "date",
        "char": "r",
        "description": "the date to adjust all other dates relative to.  example: if \"relative\" is 8 days ago, then all dates are moved forward 8 days",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:favorite",
    "description": "query records and set the match as a favorite",
    "usage": "shane:data:favorite -w <string> -o <string> [-l <string>] [--start] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:data:favorite -o Account -w \"name='Salesforce.com'\"\n// finds the matching record and adds it to the end of the favorites menu\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "l",
        "description": "the label you want to appear in the favorites menu"
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "description": "SOQL where clause to match a single record",
        "required": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "object API name (including __c if custom)",
        "required": true
      },
      "start": {
        "name": "start",
        "type": "boolean",
        "description": "add the favorite at the beginning of the menu",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "l",
        "description": "the label you want to appear in the favorites menu",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "where": {
        "kind": "string",
        "char": "w",
        "required": true,
        "description": "SOQL where clause to match a single record",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "object": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "object API name (including __c if custom)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "start": {
        "kind": "boolean",
        "description": "add the favorite at the beginning of the menu",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:file:download",
    "description": "save a file from the org to the local filesystem",
    "usage": "shane:data:file:download [-n <string> | -i <id>] [-f <string>] [-o <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:data:file:download -i 0691k000000MXfkAAG -o ./files/\n    // save a ContentDocument from the org to the files directory, keeping the existing filename",
      "sfdx shane:data:file:download -i 0691k000000MXfkAAG -o ./files/King.jpg\n    // save a ContentDocument from the org to files/King.jpg",
      "sfdx shane:data:file:download -i 0691k000000MXfkAAG\n    // save a ContentDocument from the org to the current working directory, keeping the existing filename",
      "sfdx shane:data:file:download -i 0681k000000MXfkAAG -o ./files/King.jpg\n    // save a ContentVersion from the org to files/King.jpg",
      "sfdx shane:data:file:download -n King\n    // go find the file named kind and download the latest version of it."
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the file in Salesforce that you want to download"
      },
      "id": {
        "name": "id",
        "type": "option",
        "char": "i",
        "description": "optional ContentDocument ID or ContentVersion ID that should be downloaded"
      },
      "filename": {
        "name": "filename",
        "type": "option",
        "char": "f",
        "description": "optional filename.  Defaults to the filename of the contentVersion to download"
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "o",
        "description": "optional output path to save the file, if omitted will save to current directory, if directory then it will keep the filename and save into that directory",
        "default": "."
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name of the file in Salesforce that you want to download",
        "exclusive": ["id"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "id": {
        "kind": "id",
        "char": "i",
        "description": "optional ContentDocument ID or ContentVersion ID that should be downloaded",
        "exclusive": ["name"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "filename": {
        "kind": "string",
        "char": "f",
        "description": "optional filename.  Defaults to the filename of the contentVersion to download",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "o",
        "description": "optional output path to save the file, if omitted will save to current directory, if directory then it will keep the filename and save into that directory",
        "default": ".",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:file:upload",
    "description": "upload a file from local resources, optionally as a chatter post or attached file on a record",
    "usage": "shane:data:file:upload -f <filepath> [-c -p <id>] [-n <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:data:file:upload -f ~/Downloads/King.png\n    //uploads file from local filesystem as a file\n    ",
      "sfdx shane:data:file:upload -f ~/Downloads/King.png -p 0011900000VkJgrAAF\n    //uploads file from local filesystem as a file and attaches to a record\n    ",
      "sfdx shane:data:file:upload -f ~/Downloads/King.png -p 0011900000VkJgrAAF -c\n    //uploads and attaches it to the indicated record, but as a chatter file post\n    ",
      "sfdx shane:data:file:upload -f ~/Downloads/King.png -p 0011900000VkJgrAAF -n CustomName -c\n    //uploads and attaches it to the indicated record, but as a chatter file post with a name that's not the same name as the local filesystem used\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "path to file on local filesystem",
        "required": true
      },
      "parentid": {
        "name": "parentid",
        "type": "option",
        "char": "p",
        "description": "optional record ID that the file should be attached to"
      },
      "chatter": {
        "name": "chatter",
        "type": "boolean",
        "char": "c",
        "description": "attach as a chatter content post instead of just as a file",
        "allowNo": false
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "set the name of the uploaded file"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "path to file on local filesystem",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "parentid": {
        "kind": "id",
        "char": "p",
        "description": "optional record ID that the file should be attached to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "chatter": {
        "kind": "boolean",
        "char": "c",
        "description": "attach as a chatter content post instead of just as a file",
        "dependsOn": ["parentid"],
        "allowNo": false,
        "type": "boolean"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "set the name of the uploaded file",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:id:query",
    "description": "query some object and get back the id of the matching record",
    "usage": "shane:data:id:query -o <string> -w <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:data:id:query -o User -u platformers -w \"Firstname = 'Shane' and Lastname = 'McLaughlin' and username = 'shane@platformers.org'\"'\n    // returns the id of the user. Use these ids between `` in other commands\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "object",
        "required": true
      },
      "where": {
        "name": "where",
        "type": "option",
        "char": "w",
        "description": "SOQL where clause for your query",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "description": "object",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "where": {
        "kind": "string",
        "char": "w",
        "description": "SOQL where clause for your query",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:search",
    "description": "sosl search",
    "usage": "shane:data:search -q <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:data:search -q \"find {stuff}\""],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "description": "valid sosl query",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "query": {
        "kind": "string",
        "char": "q",
        "required": true,
        "description": "valid sosl query",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:data:tree:import",
    "description": "similar to the original tree:import, but handles more than 200 records at a go, while still preserving relationships.  Takes longer.",
    "usage": "shane:data:tree:import -p <filepath> -d <directory> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:data:tree:import -p data/myPlan.json -d data/  // run all the data in the plan, and files mentioned are relative to ./data"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "plan": {
        "name": "plan",
        "type": "option",
        "char": "p",
        "description": "location of plan file",
        "required": true
      },
      "filesfolder": {
        "name": "filesfolder",
        "type": "option",
        "char": "d",
        "description": "folder that the plan lives in",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "plan": {
        "kind": "filepath",
        "char": "p",
        "required": true,
        "description": "location of plan file",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "filesfolder": {
        "kind": "directory",
        "char": "d",
        "required": true,
        "description": "folder that the plan lives in",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:events:stream",
    "usage": "shane:events:stream [-e <string>] [-d <directory>] [-r <integer>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:events:stream -e SomeEvent__e // subscribe to an event stream",
      "sfdx shane:events:stream -e SomeEvent__e -d myDir // stream events to myDir"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "event": {
        "name": "event",
        "type": "option",
        "char": "e",
        "description": "the platform event's api name"
      },
      "dir": {
        "name": "dir",
        "type": "option",
        "char": "d",
        "description": "stream the events to a folder instead of the console"
      },
      "replay": {
        "name": "replay",
        "type": "option",
        "char": "r",
        "description": "replay Id to begin from",
        "default": -1
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "event": {
        "kind": "string",
        "char": "e",
        "description": "the platform event's api name",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "dir": {
        "kind": "directory",
        "char": "d",
        "description": "stream the events to a folder instead of the console",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "replay": {
        "kind": "integer",
        "char": "r",
        "description": "replay Id to begin from",
        "default": -1,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:github:action",
    "description": "adds an action to test your repo against https://github.com/mshanemc/deploy-to-sfdx using github actions",
    "usage": "shane:github:action [-p] [-r] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:github:action\n// tests against both prod and prerel(gs0) deployers\n"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "skipprod": {
        "name": "skipprod",
        "type": "boolean",
        "char": "p",
        "description": "omit the production deployer",
        "allowNo": false
      },
      "skipprerel": {
        "name": "skipprerel",
        "type": "boolean",
        "char": "r",
        "description": "omit the pre-release deployer",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresProject": false,
    "flagsConfig": {
      "skipprod": {
        "kind": "boolean",
        "char": "p",
        "description": "omit the production deployer",
        "allowNo": false,
        "type": "boolean"
      },
      "skipprerel": {
        "kind": "boolean",
        "char": "r",
        "description": "omit the pre-release deployer",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:github:deploybutton",
    "description": "modify your local readme file to include a deployer link/button",
    "usage": "shane:github:deploybutton -d <url> -b <url> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "deployer": {
        "name": "deployer",
        "type": "option",
        "char": "d",
        "description": "the base url for your deployer",
        "required": true,
        "default": "https://hosted-scratch.herokuapp.com/"
      },
      "button": {
        "name": "button",
        "type": "option",
        "char": "b",
        "description": "the public url where your button lives",
        "required": true,
        "default": "https://raw.githubusercontent.com/mshanemc/deploy-to-sfdx/master/client-src/resources/images/sfdx_it_now.png"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "deployer": {
        "kind": "url",
        "char": "d",
        "description": "the base url for your deployer",
        "default": "https://hosted-scratch.herokuapp.com/",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "button": {
        "kind": "url",
        "char": "b",
        "description": "the public url where your button lives",
        "default": "https://raw.githubusercontent.com/mshanemc/deploy-to-sfdx/master/client-src/resources/images/sfdx_it_now.png",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:github:package:install",
    "description": "installs a package from github using the sfdx-project.json file (v43+) OR the latestVersion.json file convention",
    "usage": "shane:github:package:install -g <string> -r <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:github:package:install -g someUser -r someRepo -u someOrg\n// installs packageVersion (04t) from https://github.com/someUser/someRepo/sfdx-project.json or https://github.com/someUser/someRepo/latestVersion.json\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "githubuser": {
        "name": "githubuser",
        "type": "option",
        "char": "g",
        "description": "github username where the package lives",
        "required": true
      },
      "repo": {
        "name": "repo",
        "type": "option",
        "char": "r",
        "description": "repo where the packages lives",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "githubuser": {
        "kind": "string",
        "required": true,
        "char": "g",
        "description": "github username where the package lives",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "repo": {
        "kind": "string",
        "required": true,
        "char": "r",
        "description": "repo where the packages lives",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:github:src:install",
    "description": "installs a package from github from mdapi src",
    "usage": "shane:github:src:install -g <string> -r <string> [-p <directory>] [-k] [-c] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:github:src:install -g someUser -r someRepo -u someOrg\n// pulls mdapi-formatted code from https://github.com/someUser/someRepo/src and deploys to the org\n",
      "sfdx shane:github:src:install -g someUser -r someRepo -u someOrg -p my/folder/tree\n// pulls mdapi-formatted code from https://github.com/someUser/someRepo/my/folder/tree and deploys to the org\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "githubuser": {
        "name": "githubuser",
        "type": "option",
        "char": "g",
        "description": "github username where the package lives",
        "required": true
      },
      "repo": {
        "name": "repo",
        "type": "option",
        "char": "r",
        "description": "repo where the packages lives",
        "required": true
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "description": "folder where the source lives",
        "default": "src"
      },
      "keeplocally": {
        "name": "keeplocally",
        "type": "boolean",
        "char": "k",
        "description": "keep the cloned repo in local source instead of deleting it",
        "allowNo": false
      },
      "convert": {
        "name": "convert",
        "type": "boolean",
        "char": "c",
        "description": "the path folder is sfdx format, not mdapi, and should be converted first",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "githubuser": {
        "kind": "string",
        "required": true,
        "char": "g",
        "description": "github username where the package lives",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "repo": {
        "kind": "string",
        "required": true,
        "char": "r",
        "description": "repo where the packages lives",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "path": {
        "kind": "directory",
        "default": "src",
        "char": "p",
        "description": "folder where the source lives",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "keeplocally": {
        "kind": "boolean",
        "char": "k",
        "description": "keep the cloned repo in local source instead of deleting it",
        "allowNo": false,
        "type": "boolean"
      },
      "convert": {
        "kind": "boolean",
        "char": "c",
        "description": "the path folder is sfdx format, not mdapi, and should be converted first",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:group:photo",
    "description": "Set the photo for a user by first/last name",
    "usage": "shane:group:photo [-g <string>] [-f <filepath> | -b <filepath>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:group:photo -g AwesomePeople -f ~/Downloads/King.png\n// sets the chatter photo for the group named AwesomePeople using the local file\n",
      "sfdx shane:group:photo -b ~/Downloads/King.png -g AwesomePeople\n// sets the chatter banner photo for the group named AwesomePeople using the local file\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "group": {
        "name": "group",
        "type": "option",
        "char": "g",
        "description": "the name of the group name you want to set the photo/banner for"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "local path of the photo to use"
      },
      "banner": {
        "name": "banner",
        "type": "option",
        "char": "b",
        "description": "local path of the chatter banner photo to use"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "group": {
        "kind": "string",
        "char": "g",
        "description": "the name of the group name you want to set the photo/banner for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "local path of the photo to use",
        "exclusive": ["banner"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "banner": {
        "kind": "filepath",
        "char": "b",
        "description": "local path of the chatter banner photo to use",
        "exclusive": ["file"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:heroku:connect",
    "description": "set up heroku connect on an existing app to an existing org (that you may have just created)",
    "usage": "shane:heroku:connect -a <string> -f <filepath> [-e <string>] [-p <string>] [-b] [-i <string>] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:heroku:connect -a prosaic-samurai-4564 -f assets/myConfig.json\n// auth the heroku app to the current default org, assuming password is available from force:org:display, then import the json config file\n",
      "sfdx shane:heroku:connect -a prosaic-samurai-4564 -f assets/myConfig.json -p p455w0rd -u myother@scratch.org\n// same, but not the default org, with a specified password\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "app": {
        "name": "app",
        "type": "option",
        "char": "a",
        "description": "name of the heroku app",
        "required": true
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "environment of the salesforce org",
        "options": ["sandbox", "production", "custom"],
        "default": "custom"
      },
      "password": {
        "name": "password",
        "type": "option",
        "char": "p",
        "description": "pass in a password to override the one associated with your org in sfdx, or if you don't have one set properly (like you used `shane:user:password:set` instead of `force:user:password:generate"
      },
      "configfile": {
        "name": "configfile",
        "type": "option",
        "char": "f",
        "description": "path to the json file exported from Heroku Connect",
        "required": true
      },
      "showbrowser": {
        "name": "showbrowser",
        "type": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false
      },
      "instance": {
        "name": "instance",
        "type": "option",
        "char": "i",
        "description": "salesforce instance for making login easier.  Will be read from org:display if exists...this is the override"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "supportsUsername": false,
    "flagsConfig": {
      "app": {
        "kind": "string",
        "char": "a",
        "description": "name of the heroku app",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "environment": {
        "kind": "string",
        "char": "e",
        "description": "environment of the salesforce org",
        "options": ["sandbox", "production", "custom"],
        "default": "custom",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "password": {
        "kind": "string",
        "char": "p",
        "description": "pass in a password to override the one associated with your org in sfdx, or if you don't have one set properly (like you used `shane:user:password:set` instead of `force:user:password:generate",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "configfile": {
        "kind": "filepath",
        "char": "f",
        "description": "path to the json file exported from Heroku Connect",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "showbrowser": {
        "kind": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false,
        "type": "boolean"
      },
      "instance": {
        "kind": "string",
        "char": "i",
        "description": "salesforce instance for making login easier.  Will be read from org:display if exists...this is the override",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:heroku:externalobjects",
    "description": "set up heroku connect on an existing app with external objects",
    "usage": "shane:heroku:externalobjects -a <string> [-t <array>] [-c <directory> | -f <filepath>] [-l <string> | undefined] [-b] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:heroku:externalobjects -a sneaky-platypus\n        // enables external objects on all tables\n        ",
      "sfdx shane:heroku:externalobjects -a sneak-platypus -t corgis -c force-app/main/default/dataSources -l theDataSource\n        // enables external objects on the postgres table called corgis and creates an external data source locally\n        ",
      "sfdx shane:heroku:externalobjects -a sneak-platypus -f force-app/main/default/dataSources/existingXDS.dataSource-meta.xml\n        // enables external objects on all tables and modifies the local file specified\n        "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "app": {
        "name": "app",
        "type": "option",
        "char": "a",
        "description": "name of the heroku app",
        "required": true
      },
      "tables": {
        "name": "tables",
        "type": "option",
        "char": "t",
        "description": "comma separated list of postgres table names to share.  If omitted, you want them all!"
      },
      "createdir": {
        "name": "createdir",
        "type": "option",
        "char": "c",
        "description": "creates an external data source in the chosen directory"
      },
      "updatefile": {
        "name": "updatefile",
        "type": "option",
        "char": "f",
        "description": "updates an existing external data source with username/password/url"
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "description": "label that will appear for the external data source you create"
      },
      "showbrowser": {
        "name": "showbrowser",
        "type": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "supportsUsername": false,
    "flagsConfig": {
      "app": {
        "kind": "string",
        "char": "a",
        "description": "name of the heroku app",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tables": {
        "kind": "array",
        "char": "t",
        "description": "comma separated list of postgres table names to share.  If omitted, you want them all!",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "createdir": {
        "kind": "directory",
        "char": "c",
        "description": "creates an external data source in the chosen directory",
        "exclusive": ["updatefile"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "updatefile": {
        "kind": "filepath",
        "char": "f",
        "description": "updates an existing external data source with username/password/url",
        "exclusive": ["createdir"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "label": {
        "kind": "string",
        "char": "l",
        "description": "label that will appear for the external data source you create",
        "exclusive": ["updatefile"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "showbrowser": {
        "kind": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:heroku:repo:deploy",
    "description": "deploy a heroku app that has a valid app.json.  ",
    "usage": "shane:heroku:repo:deploy -g <string> -r <string> [-b <string>] [-n <string>] [-o <array>] [--envuser <string>] [--envpassword <string>] [-t <string>] [-d <integer>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:heroku:repo:deploy -g someUser -r someRepo\n// deploys code from https://github.com/someUser/someRepo that has a valid app.json\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "githubuser": {
        "name": "githubuser",
        "type": "option",
        "char": "g",
        "description": "github username where the app lives",
        "required": true
      },
      "repo": {
        "name": "repo",
        "type": "option",
        "char": "r",
        "description": "repo where the app lives",
        "required": true
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "description": "heroku branch to deploy",
        "default": "master"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "what do you want to Heroku app to be named"
      },
      "overrides": {
        "name": "overrides",
        "type": "option",
        "char": "o",
        "description": "an array of key-value pairs, like SOME_VAR=\"some Value\" (use quotes where string have spaces!)"
      },
      "envuser": {
        "name": "envuser",
        "type": "option",
        "description": "grab the default scratch org username and set it to this Heroku environment var"
      },
      "envpassword": {
        "name": "envpassword",
        "type": "option",
        "description": "grab the default scratch org password and set it to this Heroku environment var"
      },
      "team": {
        "name": "team",
        "type": "option",
        "char": "t",
        "description": "assign this new app to an existing heroku team"
      },
      "days": {
        "name": "days",
        "type": "option",
        "char": "d",
        "description": "days you want the heroku app to live (does nothing locally)",
        "default": 1
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "supportsUsername": false,
    "flagsConfig": {
      "githubuser": {
        "kind": "string",
        "required": true,
        "char": "g",
        "description": "github username where the app lives",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "repo": {
        "kind": "string",
        "required": true,
        "char": "r",
        "description": "repo where the app lives",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "branch": {
        "kind": "string",
        "description": "heroku branch to deploy",
        "default": "master",
        "char": "b",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "what do you want to Heroku app to be named",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "overrides": {
        "kind": "array",
        "char": "o",
        "description": "an array of key-value pairs, like SOME_VAR=\"some Value\" (use quotes where string have spaces!)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "envuser": {
        "kind": "string",
        "description": "grab the default scratch org username and set it to this Heroku environment var",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "envpassword": {
        "kind": "string",
        "description": "grab the default scratch org password and set it to this Heroku environment var",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "team": {
        "kind": "string",
        "char": "t",
        "description": "assign this new app to an existing heroku team",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "days": {
        "kind": "integer",
        "char": "d",
        "description": "days you want the heroku app to live (does nothing locally)",
        "min": 1,
        "max": 30,
        "default": 1,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:iot:activation",
    "description": "Activate an iot orchestration by name",
    "usage": "shane:iot:activation -n <string> [-r] [-d] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:iot:activate -n orchName -r\n// activates the orchestration, including the context if necessary, optionally resetting all the instances\n",
      "sfdx shane:iot:activate -n orchName -d\n// deactivates the orchestration, without resetting all the instances\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "API name of the orchestration",
        "required": true
      },
      "reset": {
        "name": "reset",
        "type": "boolean",
        "char": "r",
        "description": "reset all instances of the orchestration",
        "allowNo": false
      },
      "deactivate": {
        "name": "deactivate",
        "type": "boolean",
        "char": "d",
        "description": "deactivate the orchestration",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "deprecated": {
      "version": 48,
      "message": "This command is no longer used.  Use flows instead of orchestrations for IoT use cases"
    },
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "API name of the orchestration",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "reset": {
        "kind": "boolean",
        "char": "r",
        "description": "reset all instances of the orchestration",
        "allowNo": false,
        "type": "boolean"
      },
      "deactivate": {
        "kind": "boolean",
        "char": "d",
        "description": "deactivate the orchestration",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:label:add",
    "description": "create a remote site setting in the local source.  Push it when you're done",
    "usage": "shane:label:add -t <string> [--bundle <string>] [-n <string>] [-d <string>] [--protected] [--categories <array>] [-l <string>] [-t <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:label:add -t \"This is some Text\"\n// create a custom label with the displayed text and all the defaults\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "text": {
        "name": "text",
        "type": "option",
        "char": "t",
        "description": "the text you want to turn into a label",
        "required": true
      },
      "bundle": {
        "name": "bundle",
        "type": "option",
        "description": "label bundle when you want to organize them more",
        "default": "CustomLabels"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "api name for your label"
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "description for your label"
      },
      "protected": {
        "name": "protected",
        "type": "boolean",
        "description": "mark as protected (packaged, subscribers cannot change the label",
        "allowNo": false
      },
      "categories": {
        "name": "categories",
        "type": "option",
        "description": "categories to add to your custom label"
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "language code",
        "default": "en_US"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "text": {
        "kind": "string",
        "required": true,
        "char": "t",
        "description": "the text you want to turn into a label",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "bundle": {
        "kind": "string",
        "description": "label bundle when you want to organize them more",
        "default": "CustomLabels",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "api name for your label",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "description": "description for your label",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "protected": {
        "kind": "boolean",
        "description": "mark as protected (packaged, subscribers cannot change the label",
        "allowNo": false,
        "type": "boolean"
      },
      "categories": {
        "kind": "array",
        "description": "categories to add to your custom label",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "language": {
        "kind": "string",
        "char": "l",
        "description": "language code",
        "default": "en_US",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:listview:favorite",
    "description": "favorite a listview",
    "usage": "shane:listview:favorite -t <string> -o <string> [-l <string>] [--start] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:listview:favorite -o Account -t Awesome_Accounts\n// finds the matching listview and adds it to the end of the favorites menu\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "l",
        "description": "the label you want to appear in the favorites menu"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "API name of the list view you want to favorite",
        "required": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "object API name (including __c if custom)",
        "required": true
      },
      "start": {
        "name": "start",
        "type": "boolean",
        "description": "add the favorite at the beginning of the menu",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "l",
        "description": "the label you want to appear in the favorites menu",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "string",
        "char": "t",
        "required": true,
        "description": "API name of the list view you want to favorite",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "object": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "object API name (including __c if custom)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "start": {
        "kind": "boolean",
        "description": "add the favorite at the beginning of the menu",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:listview:secure",
    "description": "Find list views that are shared everywhere and makes them shared internally only.  Local source modification only--to use this command to fix an entire org, retrieve all your objects and then deploy the updated files",
    "usage": "shane:listview:secure [-d <directory>] [-o <directory>] [-p] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:listview:secure -o Account\n// add 'all internal users' sharing to any list view on Account without defined sharing\n",
      "sfdx shane:listview:secure\n// add 'all internal users' sharing to any list view in local source without defined sharing\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "only modify list views for a single object.  Api name, including __c if custom"
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "p",
        "description": "Do not prompt for confirmation",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "object": {
        "kind": "directory",
        "char": "o",
        "description": "only modify list views for a single object.  Api name, including __c if custom",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "p",
        "description": "Do not prompt for confirmation",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:lwc:create",
    "description": "create a lwc locally without need for sfdx project",
    "usage": "shane:lwc:create -n <string> -d <directory> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:lwc:create -n someLWC -d modules/namespace\n// creates lwc in the given folder path\n"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name it headsDownCamelCase",
        "required": true
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "where to create the new lwc's folder",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name it headsDownCamelCase",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "required": true,
        "description": "where to create the new lwc's folder",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:lwc:css:merge",
    "description": "take css from existing file(s), extract component-level relevant selectors and save to a LWC's css file",
    "usage": "shane:lwc:css:merge -f <filepath> -c <directory> [-l <filepath>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:lwc:css:merge -c modules/namespace/myComp -f some/big_file.css\n// overwrites modules/namespace/myComp/myComp.css with relevant css selectors from big_file.css\n",
      "sfdx shane:lwc:css:merge -c modules/namespace/myComp -f some/big_file.css -l modules/namespace/myComp/local.css\n// overwrites modules/namespace/myComp/myComp.css with relevant css selectors from big_file.css PLUS any relevant selectors from modules/namespace/myComp/local.css\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "file containing all css selectors to select from",
        "required": true
      },
      "component": {
        "name": "component",
        "type": "option",
        "char": "c",
        "description": "component directory where template and js live",
        "required": true
      },
      "localcss": {
        "name": "localcss",
        "type": "option",
        "char": "l",
        "description": "local css file to merge with contents of --file"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "file": {
        "kind": "filepath",
        "char": "f",
        "required": true,
        "description": "file containing all css selectors to select from",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "component": {
        "kind": "directory",
        "char": "c",
        "required": true,
        "description": "component directory where template and js live",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "localcss": {
        "kind": "filepath",
        "char": "l",
        "description": "local css file to merge with contents of --file",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:mdapi:describe",
    "description": "what's in the org?",
    "usage": "shane:mdapi:describe [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:mdapi:describe -u someOrg\n// list the metadata available in the org\n"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {},
    "deprecated": {
      "version": 43,
      "to": "sfdx force:mdapi:describemetadata"
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:mdapi:list",
    "description": "what's in the org?",
    "usage": "shane:mdapi:list -t <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:mdapi:list -u someOrg -t CustomObject\n// what metadata exists for a specific type\n"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "pull only a specific type.  See the metadata api docs for type names",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "type": {
        "kind": "string",
        "required": true,
        "char": "t",
        "description": "pull only a specific type.  See the metadata api docs for type names",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:mdapi:package:get",
    "description": "Gets package from an org, converts, and merges it into the local source",
    "usage": "shane:mdapi:package:get -p <string> [-t <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:mdapi:package:get -p MyPkg -u someOrg\n// pulls a package from the org and converts/merges it into force-app\n",
      "sfdx shane:mdapi:package:get -p MyPkg -u someOrg -t someDir\n// pulls a package from the org and converts/merges it into /someDir\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "packagename": {
        "name": "packagename",
        "type": "option",
        "char": "p",
        "description": "the name of the package you want to retrieve",
        "required": true
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to convert the result to...defaults to force-app",
        "default": "force-app"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "packagename": {
        "kind": "string",
        "required": true,
        "char": "p",
        "description": "the name of the package you want to retrieve",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app",
        "description": "where to convert the result to...defaults to force-app",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "deprecated": {
      "version": 44,
      "to": "Use sfdx force:source:retrieve"
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:mdapi:package:xml",
    "description": "gets metadata form an org based on a local package.xml, converts, and merges it into the local source",
    "usage": "shane:mdapi:package:xml -p <filepath> [-t <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:mdapi:package:xml -p someFolder/package.xml -u someOrg\n// pulls a metadat from the org and converts/merges it into force-app\n",
      "sfdx shane:mdapi:package:xml -p someFolder/package.xml -u someOrg -t someDir\n// pulls a package from the org and converts/merges it into /someDir\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "xmlpath": {
        "name": "xmlpath",
        "type": "option",
        "char": "p",
        "description": "the location of the package.xml you want to use",
        "required": true
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to convert the result to...defaults to force-app",
        "default": "force-app"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "xmlpath": {
        "kind": "filepath",
        "required": true,
        "char": "p",
        "description": "the location of the package.xml you want to use",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app",
        "description": "where to convert the result to...defaults to force-app",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "deprecated": {
      "version": 44,
      "to": "Use sfdx force:source:retrieve"
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:mdapi:pull",
    "description": "gets unpackaged metadata for you",
    "usage": "shane:mdapi:pull [-c | --all] [-p | undefined] [--wave | undefined] [-s | undefined | -o <string>] [-i | undefined] [--reporting | undefined] [-t <string> | undefined] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:mdapi:pull -c -u someOrg\n// pulls code kinda stuff from the org and converts/merges it into your project's default pkgDir\n",
      "sfdx shane:mdapi:pull -u someOrg\n// pulls all the external data source metadata from the org and converts/merges it into your project's default pkgDir\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "code": {
        "name": "code",
        "type": "boolean",
        "char": "c",
        "description": "ApexClass,ApexTrigger,ApexComponent,ApexPage,AuraDefinitionBundle,StaticResource",
        "allowNo": false
      },
      "perms": {
        "name": "perms",
        "type": "boolean",
        "char": "p",
        "description": "PermissionSet,Profile,Role,CustomPermission,Group",
        "allowNo": false
      },
      "wave": {
        "name": "wave",
        "type": "boolean",
        "description": "WaveApplication,WaveDashboard,WaveDataflow,WaveLens,WaveTemplateBundle,Wavexmd,WaveDataset",
        "allowNo": false
      },
      "schema": {
        "name": "schema",
        "type": "boolean",
        "char": "s",
        "description": "ExternalDataSource,CustomMetadata,RecordType,GlobalValueSet,CustomField,CustomObject,StandardValueSet",
        "allowNo": false
      },
      "ui": {
        "name": "ui",
        "type": "boolean",
        "char": "i",
        "description": "CompactLayout,Layout,ListView,CustomTab,AppMenu,CustomApplication,CustomPageWebLink,HomePageComponent,HomePageLayout,PathAssistant,WebLink,CustomLabels,FlexiPage,QuickAction",
        "allowNo": false
      },
      "reporting": {
        "name": "reporting",
        "type": "boolean",
        "description": "Report,Dashboard",
        "allowNo": false
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "pull metadata for a single object"
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "pull only a specific type.  See the metadata api docs for type names"
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "description": "Pulls just about everything.  Don't use this flag with any other subset of metadata.  Not recommended for really large metadata orgs because it'll overflow stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "code": {
        "kind": "boolean",
        "char": "c",
        "description": "ApexClass,ApexTrigger,ApexComponent,ApexPage,AuraDefinitionBundle,StaticResource",
        "exclusive": ["all"],
        "allowNo": false,
        "type": "boolean"
      },
      "perms": {
        "kind": "boolean",
        "char": "p",
        "description": "PermissionSet,Profile,Role,CustomPermission,Group",
        "exclusive": ["all"],
        "allowNo": false,
        "type": "boolean"
      },
      "wave": {
        "kind": "boolean",
        "description": "WaveApplication,WaveDashboard,WaveDataflow,WaveLens,WaveTemplateBundle,Wavexmd,WaveDataset",
        "exclusive": ["all"],
        "allowNo": false,
        "type": "boolean"
      },
      "schema": {
        "kind": "boolean",
        "char": "s",
        "description": "ExternalDataSource,CustomMetadata,RecordType,GlobalValueSet,CustomField,CustomObject,StandardValueSet",
        "exclusive": ["all", "object"],
        "allowNo": false,
        "type": "boolean"
      },
      "ui": {
        "kind": "boolean",
        "char": "i",
        "description": "CompactLayout,Layout,ListView,CustomTab,AppMenu,CustomApplication,CustomPageWebLink,HomePageComponent,HomePageLayout,PathAssistant,WebLink,CustomLabels,FlexiPage,QuickAction",
        "exclusive": ["all"],
        "allowNo": false,
        "type": "boolean"
      },
      "reporting": {
        "kind": "boolean",
        "description": "Report,Dashboard",
        "exclusive": ["all"],
        "allowNo": false,
        "type": "boolean"
      },
      "object": {
        "kind": "string",
        "char": "o",
        "description": "pull metadata for a single object",
        "exclusive": ["all", "schema"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "type": {
        "kind": "string",
        "char": "t",
        "description": "pull only a specific type.  See the metadata api docs for type names",
        "exclusive": ["all"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "all": {
        "kind": "boolean",
        "description": "Pulls just about everything.  Don't use this flag with any other subset of metadata.  Not recommended for really large metadata orgs because it'll overflow stdout",
        "exclusive": ["code", "perms", "wave", "schema", "ui", "object", "type", "reporting"],
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:mdapi:push",
    "description": "convert and deploy the packaged source",
    "usage": "shane:mdapi:push [-d <directory>] [-k] [-r <directory>] [-w <integer>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:mdapi:push -u someOrg\n// convert to mdapi format and push to the given org\n"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "convertedfolder": {
        "name": "convertedfolder",
        "type": "option",
        "char": "d",
        "description": "where to store the mdapi-converted source",
        "default": "mdapiout"
      },
      "keepconverted": {
        "name": "keepconverted",
        "type": "boolean",
        "char": "k",
        "description": "Don't automatically delete the converted source",
        "allowNo": false
      },
      "source": {
        "name": "source",
        "type": "option",
        "char": "r",
        "description": "deploy a specific folder that's not force-app",
        "default": "force-app"
      },
      "deploymenttimelimit": {
        "name": "deploymenttimelimit",
        "type": "option",
        "char": "w",
        "description": "How many minutes to wait for the deployment to finish",
        "default": 200
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "convertedfolder": {
        "kind": "directory",
        "char": "d",
        "description": "where to store the mdapi-converted source",
        "default": "mdapiout",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "keepconverted": {
        "kind": "boolean",
        "char": "k",
        "description": "Don't automatically delete the converted source",
        "allowNo": false,
        "type": "boolean"
      },
      "source": {
        "kind": "directory",
        "char": "r",
        "default": "force-app",
        "description": "deploy a specific folder that's not force-app",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "deploymenttimelimit": {
        "kind": "integer",
        "char": "w",
        "description": "How many minutes to wait for the deployment to finish",
        "default": 200,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "deprecated": {
      "version": 43,
      "to": "sfdx force:source:deploy"
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:msgchannel:create",
    "description": "create a lightning message channel locally",
    "usage": "shane:msgchannel:create -n <string> [-d <string>] [-t <directory>] [-e] [-f <array>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:msgchannel:create -n wkrp -d \"it's a message channel, yo\" -f Field1,Field2,Field3\n// creates a messageChannel with the given name, description, and fields\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name it (Salesforce API compliant name)",
        "required": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "optional description so you can remember why you added this and what it's for",
        "default": "added from sfdx plugin"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      },
      "exposed": {
        "name": "exposed",
        "type": "boolean",
        "char": "e",
        "description": "accessible outside your namespace (this is PERMANENT!)",
        "allowNo": false
      },
      "fields": {
        "name": "fields",
        "type": "option",
        "char": "f",
        "description": "fields to create on the message channel"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name it (Salesforce API compliant name)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "default": "added from sfdx plugin",
        "description": "optional description so you can remember why you added this and what it's for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "exposed": {
        "kind": "boolean",
        "char": "e",
        "default": false,
        "description": "accessible outside your namespace (this is PERMANENT!)",
        "allowNo": false,
        "type": "boolean"
      },
      "fields": {
        "kind": "array",
        "char": "f",
        "description": "fields to create on the message channel",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:create",
    "description": "create an object in local source.  Only __c (limited support), __b (big objects) and events __e are currently supported",
    "usage": "shane:object:create [-t <string>] [-l <string>] [-a <string>] [-p <string>] [--description <string>] [--enterprise] [--sharingmodel <string>] [--activities] [--search] [--reports] [--history] [--feeds] [--nametype <string>] [--namefieldlabel <string>] [--autonumberformat <string>] [--visibility <string>] [--highvolume] [-i] [-d <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:create\n// without any params, the cli is going to ask you questions to generate your object interactively\n",
      "sfdx shane:object:create --label \"Platypus\" --plural \"Platypi\" --api Platypus__b --directory /my/project/path\n// label, plural, api name specified so the tool doesn't have to ask you about them.  Creates in a non-default path\n",
      "sfdx shane:object:create --label \"Platypus\" --plural \"Platypi\" --api Platypus__b --directory /my/project/path\n// label, plural, api name specified so the tool doesn't have to ask you about them.  Creates in a non-default path\n",
      "sfdx shane:object:create --label \"Signal\" --plural \"Signals\" --api Signal__e\n// create a platform event\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "type of object",
        "options": ["custom", "cmdt", "big", "event"]
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "description": "label for the UI"
      },
      "api": {
        "name": "api",
        "type": "option",
        "char": "a",
        "description": "api name.  Ends with one of the supported types: [__b, __e]"
      },
      "plural": {
        "name": "plural",
        "type": "option",
        "char": "p",
        "description": "plural label for the UI"
      },
      "description": {
        "name": "description",
        "type": "option",
        "description": "optional description so you can remember why you added this and what it's for",
        "default": "added from sfdx plugin"
      },
      "enterprise": {
        "name": "enterprise",
        "type": "boolean",
        "description": "enable bulk/sharing/streaming",
        "allowNo": false
      },
      "sharingmodel": {
        "name": "sharingmodel",
        "type": "option",
        "description": "sharing model",
        "options": ["Read", "ReadWrite", "Private"],
        "default": "ReadWrite"
      },
      "activities": {
        "name": "activities",
        "type": "boolean",
        "description": "the enableActivities flag on an object (invalid for __b, __e)",
        "allowNo": false
      },
      "search": {
        "name": "search",
        "type": "boolean",
        "description": "the enableSearch flag on an object (invalid for __b, __e)",
        "allowNo": false
      },
      "reports": {
        "name": "reports",
        "type": "boolean",
        "description": "the enableReports flag on an object (invalid for __b, __e)",
        "allowNo": false
      },
      "history": {
        "name": "history",
        "type": "boolean",
        "description": "the enableHistory flag on an object (invalid for __b, __e)",
        "allowNo": false
      },
      "feeds": {
        "name": "feeds",
        "type": "boolean",
        "description": "the enableFeeds flag on an object (invalid for __b, __e)",
        "allowNo": false
      },
      "nametype": {
        "name": "nametype",
        "type": "option",
        "description": "name field type",
        "options": ["Text", "AutoNumber"]
      },
      "namefieldlabel": {
        "name": "namefieldlabel",
        "type": "option",
        "description": "the label for the name field",
        "default": "Name"
      },
      "autonumberformat": {
        "name": "autonumberformat",
        "type": "option",
        "description": "the display format for the autonumbering"
      },
      "visibility": {
        "name": "visibility",
        "type": "option",
        "description": "visibility for custom metadata types",
        "options": ["Public", "Protected", "PackageProtected"],
        "default": "Public"
      },
      "highvolume": {
        "name": "highvolume",
        "type": "boolean",
        "description": "high volume, valid only for platform events (__e)",
        "allowNo": false
      },
      "interactive": {
        "name": "interactive",
        "type": "boolean",
        "char": "i",
        "description": "fully interactive--ask me every possible question.",
        "allowNo": false
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "type": {
        "kind": "string",
        "char": "t",
        "description": "type of object",
        "options": ["custom", "cmdt", "big", "event"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "label": {
        "kind": "string",
        "char": "l",
        "description": "label for the UI",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "api": {
        "kind": "string",
        "char": "a",
        "description": "api name.  Ends with one of the supported types: [__b, __e]",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "plural": {
        "kind": "string",
        "char": "p",
        "description": "plural label for the UI",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "default": "added from sfdx plugin",
        "description": "optional description so you can remember why you added this and what it's for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "enterprise": {
        "kind": "boolean",
        "description": "enable bulk/sharing/streaming",
        "allowNo": false,
        "type": "boolean"
      },
      "sharingmodel": {
        "kind": "string",
        "description": "sharing model",
        "options": ["Read", "ReadWrite", "Private"],
        "default": "ReadWrite",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "activities": {
        "kind": "boolean",
        "description": "the enableActivities flag on an object (invalid for __b, __e)",
        "allowNo": false,
        "type": "boolean"
      },
      "search": {
        "kind": "boolean",
        "description": "the enableSearch flag on an object (invalid for __b, __e)",
        "allowNo": false,
        "type": "boolean"
      },
      "reports": {
        "kind": "boolean",
        "description": "the enableReports flag on an object (invalid for __b, __e)",
        "allowNo": false,
        "type": "boolean"
      },
      "history": {
        "kind": "boolean",
        "description": "the enableHistory flag on an object (invalid for __b, __e)",
        "allowNo": false,
        "type": "boolean"
      },
      "feeds": {
        "kind": "boolean",
        "description": "the enableFeeds flag on an object (invalid for __b, __e)",
        "allowNo": false,
        "type": "boolean"
      },
      "nametype": {
        "kind": "string",
        "description": "name field type",
        "options": ["Text", "AutoNumber"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "namefieldlabel": {
        "kind": "string",
        "description": "the label for the name field",
        "default": "Name",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "autonumberformat": {
        "kind": "string",
        "description": "the display format for the autonumbering",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "visibility": {
        "kind": "string",
        "description": "visibility for custom metadata types",
        "options": ["Public", "Protected", "PackageProtected"],
        "default": "Public",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "highvolume": {
        "kind": "boolean",
        "description": "high volume, valid only for platform events (__e)",
        "allowNo": false,
        "type": "boolean"
      },
      "interactive": {
        "kind": "boolean",
        "char": "i",
        "description": "fully interactive--ask me every possible question.",
        "allowNo": false,
        "type": "boolean"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:fat",
    "description": "add or update a field audit trail retention policy on an object.  Modifies local source--you still need to push/deploy",
    "usage": "shane:object:fat -o <string> [-m <integer>] [-y <integer>] [--description <string>] [-d <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:fat -o Account\n// set the retention policy on Account to the defaults (archive after 18 months, archive for 10 years)\n",
      "sfdx shane:object:fat -o Account -m 4 -y 5\n// archive history for 5 years, after being in regular history for 4 months\n",
      "sfdx shane:object:fat -o Account -m 4 -y 5 -d myDir\n// same as 2nd example, except metadata is in myDir instead of the default force-app/main/default\n",
      "sfdx shane:mdapi:pull -o Account -u realOrg && sfdx shane:object:fat -o Account -m 4 -y 5 -d myDir && sfdx shane:mdapi:push -u realOrg\n// get some object you don't have locally, create the policy, and push that back up to where it came from\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "object to manage the policy for",
        "required": true
      },
      "archiveaftermonths": {
        "name": "archiveaftermonths",
        "type": "option",
        "char": "m",
        "description": "archive after this number of months",
        "default": 18
      },
      "archiveretentionyears": {
        "name": "archiveretentionyears",
        "type": "option",
        "char": "y",
        "description": "Archive for this many years",
        "default": 10
      },
      "description": {
        "name": "description",
        "type": "option",
        "description": "optional friendly description for the policy"
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "description": "object to manage the policy for",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "archiveaftermonths": {
        "kind": "integer",
        "char": "m",
        "description": "archive after this number of months",
        "default": 18,
        "min": 1,
        "max": 18,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "archiveretentionyears": {
        "kind": "integer",
        "char": "y",
        "default": 10,
        "min": 0,
        "max": 10,
        "description": "Archive for this many years",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "description": "optional friendly description for the policy",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:field",
    "description": "create or add fields to an existing object",
    "usage": "shane:object:field [-o <string>] [-n <string>] [-a <string>] [-t <string>] [--description <string>] [--default <string>] [-r] [-u] [--externalid] [--trackhistory] [--helptext <string>] [-l <integer>] [-s <integer>] [--precision <integer>] [--lookupobject <string>] [--relname <string>] [--rellabel <string>] [--deleteconstraint <string>] [--reparentable] [--writerequiresmasterread] [--picklistvalues <array>] [--picklistdefaultfirst] [--indexposition <integer>] [--indexappend] [--indexdirection <string>] [--noindex] [-i] [-d <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:field\n// without any params, the cli is going to ask you questions to generate your field interactively\n",
      "sfdx shane:object:field --api My_Field__c -l 255 -n \"My Field\" -t Text -o  BigTest__b --noindex\n// create new text field called My Field (My_Field__c) on BigObject BigTest__b\n",
      "sfdx shane:object:field --api My_Index_Field__c -l 255 -n \"My Index Field\" -t Text -o  BigTest__b --indexdirection ASC --indexposition 1\n// create new text field called My Field (My_Field__c) on BigObject BigTest__b, add it to the existing index as the second field\n",
      "sfdx shane:object:field --api My_Field__c -l 255 -n \"My Field\" -t Text -o  EventTest__e\n// create new text field called My Field (My_Field__c) on Platform Event EventTest__e\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "API name of an object to add a field to"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "Label for the field"
      },
      "api": {
        "name": "api",
        "type": "option",
        "char": "a",
        "description": "API name for the field"
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "field type.  Big Objects: Text,Number,DateTime,Lookup,LongTextArea.  Events: Text,Number,DateTime,Date,LongTextArea,Checkbox.  Regular Objects: Text,Number,DateTime,Date,Time,LongTextArea,Checkbox,Url,Email,Phone,Currency,Picklist,Html,Location,Lookup,MasterDetail"
      },
      "description": {
        "name": "description",
        "type": "option",
        "description": "optional description for the field so you remember what it's for next year"
      },
      "default": {
        "name": "default",
        "type": "option",
        "description": "required for checkbox fields.  Express in Salesforce formula language (good luck with that!)"
      },
      "required": {
        "name": "required",
        "type": "boolean",
        "char": "r",
        "description": "field is required",
        "allowNo": false
      },
      "unique": {
        "name": "unique",
        "type": "boolean",
        "char": "u",
        "description": "field must be unique",
        "allowNo": false
      },
      "externalid": {
        "name": "externalid",
        "type": "boolean",
        "description": "use as an external id",
        "allowNo": false
      },
      "trackhistory": {
        "name": "trackhistory",
        "type": "boolean",
        "description": "enable history tracking on the field",
        "allowNo": false
      },
      "helptext": {
        "name": "helptext",
        "type": "option",
        "description": "optional inline help text"
      },
      "length": {
        "name": "length",
        "type": "option",
        "char": "l",
        "description": "length (for text fields and text area)"
      },
      "scale": {
        "name": "scale",
        "type": "option",
        "char": "s",
        "description": "places right of the decimal"
      },
      "precision": {
        "name": "precision",
        "type": "option",
        "description": "maximum allowed digits of a number, including whole and decimal places"
      },
      "lookupobject": {
        "name": "lookupobject",
        "type": "option",
        "description": "API name of the object the lookup goes to"
      },
      "relname": {
        "name": "relname",
        "type": "option",
        "description": "API name for the child relationship"
      },
      "rellabel": {
        "name": "rellabel",
        "type": "option",
        "description": "label for the child relationship (appears on related lists)"
      },
      "deleteconstraint": {
        "name": "deleteconstraint",
        "type": "option",
        "description": "delete behavior",
        "options": ["SetNull", "Restrict", "Cascade"]
      },
      "reparentable": {
        "name": "reparentable",
        "type": "boolean",
        "description": "the master detail is parentable",
        "allowNo": false
      },
      "writerequiresmasterread": {
        "name": "writerequiresmasterread",
        "type": "boolean",
        "description": "the master detail is parentable",
        "allowNo": false
      },
      "picklistvalues": {
        "name": "picklistvalues",
        "type": "option",
        "description": "values for the picklist"
      },
      "picklistdefaultfirst": {
        "name": "picklistdefaultfirst",
        "type": "boolean",
        "description": "use the first value in the picklist as the default",
        "allowNo": false
      },
      "indexposition": {
        "name": "indexposition",
        "type": "option",
        "description": "put in a specific position in the big object index (0 is the first element).  You're responsible for dealing with producing a sane array"
      },
      "indexappend": {
        "name": "indexappend",
        "type": "boolean",
        "description": "put next in the big object index",
        "allowNo": false
      },
      "indexdirection": {
        "name": "indexdirection",
        "type": "option",
        "description": "sort direction for the big object index",
        "options": ["ASC", "DESC"]
      },
      "noindex": {
        "name": "noindex",
        "type": "boolean",
        "description": "do not add this field to the index",
        "allowNo": false
      },
      "interactive": {
        "name": "interactive",
        "type": "boolean",
        "char": "i",
        "description": "fully interactive--ask me every possible question.",
        "allowNo": false
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is this object metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "description": "API name of an object to add a field to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "Label for the field",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "api": {
        "kind": "string",
        "char": "a",
        "description": "API name for the field",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "type": {
        "kind": "string",
        "char": "t",
        "description": "field type.  Big Objects: Text,Number,DateTime,Lookup,LongTextArea.  Events: Text,Number,DateTime,Date,LongTextArea,Checkbox.  Regular Objects: Text,Number,DateTime,Date,Time,LongTextArea,Checkbox,Url,Email,Phone,Currency,Picklist,Html,Location,Lookup,MasterDetail",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "description": "optional description for the field so you remember what it's for next year",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "default": {
        "kind": "string",
        "description": "required for checkbox fields.  Express in Salesforce formula language (good luck with that!)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "required": {
        "kind": "boolean",
        "char": "r",
        "description": "field is required",
        "allowNo": false,
        "type": "boolean"
      },
      "unique": {
        "kind": "boolean",
        "char": "u",
        "description": "field must be unique",
        "allowNo": false,
        "type": "boolean"
      },
      "externalid": {
        "kind": "boolean",
        "description": "use as an external id",
        "allowNo": false,
        "type": "boolean"
      },
      "trackhistory": {
        "kind": "boolean",
        "description": "enable history tracking on the field",
        "allowNo": false,
        "type": "boolean"
      },
      "helptext": {
        "kind": "string",
        "description": "optional inline help text",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "length": {
        "kind": "integer",
        "char": "l",
        "description": "length (for text fields and text area)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "scale": {
        "kind": "integer",
        "char": "s",
        "description": "places right of the decimal",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "precision": {
        "kind": "integer",
        "description": "maximum allowed digits of a number, including whole and decimal places",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "lookupobject": {
        "kind": "string",
        "description": "API name of the object the lookup goes to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "relname": {
        "kind": "string",
        "description": "API name for the child relationship",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "rellabel": {
        "kind": "string",
        "description": "label for the child relationship (appears on related lists)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "deleteconstraint": {
        "kind": "string",
        "description": "delete behavior",
        "options": ["SetNull", "Restrict", "Cascade"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "reparentable": {
        "kind": "boolean",
        "description": "the master detail is parentable",
        "allowNo": false,
        "type": "boolean"
      },
      "writerequiresmasterread": {
        "kind": "boolean",
        "description": "the master detail is parentable",
        "allowNo": false,
        "type": "boolean"
      },
      "picklistvalues": {
        "kind": "array",
        "description": "values for the picklist",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "picklistdefaultfirst": {
        "kind": "boolean",
        "description": "use the first value in the picklist as the default",
        "allowNo": false,
        "type": "boolean"
      },
      "indexposition": {
        "kind": "integer",
        "description": "put in a specific position in the big object index (0 is the first element).  You're responsible for dealing with producing a sane array",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "indexappend": {
        "kind": "boolean",
        "description": "put next in the big object index",
        "allowNo": false,
        "type": "boolean"
      },
      "indexdirection": {
        "kind": "string",
        "description": "sort direction for the big object index",
        "options": ["ASC", "DESC"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noindex": {
        "kind": "boolean",
        "description": "do not add this field to the index",
        "allowNo": false,
        "type": "boolean"
      },
      "interactive": {
        "kind": "boolean",
        "char": "i",
        "description": "fully interactive--ask me every possible question.",
        "allowNo": false,
        "type": "boolean"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is this object metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:fields:describe",
    "description": "what fields are on the object?",
    "usage": "shane:object:fields:describe -o <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:fields:describe -o Account -u someOrg\n// list the fields (with type/label) on account\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "the object to describe",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "object": {
        "kind": "string",
        "required": true,
        "char": "o",
        "description": "the object to describe",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:perms:align",
    "description": "align profiles with ",
    "usage": "shane:object:perms:align [-d <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:perms:align\n// go through all the profiles/permsets in force-app/main/default and remove references to stuff that isn't in local source\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata?",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata?",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:powerofone",
    "description": "add a \"power of one\" formula field to any object",
    "usage": "shane:object:powerofone -o <string> [-l <string>] [-a <string>] [-d <string>] [-t <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:powerofone -a Poo -l \"Power of One\" -o User\n// create a field with api name Poo__c and label \"Power of One\" on the user object with the default description in the default folder\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "API name of the object to add the field to",
        "required": true
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "description": "label",
        "default": "Power Of One"
      },
      "api": {
        "name": "api",
        "type": "option",
        "char": "a",
        "description": "api name (will include the __c for you if you don't add it here",
        "default": "Power_Of_One__c"
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "optional description so you can remember why you added this and what it's for",
        "default": "Power of one is used for formulas, reporting, etc"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "API name of the object to add the field to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "label": {
        "kind": "string",
        "char": "l",
        "default": "Power Of One",
        "description": "label",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "api": {
        "kind": "string",
        "char": "a",
        "default": "Power_Of_One__c",
        "description": "api name (will include the __c for you if you don't add it here",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "default": "Power of one is used for formulas, reporting, etc",
        "description": "optional description so you can remember why you added this and what it's for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:recordtype",
    "description": "create a new record type for an object",
    "usage": "shane:object:recordtype -o <string> -l <string> [-n <string>] [-d <string>] [-t <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:recordtype -o Something__c -l 'MyRecordType'\n// create a recordtype named MyRecordType and label MyRecordType on the Something__c object with the default description in the default folder\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "API name of the object to add the record type to",
        "required": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "Name for the record Type (defaults to label if not provided)"
      },
      "label": {
        "name": "label",
        "type": "option",
        "char": "l",
        "description": "label",
        "required": true,
        "default": "Power Of One"
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "optional description so you can remember why you added this and what it's for",
        "default": "Created by shane:sfdx:plugins"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "API name of the object to add the record type to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "Name for the record Type (defaults to label if not provided)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "label": {
        "kind": "string",
        "char": "l",
        "default": "Power Of One",
        "description": "label",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "default": "Created by shane:sfdx:plugins",
        "description": "optional description so you can remember why you added this and what it's for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:tab",
    "description": "create a tab from a custom object, and you have to pick an icon",
    "usage": "shane:object:tab -o <string> -i <integer> [-t <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:tab -o SomeObject__c -i 86\n// create a tab for the object using icon #86 from https://lightningdesignsystem.com/icons/#custom\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "object api name",
        "required": true
      },
      "icon": {
        "name": "icon",
        "type": "option",
        "char": "i",
        "description": "icon number from https://lightningdesignsystem.com/icons/#custom but only up to 100",
        "required": true
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "object api name",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "icon": {
        "kind": "integer",
        "char": "i",
        "required": true,
        "min": 1,
        "max": 100,
        "description": "icon number from https://lightningdesignsystem.com/icons/#custom but only up to 100",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:object:unperm",
    "description": "remove references to an object from profiles/permsets (all or a specific one)",
    "usage": "shane:object:unperm -o <string> [-d <directory>] [-s <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:object:unperm -o OpportunitySplit\n// go through all the profiles/permsets in force-app/main/default and remove the object, field, recordtypes and layout assignments (profile only) for the named object\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "remove all references to an object from profiles or permsets",
        "required": true
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      },
      "specific": {
        "name": "specific",
        "type": "option",
        "char": "s",
        "description": "specify a profile or permset by name to only remove it from that one"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "remove all references to an object from profiles or permsets",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "specific": {
        "kind": "string",
        "char": "s",
        "description": "specify a profile or permset by name to only remove it from that one",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:componentlibrary",
    "description": "opens the lightning component library for the specified org",
    "usage": "shane:org:componentlibrary [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:org:componentlibrary\n// opens /componentReference/suite.app on the default scratch org\n",
      "sfdx shane:org:componentlibrary -u someOrgAlias\n// opens library for specified org\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {},
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:create",
    "description": "create an org with a friendly username.  wraps force:org:create",
    "usage": "shane:org:create --userprefix <string> -o <string> [-i <string>] [-f <filepath>] [-a <string>] [-d <integer>] [--wait <integer>] [-c] [-n] [-s] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:org:create --userprefix shane -o org.test\n// creates an org from the default project config/project-scratch-def.json but with username shane[i]@org.test where i is a unique sequence number for that -u/-o combination\n",
      "sfdx shane:org:create --userprefix shane -o org.test -a sydneyBristow -d 30 -v myOtherHub -f config/thatOtherFile.json\n// above, but with an alias, a longer duration, and not the default hub, and not the default config file\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "userprefix": {
        "name": "userprefix",
        "type": "option",
        "description": "first part of the generated username.  Example: 'shane' produces shane1@demo.org, shane2@demo.org",
        "required": true
      },
      "userdomain": {
        "name": "userdomain",
        "type": "option",
        "char": "o",
        "description": "last part of the generated username (after the @ sign).  Example: 'demo.org' produces shane1@demo.org, shane2@demo.org",
        "required": true
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "description": "connected app consumer key"
      },
      "definitionfile": {
        "name": "definitionfile",
        "type": "option",
        "char": "f",
        "description": "path to a scratch org definition file.  Default = config/project-scratch-def.json",
        "default": "config/project-scratch-def.json"
      },
      "setalias": {
        "name": "setalias",
        "type": "option",
        "char": "a",
        "description": "set an alias for for the created scratch org"
      },
      "durationdays": {
        "name": "durationdays",
        "type": "option",
        "char": "d",
        "description": "duration of the scratch org (in days) (default:7, min:1, max:30)",
        "default": 7
      },
      "wait": {
        "name": "wait",
        "type": "option",
        "description": "the streaming client socket timeout (in minutes) (default:20, min:2)",
        "default": 20
      },
      "noancestors": {
        "name": "noancestors",
        "type": "boolean",
        "char": "c",
        "description": "do not include second-generation package ancestors in the scratch org",
        "allowNo": false
      },
      "nonamespace": {
        "name": "nonamespace",
        "type": "boolean",
        "char": "n",
        "description": "creates the scratch org with no namespace",
        "allowNo": false
      },
      "setdefaultusername": {
        "name": "setdefaultusername",
        "type": "boolean",
        "char": "s",
        "description": "set the created org as the default username",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "userprefix": {
        "kind": "string",
        "required": true,
        "description": "first part of the generated username.  Example: 'shane' produces shane1@demo.org, shane2@demo.org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "userdomain": {
        "kind": "string",
        "char": "o",
        "required": true,
        "description": "last part of the generated username (after the @ sign).  Example: 'demo.org' produces shane1@demo.org, shane2@demo.org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "clientid": {
        "kind": "string",
        "char": "i",
        "description": "connected app consumer key",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "definitionfile": {
        "kind": "filepath",
        "char": "f",
        "default": "config/project-scratch-def.json",
        "description": "path to a scratch org definition file.  Default = config/project-scratch-def.json",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "setalias": {
        "kind": "string",
        "char": "a",
        "description": "set an alias for for the created scratch org",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "durationdays": {
        "kind": "integer",
        "char": "d",
        "default": 7,
        "min": 1,
        "max": 30,
        "description": "duration of the scratch org (in days) (default:7, min:1, max:30)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "kind": "integer",
        "description": "the streaming client socket timeout (in minutes) (default:20, min:2)",
        "default": 20,
        "min": 2,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noancestors": {
        "kind": "boolean",
        "char": "c",
        "description": "do not include second-generation package ancestors in the scratch org",
        "allowNo": false,
        "type": "boolean"
      },
      "nonamespace": {
        "kind": "boolean",
        "char": "n",
        "description": "creates the scratch org with no namespace",
        "allowNo": false,
        "type": "boolean"
      },
      "setdefaultusername": {
        "kind": "boolean",
        "char": "s",
        "description": "set the created org as the default username",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:delete",
    "description": "delete the default scratch org.  Won't prompt you for confirmation",
    "usage": "shane:org:delete [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:org:delete // deletes the current default scratch org"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:domain:cors",
    "description": "whitelist the org's domain as a CORS",
    "usage": "shane:org:domain:cors [--all] [--liveagent] [-t <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:org:domain:cors"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "description": "do all of Salesforce, not just this org's custom domain",
        "allowNo": false
      },
      "liveagent": {
        "name": "liveagent",
        "type": "boolean",
        "description": "whitelist all of LiveAgent urls",
        "allowNo": false
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "all": {
        "kind": "boolean",
        "description": "do all of Salesforce, not just this org's custom domain",
        "allowNo": false,
        "type": "boolean"
      },
      "liveagent": {
        "kind": "boolean",
        "description": "whitelist all of LiveAgent urls",
        "allowNo": false,
        "type": "boolean"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:domain:csp",
    "description": "whitelist the org's domain as a CSP Trusted Site",
    "usage": "shane:org:domain:csp [--all] [--liveagent] [-t <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:org:domain:cors"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "all": {
        "name": "all",
        "type": "boolean",
        "description": "do all of Salesforce, not just this org's custom domain",
        "allowNo": false
      },
      "liveagent": {
        "name": "liveagent",
        "type": "boolean",
        "description": "whitelist all of LiveAgent urls",
        "allowNo": false
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "requiresProject": false,
    "flagsConfig": {
      "all": {
        "kind": "boolean",
        "description": "do all of Salesforce, not just this org's custom domain",
        "allowNo": false,
        "type": "boolean"
      },
      "liveagent": {
        "kind": "boolean",
        "description": "whitelist all of LiveAgent urls",
        "allowNo": false,
        "type": "boolean"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:domain:verify",
    "description": "Verifies that a domain was successfully setup with MyDomain",
    "usage": "shane:org:domain:verify [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:org:domain:verify"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {},
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:metadatacoverage",
    "description": "opens the metadata coverage report page",
    "usage": "shane:org:metadatacoverage [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:org:metadatacoverage\n// opens /mdcoverage/report.jsp on the default scratch org\n",
      "sfdx shane:org:metadatacoverage -u someOrgAlias\n// opens report for specified org\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {},
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:reauth",
    "description": "reauthenticates (generates a new authinfo) for a scratch org, optionally insisting on custom domain being ready.  Requires a hub",
    "usage": "shane:org:reauth [-r] [-v <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:org:reauth\n    // reauths, and takes what it can get\n    ",
      "sfdx shane:org:reauth --requirecustomdomain\n    // will try each minute, up to 60 minutes, until an org with a valid mydomain is ready\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "requirecustomdomain": {
        "name": "requirecustomdomain",
        "type": "boolean",
        "char": "r",
        "description": "keep trying until you get back an org with a custom domain on it",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "requirecustomdomain": {
        "kind": "boolean",
        "char": "r",
        "description": "keep trying until you get back an org with a custom domain on it",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "requiresDevhubUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:org:refreshtoken",
    "description": "Outputs a refresh token from an org that you've already authenticated sfdx to.  PLEASE BE CAREFUL WITH THIS AND TREAT IT AS A PASSWORD",
    "usage": "shane:org:refreshtoken [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:org:refreshtoken -u someAliasOrUsername\n// prints the refresh token for some org that you've already connected to\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {},
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:package2:version:bump",
    "description": "bump the major/minor version number in the packageDirectory",
    "usage": "shane:package2:version:bump [-M | -m | -p] [-c] [-r] [-t <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:package2:version:bump -m\n// bump the minor version up by one (and set patch to 0)\n",
      "sfdx shane:package2:version:bump -M\n// bump the major version up by one (and set minor/patch to 0)\n",
      "sfdx shane:package2:version:bump -p\n// bump the patch version up by one\n",
      "sfdx shane:package2:version:bump -M -t myDir\n// bump the major version up by one for a particular directory that's not the default\n",
      "sfdx shane:package2:version:bump --minor --create\n// bump the minor version up by one and create a new package2version\n",
      "sfdx shane:package2:version:bump --minor --release\n// bump the minor version up by one and create a new package2version, then set that as released\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "major": {
        "name": "major",
        "type": "boolean",
        "char": "M",
        "description": "Bump the major version by 1, sets minor,build to 0",
        "allowNo": false
      },
      "minor": {
        "name": "minor",
        "type": "boolean",
        "char": "m",
        "description": "Bump the minor version by 1",
        "allowNo": false
      },
      "patch": {
        "name": "patch",
        "type": "boolean",
        "char": "p",
        "description": "Bump the patch version by 1",
        "allowNo": false
      },
      "create": {
        "name": "create",
        "type": "boolean",
        "char": "c",
        "description": "create a new packageVersion from the new versionNumber",
        "allowNo": false
      },
      "release": {
        "name": "release",
        "type": "boolean",
        "char": "r",
        "description": "set the newly version as released (out of Beta).  Implies create whether you flag it or not :)",
        "allowNo": false
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "name of your package directory (defaults to force-app)",
        "default": "force-app"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "major": {
        "kind": "boolean",
        "char": "M",
        "description": "Bump the major version by 1, sets minor,build to 0",
        "exclusive": ["minor", "patch"],
        "allowNo": false,
        "type": "boolean"
      },
      "minor": {
        "kind": "boolean",
        "char": "m",
        "description": "Bump the minor version by 1",
        "exclusive": ["major", "patch"],
        "allowNo": false,
        "type": "boolean"
      },
      "patch": {
        "kind": "boolean",
        "char": "p",
        "description": "Bump the patch version by 1",
        "exclusive": ["major", "minor"],
        "allowNo": false,
        "type": "boolean"
      },
      "create": {
        "kind": "boolean",
        "char": "c",
        "description": "create a new packageVersion from the new versionNumber",
        "allowNo": false,
        "type": "boolean"
      },
      "release": {
        "kind": "boolean",
        "char": "r",
        "description": "set the newly version as released (out of Beta).  Implies create whether you flag it or not :)",
        "allowNo": false,
        "type": "boolean"
      },
      "target": {
        "kind": "string",
        "char": "t",
        "default": "force-app",
        "description": "name of your package directory (defaults to force-app)",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "requiresDevhubUsername": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:permset:check",
    "description": "who has access to what",
    "usage": "shane:permset:check -o <string> [-f <string>] [--users | --permsets | --profiles] [--fieldlevel <string>] [--objectlevel <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:permset:check -o Project__c --profiles --permsets\n    // list the profiles and permsets that have Read access to the object\n    ",
      "sfdx shane:permset:check -o Project__c -f Due_Date__c --fieldlevel Edit --profiles --permsets\n    // list the profiles and permsets that have Edit access to the field on the object\n    ",
      "sfdx shane:permset:check -o Project__c -f Due_Date__c --users\n    // list the users that have Read access to the field on the object, and the profile/permset(s) that are granting it\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "what object to check perms on",
        "required": true
      },
      "field": {
        "name": "field",
        "type": "option",
        "char": "f",
        "description": "what field to check"
      },
      "profiles": {
        "name": "profiles",
        "type": "boolean",
        "description": "return names/ids of profiles",
        "allowNo": false
      },
      "permsets": {
        "name": "permsets",
        "type": "boolean",
        "description": "return names/ids of permission sets",
        "allowNo": false
      },
      "users": {
        "name": "users",
        "type": "boolean",
        "description": "return names/ids of users with those profiles and/or permission sets",
        "allowNo": false
      },
      "fieldlevel": {
        "name": "fieldlevel",
        "type": "option",
        "description": "what level of perms are you looking for",
        "options": ["Read", "Edit"],
        "default": "Read"
      },
      "objectlevel": {
        "name": "objectlevel",
        "type": "option",
        "description": "what level of perms are you looking for",
        "options": ["Read", "Edit", "Create", "Delete", "ViewAll", "ModifyAll"],
        "default": "Read"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "description": "what object to check perms on",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "field": {
        "kind": "string",
        "char": "f",
        "description": "what field to check",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "profiles": {
        "kind": "boolean",
        "description": "return names/ids of profiles",
        "allowNo": false,
        "type": "boolean"
      },
      "permsets": {
        "kind": "boolean",
        "description": "return names/ids of permission sets",
        "allowNo": false,
        "type": "boolean"
      },
      "users": {
        "kind": "boolean",
        "description": "return names/ids of users with those profiles and/or permission sets",
        "exclusive": ["permsets", "profiles"],
        "allowNo": false,
        "type": "boolean"
      },
      "fieldlevel": {
        "kind": "string",
        "description": "what level of perms are you looking for",
        "default": "Read",
        "options": ["Read", "Edit"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "objectlevel": {
        "kind": "string",
        "description": "what level of perms are you looking for",
        "default": "Read",
        "options": ["Read", "Edit", "Create", "Delete", "ViewAll", "ModifyAll"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:permset:create",
    "description": "create or add stuff to a permset with maximum access",
    "usage": "shane:permset:create -n <string> [-f <string> -o <string>] [-r <string> undefined] [-a <string>] [-d <directory>] [-t] [-c] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:permset:create -n MyPermSet1 -o Something__c -f Some_Field__c\n    // create a permset in force-app/main/default for the object/field.  If MyPermSet1 doesn't exist, it will be created.\n    ",
      "sfdx shane:permset:create -n MyPermSet1 -o Something__c\n    // create a permset in force-app/main/default for every field on Something__c.\n    ",
      "sfdx shane:permset:create -n MyPermSet1\n    // create a permset in force-app/main/default for every field on every object!\n    ",
      "sfdx shane:permset:create -n MyPermSet1 -t\n    // create a permset in force-app/main/default for every field on every object.  If there's a tab for any of those objects, add that tab to the permset, too\n    ",
      "sfdx shane:permset:create -n MyPermSet1 -c\n    // create a permset in force-app/main/default for every field on every object, checking on org that all fields are permissionable\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "path to existing permset.  If it exists, new perms will be added to it.  If not, then it'll be created for you",
        "required": true
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "API name of an object to add perms for.  If blank, then you mean ALL the objects and ALL their fields and ALL their tabs"
      },
      "field": {
        "name": "field",
        "type": "option",
        "char": "f",
        "description": "API name of an field to add perms for.  Required --object If blank, then you mean all the fields"
      },
      "recordtype": {
        "name": "recordtype",
        "type": "option",
        "char": "r",
        "description": "API name of a record type to add perms for.  Required --object If blank, then you mean all the record types"
      },
      "application": {
        "name": "application",
        "type": "option",
        "char": "a",
        "description": "API name of an application to add perms for.  If blank, then you mean all the applications"
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      },
      "tab": {
        "name": "tab",
        "type": "boolean",
        "char": "t",
        "description": "also add the tab for the specified object (or all objects if there is no specified objects)",
        "allowNo": false
      },
      "checkpermissionable": {
        "name": "checkpermissionable",
        "type": "boolean",
        "char": "c",
        "description": "some fields' permissions can't be deducted from metadata, use describe on org to check if field is permissionable",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "emit additional command output to stdout",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "path to existing permset.  If it exists, new perms will be added to it.  If not, then it'll be created for you",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "object": {
        "kind": "string",
        "char": "o",
        "description": "API name of an object to add perms for.  If blank, then you mean ALL the objects and ALL their fields and ALL their tabs",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "field": {
        "kind": "string",
        "char": "f",
        "description": "API name of an field to add perms for.  Required --object If blank, then you mean all the fields",
        "dependsOn": ["object"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "recordtype": {
        "kind": "string",
        "char": "r",
        "description": "API name of a record type to add perms for.  Required --object If blank, then you mean all the record types",
        "dependsOn": ["object"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "application": {
        "kind": "string",
        "char": "a",
        "description": "API name of an application to add perms for.  If blank, then you mean all the applications",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "tab": {
        "kind": "boolean",
        "char": "t",
        "description": "also add the tab for the specified object (or all objects if there is no specified objects)",
        "allowNo": false,
        "type": "boolean"
      },
      "checkpermissionable": {
        "kind": "boolean",
        "char": "c",
        "description": "some fields' permissions can't be deducted from metadata, use describe on org to check if field is permissionable",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "type": "builtin"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:profile:allowip",
    "description": "allow the whole internet for a profile (no ip verification or 2FA/OTP challenges in dev)",
    "usage": "shane:profile:allowip -n <string> [-d <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:profile:allowip -n Admin\n// add loginIpRanges of 0.0.0.0 to 255.255.255.255 to an existing profile, or create one if it doesn't exist\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "profile name",
        "required": true
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "profile name",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:profile:convert",
    "description": "convert a profile into a permset",
    "usage": "shane:profile:convert -n <string> -p <string> [-d <directory>] [-e | -c] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:profile:convert -p Admin -n MyNewPermSet -e\n// create a permset in force-app/main/default from the Admin profile (profiles/Admin).  If MyNewPermSet doesn't exist, it will be created.  Content is removed from Admin profile (-e)\n",
      "sfdx shane:profile:convert -p Admin -n MyNewPermSet -c\n// create a permset in force-app/main/default from the Admin profile (profiles/Admin).  If MyNewPermSet doesn't exist, it will be created.  Leaves the original Admin profile and creates an Admin_Skinny profile that has everything in the permset removed (-c)\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "path to existing permset.  If it exists, new perms will be added to it.  If not, then it'll be created for you",
        "required": true
      },
      "profile": {
        "name": "profile",
        "type": "option",
        "char": "p",
        "description": "API name of an profile to convert.  If blank, then you mean ALL the objects and ALL their fields and ALL their tabs",
        "required": true
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      },
      "editprofile": {
        "name": "editprofile",
        "type": "boolean",
        "char": "e",
        "description": "remove metadata from original profile",
        "allowNo": false
      },
      "skinnyclone": {
        "name": "skinnyclone",
        "type": "boolean",
        "char": "c",
        "description": "create a new profile that's the original profile less permset (does not modify original profile)",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "path to existing permset.  If it exists, new perms will be added to it.  If not, then it'll be created for you",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "profile": {
        "kind": "string",
        "char": "p",
        "required": true,
        "description": "API name of an profile to convert.  If blank, then you mean ALL the objects and ALL their fields and ALL their tabs",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "editprofile": {
        "kind": "boolean",
        "char": "e",
        "description": "remove metadata from original profile",
        "exclusive": ["skinnyclone"],
        "allowNo": false,
        "type": "boolean"
      },
      "skinnyclone": {
        "kind": "boolean",
        "char": "c",
        "description": "create a new profile that's the original profile less permset (does not modify original profile)",
        "exclusive": ["editprofile"],
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:project:create",
    "description": "creates an sfdx project",
    "usage": "shane:project:create -n <string> [-g <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:project:create -n myProject\n// create a project in the folder with all the default structure\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetdevhubusername": {
        "name": "targetdevhubusername",
        "type": "option",
        "char": "v",
        "description": "username or alias for the dev hub org; overrides default dev hub org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name and path for the project",
        "required": true
      },
      "gitremote": {
        "name": "gitremote",
        "type": "option",
        "char": "g",
        "description": "full github url for the remote...overrides the default generated from git config user.name and project name"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresDevhubUsername": false,
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name and path for the project",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "gitremote": {
        "kind": "string",
        "char": "g",
        "description": "full github url for the remote...overrides the default generated from git config user.name and project name",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:remotesite:create",
    "description": "create a remote site setting in the local source.  Push it when you're done",
    "usage": "shane:remotesite:create -u <url> -n <string> [-d <string>] [-t <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:remotesite:create -n Test -u https://www.google.com\n// create a remote site setting in force-app/main/default\n",
      "sfdx shane:remotesite:create -n Test -u https://www.google.com -d \"my description\" -t myOtherDirectory/main/default\n// create a remote site setting in myOtherDirectory/main/default with a description\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "url": {
        "name": "url",
        "type": "option",
        "char": "u",
        "description": "url that you want to allow callouts to",
        "required": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name it (Salesforce API compliant name)",
        "required": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "optional description so you can remember why you added this and what it's for",
        "default": "added from sfdx plugin"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "url": {
        "kind": "url",
        "char": "u",
        "required": true,
        "description": "url that you want to allow callouts to",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name it (Salesforce API compliant name)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "default": "added from sfdx plugin",
        "description": "optional description so you can remember why you added this and what it's for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:source:replace",
    "description": "replace a string in a file with another",
    "usage": "shane:source:replace -f <filepath> -o <string> -n <string> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "file to modify",
        "required": true
      },
      "old": {
        "name": "old",
        "type": "option",
        "char": "o",
        "description": "the text you want to change",
        "required": true
      },
      "new": {
        "name": "new",
        "type": "option",
        "char": "n",
        "description": "the text you want it changed to",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "file to modify",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "old": {
        "kind": "string",
        "char": "o",
        "description": "the text you want to change",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "new": {
        "kind": "string",
        "char": "n",
        "description": "the text you want it changed to",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:static:create",
    "description": "create a static resource locally",
    "usage": "shane:static:create -n <string> -y <string> [-d <string>] [-t <directory>] [-p] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:static:create -n myJSResource -y js\n// creates /staticresources/myJSResource.js (empty file) and  /staticresources/myJSResource.resource-meta.xml\n",
      "sfdx shane:static:create -n myZipResource -y js -d \"my description\" -t myOtherDirectory/main/default\n// create an empty folder (zips when pushed), the meta.xml, with a description in a non-default directory.\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name it (Salesforce API compliant name)",
        "required": true
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "y",
        "description": "choose one of the following: zip, css, js, text, xml",
        "required": true,
        "options": ["zip", "css", "js", "text", "xml"]
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "optional description so you can remember why you added this and what it's for",
        "default": "added from sfdx plugin"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "default": "force-app/main/default"
      },
      "public": {
        "name": "public",
        "type": "boolean",
        "char": "p",
        "description": "mark the cache control public",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name it (Salesforce API compliant name)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "type": {
        "kind": "string",
        "char": "y",
        "required": true,
        "description": "choose one of the following: zip, css, js, text, xml",
        "options": ["zip", "css", "js", "text", "xml"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "string",
        "char": "d",
        "default": "added from sfdx plugin",
        "description": "optional description so you can remember why you added this and what it's for",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "directory",
        "char": "t",
        "default": "force-app/main/default",
        "description": "where to create the folder (if it doesn't exist already) and file...defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "public": {
        "kind": "boolean",
        "char": "p",
        "default": false,
        "description": "mark the cache control public",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "streaming:list",
    "description": "What kinds of things can I subscribe to?",
    "usage": "shane:streaming:list [-t <array>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/plugin-streaming",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx streaming:list // list everything",
      "sfdx streaming:list -t cdc,topic // list CDC and PushTopic but not standard and custom PlatformEvents "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "types": {
        "name": "types",
        "type": "option",
        "char": "t",
        "description": "optional specify which types to query",
        "default": ["cdc", "event", "topic"]
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/plugin-streaming",
    "flagsConfig": {
      "types": {
        "kind": "array",
        "char": "t",
        "description": "optional specify which types to query",
        "default": ["cdc", "event", "topic"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "streaming:pushtopic:create",
    "description": "Create push topics",
    "usage": "shane:streaming:pushtopic:create -n <string> -q <string> [-d <integer>] [-f <string>] [-o <array>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/plugin-streaming",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx streaming:pushtopic:create -n myTopic -q \"select Id,Name from account\"\n    // creates the push topic\n    ",
      "sfdx streaming:pushtopic:create -n myTopic -q \"select Id from account\" -f All -o create,update\n    // creates the push topic and sets operations and watches all fields\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name for the push topic",
        "required": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "add a description to the push topic"
      },
      "notifyforfields": {
        "name": "notifyforfields",
        "type": "option",
        "char": "f",
        "description": "Specifies which fields are evaluated to generate a notification",
        "options": ["All", "Referenced", "Select", "Where"],
        "default": "Referenced"
      },
      "operations": {
        "name": "operations",
        "type": "option",
        "char": "o",
        "description": "which operations should produce a notification",
        "default": ["create", "update", "delete", "undelete"]
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "description": "The SOQL query statement that determines which record changes trigger events to be sent to the channel.",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/plugin-streaming",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name for the push topic",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "integer",
        "char": "d",
        "description": "add a description to the push topic",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "notifyforfields": {
        "kind": "string",
        "char": "f",
        "description": "Specifies which fields are evaluated to generate a notification",
        "options": ["All", "Referenced", "Select", "Where"],
        "default": "Referenced",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "operations": {
        "kind": "array",
        "char": "o",
        "description": "which operations should produce a notification",
        "default": ["create", "update", "delete", "undelete"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "query": {
        "kind": "string",
        "char": "q",
        "required": true,
        "description": "The SOQL query statement that determines which record changes trigger events to be sent to the channel.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "streaming:pushtopic:deactivate",
    "description": "deactivate push topics",
    "usage": "shane:streaming:pushtopic:deactivate -n <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/plugin-streaming",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx streaming:pushtopic:deactivate -n myTopic"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name for the push topic",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/plugin-streaming",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name for the push topic",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "streaming:pushtopic:delete",
    "description": "Delete a push topic",
    "usage": "shane:streaming:pushtopic:delete -n <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/plugin-streaming",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx streaming:pushtopic:delete -n myTopic"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name for the push topic",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/plugin-streaming",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name for the push topic",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "streaming:pushtopic:update",
    "description": "Update push topics",
    "usage": "shane:streaming:pushtopic:update -n <string> [-d <integer>] [-f <string>] [-o <array>] [-q <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/plugin-streaming",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx streaming:pushtopic:update -n myTopic -q \"select Id,Name from account\"\n    // modifies the push topic\n    ",
      "sfdx streaming:pushtopic:update -n myTopic -q \"select Id from account\" -f All -o create,update\n    // modifies the push topic and sets operations and watches all fields\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name for the push topic",
        "required": true
      },
      "description": {
        "name": "description",
        "type": "option",
        "char": "d",
        "description": "add a description to the push topic"
      },
      "notifyforfields": {
        "name": "notifyforfields",
        "type": "option",
        "char": "f",
        "description": "Specifies which fields are evaluated to generate a notification",
        "options": ["All", "Referenced", "Select", "Where"]
      },
      "operations": {
        "name": "operations",
        "type": "option",
        "char": "o",
        "description": "which operations should produce a notification"
      },
      "query": {
        "name": "query",
        "type": "option",
        "char": "q",
        "description": "The SOQL query statement that determines which record changes trigger events to be sent to the channel."
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/plugin-streaming",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name for the push topic",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "description": {
        "kind": "integer",
        "char": "d",
        "description": "add a description to the push topic",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "notifyforfields": {
        "kind": "string",
        "char": "f",
        "description": "Specifies which fields are evaluated to generate a notification",
        "options": ["All", "Referenced", "Select", "Where"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "operations": {
        "kind": "array",
        "char": "o",
        "description": "which operations should produce a notification",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "query": {
        "kind": "string",
        "char": "q",
        "description": "The SOQL query statement that determines which record changes trigger events to be sent to the channel.",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "streaming:subscribe",
    "usage": "shane:streaming:subscribe [-t <string>] [-n <string>] [-r <integer>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@mshanemc/plugin-streaming",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx streaming:subscribe -t cdc -n ChangeEvents   // subscribe to all CDC ",
      "sfdx streaming:subscribe -t cdc -n AccountChangeEvent   // subscribe to cdc for a standard object ",
      "sfdx streaming:subscribe -t event -n Something__e   // subscribe to platform event ",
      "sfdx streaming:subscribe -t event -n Something__e -r 6744   // subscribe to platform event with a replay ID ",
      "sfdx streaming:subscribe -t topic -n myTopic   // subscribe to a push topic"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "type": {
        "name": "type",
        "type": "option",
        "char": "t",
        "description": "the type of thing you want to subscribe to",
        "options": ["event", "topic", "cdc"],
        "default": "event"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the topic/event/dataEvent"
      },
      "replay": {
        "name": "replay",
        "type": "option",
        "char": "r",
        "description": "replay Id to begin from",
        "default": -1
      }
    },
    "args": [],
    "pluginAlias": "@mshanemc/plugin-streaming",
    "flagsConfig": {
      "type": {
        "kind": "string",
        "char": "t",
        "description": "the type of thing you want to subscribe to",
        "options": ["event", "topic", "cdc"],
        "default": "event",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "description": "name of the topic/event/dataEvent",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "replay": {
        "kind": "integer",
        "char": "r",
        "description": "replay Id to begin from",
        "default": -1,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:tab:favorite",
    "description": "favorite a tab",
    "usage": "shane:tab:favorite -t <string> [-l <string>] [--start] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:tab:favorite -t Tab_API_Name'\"\n// creates a favorite\n",
      "sfdx shane:tab:favorite -t someNamespace__Tab_API_Name'\"\n// creates a favorite for a tab in a namespace\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "l",
        "description": "the label you want to appear in the favorites menu"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "description": "API name of the tab you want to favorite",
        "required": true
      },
      "start": {
        "name": "start",
        "type": "boolean",
        "description": "add the favorite at the beginning of the menu",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "l",
        "description": "the label you want to appear in the favorites menu",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "target": {
        "kind": "string",
        "char": "t",
        "required": true,
        "description": "API name of the tab you want to favorite",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "start": {
        "kind": "boolean",
        "description": "add the favorite at the beginning of the menu",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:theme:activate",
    "description": "Activate a LightningExperienceTheme via metadata api.  Makes no permanent changes to local source",
    "usage": "shane:theme:activate -n <string> [-b] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "name of the theme to activate",
        "required": true
      },
      "showbrowser": {
        "name": "showbrowser",
        "type": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "requiresUsername": false,
    "flagsConfig": {
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "name of the theme to activate",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "showbrowser": {
        "kind": "boolean",
        "char": "b",
        "description": "show the browser...useful for local debugging",
        "deprecated": {
          "messageOverride": "This flag is no longer used"
        },
        "allowNo": false,
        "type": "boolean"
      }
    },
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:tsp:username:update",
    "description": "change the username on all transaction security policies",
    "usage": "shane:tsp:username:update [-n <email>] [-d <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:tsp:username:update -n newusername@example.com\n// updates the username for executionUser and all notifications in all transaction security policies\n",
      "sfdx shane:tsp:username:create\n// updates the username for executionUser and all notifications in all transaction security policies to the default org's username\n",
      "sfdx shane:tsp:username:create -u someAlias\n// updates the username for executionUser and all notifications in all transaction security policies to the specified target org's username\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "newusername": {
        "name": "newusername",
        "type": "option",
        "char": "n",
        "description": "manually specify the username, ignoring your default or any -u"
      },
      "directory": {
        "name": "directory",
        "type": "option",
        "char": "d",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "default": "force-app/main/default"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "newusername": {
        "kind": "email",
        "char": "n",
        "description": "manually specify the username, ignoring your default or any -u",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "kind": "directory",
        "char": "d",
        "default": "force-app/main/default",
        "description": "Where is all this metadata? defaults to force-app/main/default",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresProject": false,
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:uiapi:objectinfo",
    "description": "get a ui api response from the objectinfo endpoint: https://developer.salesforce.com/docs/atlas.en-us.uiapi.meta/uiapi/ui_api_resources_object_info.htm",
    "usage": "shane:uiapi:objectinfo -o <string> [--outputfile <filepath>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:uiapi:objectinfo -o Account --json\n    // returns ui-api objectinfo for Account\n    ",
      "sfdx shane:uiapi:objectinfo -o Account --json --outputfile accountObjectInfo.json\n    // returns ui-api objectinfo for Account and saves it to a local file\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "object": {
        "name": "object",
        "type": "option",
        "char": "o",
        "description": "object api name",
        "required": true
      },
      "outputfile": {
        "name": "outputfile",
        "type": "option",
        "description": "local path to save the output to"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "object": {
        "kind": "string",
        "char": "o",
        "description": "object api name",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputfile": {
        "kind": "filepath",
        "description": "local path to save the output to",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:uiapi:record",
    "description": "get a ui api response from the getrecord endpoint: https://developer.salesforce.com/docs/atlas.en-us.uiapi.meta/uiapi/ui_api_resources_record_get.htm",
    "usage": "shane:uiapi:record -r <string> -f <array> [--optionalfields <array>] [--outputfile <filepath>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:uiapi:record -r 001R0000003I6CoIAK -f Account.Name --optionalfields Account.AnnualRevenue,AccountAccount.Number --json\n// default ui-api response for a getrecord.\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "recordid": {
        "name": "recordid",
        "type": "option",
        "char": "r",
        "description": "single recordId to generate the data/metadata",
        "required": true
      },
      "fields": {
        "name": "fields",
        "type": "option",
        "char": "f",
        "description": "fields to return.  Specify with the object API name, like Account.Name, Account.Phone, etc.  If not visible to the running user, an error is thrown",
        "required": true
      },
      "optionalfields": {
        "name": "optionalfields",
        "type": "option",
        "description": "optional fields to return.  If not visible to the running user, the field is just omitted"
      },
      "outputfile": {
        "name": "outputfile",
        "type": "option",
        "description": "local path to save the output to"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "recordid": {
        "kind": "string",
        "char": "r",
        "description": "single recordId to generate the data/metadata",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "fields": {
        "kind": "array",
        "char": "f",
        "required": true,
        "description": "fields to return.  Specify with the object API name, like Account.Name, Account.Phone, etc.  If not visible to the running user, an error is thrown",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "optionalfields": {
        "kind": "array",
        "description": "optional fields to return.  If not visible to the running user, the field is just omitted",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputfile": {
        "kind": "filepath",
        "description": "local path to save the output to",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:uiapi:recordui",
    "description": "get a ui api response from the record-ui endpoint: https://developer.salesforce.com/docs/atlas.en-us.uiapi.meta/uiapi/ui_api_resources_record_ui.htm",
    "usage": "shane:uiapi:recordui [-r <string> | --recordids <array>] [-l <array>] [-m <array>] [--outputfile <filepath>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:uiapi:recordui -r 001R0000003I6CoIAK --json\n// default ui-api response for a single recordId\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "recordid": {
        "name": "recordid",
        "type": "option",
        "char": "r",
        "description": "single recordId to generate the data/metadata"
      },
      "recordids": {
        "name": "recordids",
        "type": "option",
        "description": "array of recordIds to generate the data/metadata"
      },
      "layouttypes": {
        "name": "layouttypes",
        "type": "option",
        "char": "l",
        "description": "which layout (Compact, Full or both)"
      },
      "modes": {
        "name": "modes",
        "type": "option",
        "char": "m",
        "description": "which mode (Create, Edit, View, or combo)"
      },
      "outputfile": {
        "name": "outputfile",
        "type": "option",
        "description": "local path to save the output to"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "recordid": {
        "kind": "string",
        "char": "r",
        "description": "single recordId to generate the data/metadata",
        "exclusive": ["recordids"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "recordids": {
        "kind": "array",
        "description": "array of recordIds to generate the data/metadata",
        "exclusive": ["recordid"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "layouttypes": {
        "kind": "array",
        "char": "l",
        "description": "which layout (Compact, Full or both)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "modes": {
        "kind": "array",
        "char": "m",
        "description": "which mode (Create, Edit, View, or combo)",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "outputfile": {
        "kind": "filepath",
        "description": "local path to save the output to",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:allPhotos",
    "description": "set the chatter photos of anyone who has not set theirs already to encourage them to do so",
    "usage": "shane:user:allPhotos [-r <url>] [-f <directory>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:user:allphotos -u someAlias"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "repo": {
        "name": "repo",
        "type": "option",
        "char": "r",
        "description": "optional alternate repo of photos, which contains a folder of photos named /img",
        "default": "https://github.com/mshanemc/badProfilePhotos"
      },
      "folder": {
        "name": "folder",
        "type": "option",
        "char": "f",
        "description": "optional local folder of photos.  Overrides --repo"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "repo": {
        "kind": "url",
        "char": "r",
        "default": "https://github.com/mshanemc/badProfilePhotos",
        "description": "optional alternate repo of photos, which contains a folder of photos named /img",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "folder": {
        "kind": "directory",
        "char": "f",
        "description": "optional local folder of photos.  Overrides --repo",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:lightning:debug",
    "description": "set the user to debug mode",
    "usage": "shane:user:lightning:debug [-g <string>] [-l <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:user:lightning:debug\n    // puts the default user in lightning debug mode\n    ",
      "sfdx shane:user:lightning:debug -g Sarah -l McLaughlin\n    // puts the named user in lightning debug mode\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "firstname": {
        "name": "firstname",
        "type": "option",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency"
      },
      "lastname": {
        "name": "lastname",
        "type": "option",
        "char": "l",
        "description": "last name of the user"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "firstname": {
        "kind": "string",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "lastname": {
        "kind": "string",
        "char": "l",
        "description": "last name of the user",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:loginurl",
    "description": "generate a long-lived shareable login url for the org",
    "usage": "shane:user:loginurl [-p <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:user:loginurl\n    // generates a url including un and pw query strings to simplify logging into the scratch org\n    ",
      "sfdx shane:user:loginurl -p /lightning/setup/ObjectManager/home\n    // same, but sets the start url to ObjectManager\n    "
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "starturl": {
        "name": "starturl",
        "type": "option",
        "char": "p",
        "description": "url to open"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "starturl": {
        "kind": "string",
        "char": "p",
        "description": "url to open",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:password:set",
    "description": "Set the password for a user by first/last name",
    "usage": "shane:user:password:set -g <string> -l <string> -p <string> [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:user:password:set -p sfdx1234 -g User -l User\n// sets the password for User User to sfdx1234\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "firstname": {
        "name": "firstname",
        "type": "option",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency",
        "required": true
      },
      "lastname": {
        "name": "lastname",
        "type": "option",
        "char": "l",
        "description": "last name of the user",
        "required": true
      },
      "password": {
        "name": "password",
        "type": "option",
        "char": "p",
        "description": "the password you want the user to have",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "firstname": {
        "kind": "string",
        "char": "g",
        "required": true,
        "description": "first (given) name of the user--keeping -f for file for consistency",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "lastname": {
        "kind": "string",
        "char": "l",
        "required": true,
        "description": "last name of the user",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "password": {
        "kind": "string",
        "char": "p",
        "required": true,
        "description": "the password you want the user to have",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:permset:assign",
    "description": "Assign a permset to a user by first/last name, or just the default user.  Does not error if permset is already assigned",
    "usage": "shane:user:permset:assign -n <string> [-g <string> -l <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": ["sfdx shane:user:permset:assign -n thePermSet -g User -l User"],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "firstname": {
        "name": "firstname",
        "type": "option",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency"
      },
      "lastname": {
        "name": "lastname",
        "type": "option",
        "char": "l",
        "description": "last name of the user"
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "the value of the permset name or label field",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "firstname": {
        "kind": "string",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency",
        "dependsOn": ["lastname"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "lastname": {
        "kind": "string",
        "char": "l",
        "description": "last name of the user",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "string",
        "char": "n",
        "required": true,
        "description": "the value of the permset name or label field",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:photo",
    "description": "Set the photo for a user by first/last name",
    "usage": "shane:user:photo -l <string> [-g <string>] [-f <filepath> | -b <filepath>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:user:photo -f ~/Downloads/King.png -g User -l User\n// sets the chatter photo for the user named User User using the local file\n",
      "sfdx shane:user:photo -b ~/Downloads/King.png -g User -l User\n// sets the chatter banner photo for the user named User User using the local file\n",
      "sfdx shane:user:photo -f ~/Downloads/King.png -b ~/Downloads/OtherPhoto.jpg -g User -l User\n// sets the chatter banner photo AND user photo at the same time\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "firstname": {
        "name": "firstname",
        "type": "option",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency"
      },
      "lastname": {
        "name": "lastname",
        "type": "option",
        "char": "l",
        "description": "last name of the user",
        "required": true
      },
      "file": {
        "name": "file",
        "type": "option",
        "char": "f",
        "description": "local path of the photo to use"
      },
      "banner": {
        "name": "banner",
        "type": "option",
        "char": "b",
        "description": "local path of the chatter banner photo to use"
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "firstname": {
        "kind": "string",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "lastname": {
        "kind": "string",
        "char": "l",
        "required": true,
        "description": "last name of the user",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "file": {
        "kind": "filepath",
        "char": "f",
        "description": "local path of the photo to use",
        "exclusive": ["banner"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "banner": {
        "kind": "filepath",
        "char": "b",
        "description": "local path of the chatter banner photo to use",
        "exclusive": ["file"],
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "shane:user:psl",
    "description": "Assign a permset license already in an org for a user",
    "usage": "shane:user:psl -l <string> -n <filepath> [-g <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "shane-sfdx-plugins",
    "pluginType": "user",
    "aliases": [],
    "examples": [
      "sfdx shane:user:psl -n SomePSL -g User -l User\n// assign the PSL named 'somePSL' for the user named User User\n"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "firstname": {
        "name": "firstname",
        "type": "option",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency"
      },
      "lastname": {
        "name": "lastname",
        "type": "option",
        "char": "l",
        "description": "last name of the user",
        "required": true
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "developer name or label of the PermSetLicense",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "shane-sfdx-plugins",
    "flagsConfig": {
      "firstname": {
        "kind": "string",
        "char": "g",
        "description": "first (given) name of the user--keeping -f for file for consistency",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "lastname": {
        "kind": "string",
        "char": "l",
        "required": true,
        "description": "last name of the user",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "name": {
        "kind": "filepath",
        "char": "n",
        "required": true,
        "description": "developer name or label of the PermSetLicense",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": false,
    "supportsUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "_base": "@oclif/command@1.8.20",
    "strict": true,
    "parse": true,
    "parserOptions": {}
  },
  {
    "id": "typescript:update",
    "summary": "Runs tests with updated typescript version and ES target",
    "description": "Runs tests with updated typescript version and ES target",
    "strict": true,
    "pluginName": "@salesforce/plugin-release-management",
    "pluginAlias": "@salesforce/plugin-release-management",
    "pluginType": "user",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "summary": "Specify the typescript version you'd like to update to. Defaults to latest if not specified",
        "multiple": false,
        "default": "latest"
      },
      "target": {
        "name": "target",
        "type": "option",
        "char": "t",
        "summary": "Specify the ES target you'd like to use. Defaults to ESNext if not specified",
        "multiple": false,
        "default": "ESNext"
      }
    },
    "args": {},
    "_flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "SF_ENV": "SF_ENV",
    "_enableJsonFlag": false,
    "_baseFlags": {},
    "_base": "@oclif/core@2.0.8",
    "hasDynamicHelp": false
  },
  {
    "id": "update",
    "description": "update the <%= config.bin %> CLI",
    "strict": true,
    "pluginName": "@oclif/plugin-update",
    "pluginAlias": "@oclif/plugin-update",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      {
        "description": "Update to the stable channel:",
        "command": "<%= config.bin %> <%= command.id %> stable"
      },
      {
        "description": "Update to a specific version:",
        "command": "<%= config.bin %> <%= command.id %> --version 1.0.0"
      },
      {
        "description": "Interactively select version:",
        "command": "<%= config.bin %> <%= command.id %> --interactive"
      },
      {
        "description": "See available versions:",
        "command": "<%= config.bin %> <%= command.id %> --available"
      }
    ],
    "flags": {
      "autoupdate": {
        "name": "autoupdate",
        "type": "boolean",
        "hidden": true,
        "allowNo": false
      },
      "available": {
        "name": "available",
        "type": "boolean",
        "char": "a",
        "description": "Install a specific version.",
        "allowNo": false
      },
      "version": {
        "name": "version",
        "type": "option",
        "char": "v",
        "description": "Install a specific version.",
        "multiple": false,
        "exclusive": ["interactive"]
      },
      "interactive": {
        "name": "interactive",
        "type": "boolean",
        "char": "i",
        "description": "Interactively select version to install. This is ignored if a channel is provided.",
        "allowNo": false,
        "exclusive": ["version"]
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "description": "Force a re-download of the requested version.",
        "allowNo": false
      }
    },
    "args": {},
    "_flags": {
      "autoupdate": {
        "hidden": true,
        "allowNo": false,
        "type": "boolean"
      },
      "available": {
        "char": "a",
        "description": "Install a specific version.",
        "allowNo": false,
        "type": "boolean"
      },
      "version": {
        "char": "v",
        "description": "Install a specific version.",
        "exclusive": ["interactive"],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "interactive": {
        "char": "i",
        "description": "Interactively select version to install. This is ignored if a channel is provided.",
        "exclusive": ["version"],
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "description": "Force a re-download of the requested version.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  },
  {
    "id": "version",
    "strict": true,
    "pluginName": "@oclif/plugin-version",
    "pluginAlias": "@oclif/plugin-version",
    "pluginType": "core",
    "aliases": [],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "summary": "Show additional information about the CLI.",
        "description": "Additionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.",
        "allowNo": false
      }
    },
    "args": {},
    "_enableJsonFlag": false,
    "_baseFlags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_flags": {
      "verbose": {
        "summary": "Show additional information about the CLI.",
        "description": "Additionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false
  },
  {
    "id": "which",
    "description": "Show which plugin a command is in.",
    "strict": true,
    "pluginName": "@oclif/plugin-which",
    "pluginAlias": "@oclif/plugin-which",
    "pluginType": "core",
    "aliases": [],
    "examples": [
      {
        "description": "See which plugin the `help` command is in:",
        "command": "<%= config.bin %> <%= command.id %> help"
      }
    ],
    "flags": {},
    "args": {},
    "_base": "@oclif/core@2.0.11",
    "hasDynamicHelp": false,
    "_enableJsonFlag": false
  }
]
